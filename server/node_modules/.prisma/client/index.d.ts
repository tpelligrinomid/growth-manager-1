
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Goal
 * 
 */
export type Goal = $Result.DefaultSelection<Prisma.$GoalPayload>
/**
 * Model Note
 * 
 */
export type Note = $Result.DefaultSelection<Prisma.$NotePayload>
/**
 * Model ClientContact
 * 
 */
export type ClientContact = $Result.DefaultSelection<Prisma.$ClientContactPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const BusinessUnit: {
  NEW_NORTH: 'NEW_NORTH',
  IDEOMETRY: 'IDEOMETRY',
  MOTION: 'MOTION',
  SPOKE: 'SPOKE'
};

export type BusinessUnit = (typeof BusinessUnit)[keyof typeof BusinessUnit]


export const EngagementType: {
  STRATEGIC: 'STRATEGIC',
  TACTICAL: 'TACTICAL'
};

export type EngagementType = (typeof EngagementType)[keyof typeof EngagementType]


export const Priority: {
  TIER_1: 'TIER_1',
  TIER_2: 'TIER_2',
  TIER_3: 'TIER_3',
  TIER_4: 'TIER_4'
};

export type Priority = (typeof Priority)[keyof typeof Priority]


export const Service: {
  ABM: 'ABM',
  PAID: 'PAID',
  CONTENT: 'CONTENT',
  SEO: 'SEO',
  REPORTING: 'REPORTING',
  SOCIAL: 'SOCIAL',
  WEBSITE: 'WEBSITE'
};

export type Service = (typeof Service)[keyof typeof Service]

}

export type BusinessUnit = $Enums.BusinessUnit

export const BusinessUnit: typeof $Enums.BusinessUnit

export type EngagementType = $Enums.EngagementType

export const EngagementType: typeof $Enums.EngagementType

export type Priority = $Enums.Priority

export const Priority: typeof $Enums.Priority

export type Service = $Enums.Service

export const Service: typeof $Enums.Service

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.goal`: Exposes CRUD operations for the **Goal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Goals
    * const goals = await prisma.goal.findMany()
    * ```
    */
  get goal(): Prisma.GoalDelegate<ExtArgs>;

  /**
   * `prisma.note`: Exposes CRUD operations for the **Note** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notes
    * const notes = await prisma.note.findMany()
    * ```
    */
  get note(): Prisma.NoteDelegate<ExtArgs>;

  /**
   * `prisma.clientContact`: Exposes CRUD operations for the **ClientContact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClientContacts
    * const clientContacts = await prisma.clientContact.findMany()
    * ```
    */
  get clientContact(): Prisma.ClientContactDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Account: 'Account',
    Goal: 'Goal',
    Note: 'Note',
    ClientContact: 'ClientContact'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "account" | "goal" | "note" | "clientContact"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Goal: {
        payload: Prisma.$GoalPayload<ExtArgs>
        fields: Prisma.GoalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GoalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          findFirst: {
            args: Prisma.GoalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          findMany: {
            args: Prisma.GoalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>[]
          }
          create: {
            args: Prisma.GoalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          createMany: {
            args: Prisma.GoalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GoalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>[]
          }
          delete: {
            args: Prisma.GoalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          update: {
            args: Prisma.GoalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          deleteMany: {
            args: Prisma.GoalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GoalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GoalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GoalPayload>
          }
          aggregate: {
            args: Prisma.GoalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoal>
          }
          groupBy: {
            args: Prisma.GoalGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoalGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoalCountArgs<ExtArgs>
            result: $Utils.Optional<GoalCountAggregateOutputType> | number
          }
        }
      }
      Note: {
        payload: Prisma.$NotePayload<ExtArgs>
        fields: Prisma.NoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findFirst: {
            args: Prisma.NoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findMany: {
            args: Prisma.NoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          create: {
            args: Prisma.NoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          createMany: {
            args: Prisma.NoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          delete: {
            args: Prisma.NoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          update: {
            args: Prisma.NoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          deleteMany: {
            args: Prisma.NoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          aggregate: {
            args: Prisma.NoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNote>
          }
          groupBy: {
            args: Prisma.NoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<NoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoteCountArgs<ExtArgs>
            result: $Utils.Optional<NoteCountAggregateOutputType> | number
          }
        }
      }
      ClientContact: {
        payload: Prisma.$ClientContactPayload<ExtArgs>
        fields: Prisma.ClientContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContactPayload>
          }
          findFirst: {
            args: Prisma.ClientContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContactPayload>
          }
          findMany: {
            args: Prisma.ClientContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContactPayload>[]
          }
          create: {
            args: Prisma.ClientContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContactPayload>
          }
          createMany: {
            args: Prisma.ClientContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClientContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContactPayload>[]
          }
          delete: {
            args: Prisma.ClientContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContactPayload>
          }
          update: {
            args: Prisma.ClientContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContactPayload>
          }
          deleteMany: {
            args: Prisma.ClientContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClientContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClientContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientContactPayload>
          }
          aggregate: {
            args: Prisma.ClientContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClientContact>
          }
          groupBy: {
            args: Prisma.ClientContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientContactCountArgs<ExtArgs>
            result: $Utils.Optional<ClientContactCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AccountCountOutputType
   */

  export type AccountCountOutputType = {
    goals: number
    notes: number
    clientContacts: number
  }

  export type AccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goals?: boolean | AccountCountOutputTypeCountGoalsArgs
    notes?: boolean | AccountCountOutputTypeCountNotesArgs
    clientContacts?: boolean | AccountCountOutputTypeCountClientContactsArgs
  }

  // Custom InputTypes
  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountCountOutputType
     */
    select?: AccountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountClientContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientContactWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    pointsPurchased: number | null
    pointsDelivered: number | null
    recurringPointsAllotment: number | null
    mrr: number | null
    growthInMrr: number | null
    potentialMrr: number | null
    annualRevenue: number | null
    employees: number | null
  }

  export type AccountSumAggregateOutputType = {
    pointsPurchased: number | null
    pointsDelivered: number | null
    recurringPointsAllotment: number | null
    mrr: number | null
    growthInMrr: number | null
    potentialMrr: number | null
    annualRevenue: number | null
    employees: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    accountName: string | null
    businessUnit: $Enums.BusinessUnit | null
    engagementType: $Enums.EngagementType | null
    priority: $Enums.Priority | null
    accountManager: string | null
    teamManager: string | null
    relationshipStartDate: Date | null
    contractStartDate: Date | null
    contractRenewalEnd: Date | null
    pointsPurchased: number | null
    pointsDelivered: number | null
    delivery: string | null
    recurringPointsAllotment: number | null
    mrr: number | null
    growthInMrr: number | null
    potentialMrr: number | null
    website: string | null
    linkedinProfile: string | null
    industry: string | null
    annualRevenue: number | null
    employees: number | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    accountName: string | null
    businessUnit: $Enums.BusinessUnit | null
    engagementType: $Enums.EngagementType | null
    priority: $Enums.Priority | null
    accountManager: string | null
    teamManager: string | null
    relationshipStartDate: Date | null
    contractStartDate: Date | null
    contractRenewalEnd: Date | null
    pointsPurchased: number | null
    pointsDelivered: number | null
    delivery: string | null
    recurringPointsAllotment: number | null
    mrr: number | null
    growthInMrr: number | null
    potentialMrr: number | null
    website: string | null
    linkedinProfile: string | null
    industry: string | null
    annualRevenue: number | null
    employees: number | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    accountName: number
    businessUnit: number
    engagementType: number
    priority: number
    accountManager: number
    teamManager: number
    relationshipStartDate: number
    contractStartDate: number
    contractRenewalEnd: number
    services: number
    pointsPurchased: number
    pointsDelivered: number
    delivery: number
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website: number
    linkedinProfile: number
    industry: number
    annualRevenue: number
    employees: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    pointsPurchased?: true
    pointsDelivered?: true
    recurringPointsAllotment?: true
    mrr?: true
    growthInMrr?: true
    potentialMrr?: true
    annualRevenue?: true
    employees?: true
  }

  export type AccountSumAggregateInputType = {
    pointsPurchased?: true
    pointsDelivered?: true
    recurringPointsAllotment?: true
    mrr?: true
    growthInMrr?: true
    potentialMrr?: true
    annualRevenue?: true
    employees?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    accountName?: true
    businessUnit?: true
    engagementType?: true
    priority?: true
    accountManager?: true
    teamManager?: true
    relationshipStartDate?: true
    contractStartDate?: true
    contractRenewalEnd?: true
    pointsPurchased?: true
    pointsDelivered?: true
    delivery?: true
    recurringPointsAllotment?: true
    mrr?: true
    growthInMrr?: true
    potentialMrr?: true
    website?: true
    linkedinProfile?: true
    industry?: true
    annualRevenue?: true
    employees?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    accountName?: true
    businessUnit?: true
    engagementType?: true
    priority?: true
    accountManager?: true
    teamManager?: true
    relationshipStartDate?: true
    contractStartDate?: true
    contractRenewalEnd?: true
    pointsPurchased?: true
    pointsDelivered?: true
    delivery?: true
    recurringPointsAllotment?: true
    mrr?: true
    growthInMrr?: true
    potentialMrr?: true
    website?: true
    linkedinProfile?: true
    industry?: true
    annualRevenue?: true
    employees?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    accountName?: true
    businessUnit?: true
    engagementType?: true
    priority?: true
    accountManager?: true
    teamManager?: true
    relationshipStartDate?: true
    contractStartDate?: true
    contractRenewalEnd?: true
    services?: true
    pointsPurchased?: true
    pointsDelivered?: true
    delivery?: true
    recurringPointsAllotment?: true
    mrr?: true
    growthInMrr?: true
    potentialMrr?: true
    website?: true
    linkedinProfile?: true
    industry?: true
    annualRevenue?: true
    employees?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    accountName: string
    businessUnit: $Enums.BusinessUnit
    engagementType: $Enums.EngagementType
    priority: $Enums.Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date
    contractStartDate: Date
    contractRenewalEnd: Date
    services: $Enums.Service[]
    pointsPurchased: number
    pointsDelivered: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website: string | null
    linkedinProfile: string | null
    industry: string
    annualRevenue: number
    employees: number
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountName?: boolean
    businessUnit?: boolean
    engagementType?: boolean
    priority?: boolean
    accountManager?: boolean
    teamManager?: boolean
    relationshipStartDate?: boolean
    contractStartDate?: boolean
    contractRenewalEnd?: boolean
    services?: boolean
    pointsPurchased?: boolean
    pointsDelivered?: boolean
    delivery?: boolean
    recurringPointsAllotment?: boolean
    mrr?: boolean
    growthInMrr?: boolean
    potentialMrr?: boolean
    website?: boolean
    linkedinProfile?: boolean
    industry?: boolean
    annualRevenue?: boolean
    employees?: boolean
    goals?: boolean | Account$goalsArgs<ExtArgs>
    notes?: boolean | Account$notesArgs<ExtArgs>
    clientContacts?: boolean | Account$clientContactsArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountName?: boolean
    businessUnit?: boolean
    engagementType?: boolean
    priority?: boolean
    accountManager?: boolean
    teamManager?: boolean
    relationshipStartDate?: boolean
    contractStartDate?: boolean
    contractRenewalEnd?: boolean
    services?: boolean
    pointsPurchased?: boolean
    pointsDelivered?: boolean
    delivery?: boolean
    recurringPointsAllotment?: boolean
    mrr?: boolean
    growthInMrr?: boolean
    potentialMrr?: boolean
    website?: boolean
    linkedinProfile?: boolean
    industry?: boolean
    annualRevenue?: boolean
    employees?: boolean
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    accountName?: boolean
    businessUnit?: boolean
    engagementType?: boolean
    priority?: boolean
    accountManager?: boolean
    teamManager?: boolean
    relationshipStartDate?: boolean
    contractStartDate?: boolean
    contractRenewalEnd?: boolean
    services?: boolean
    pointsPurchased?: boolean
    pointsDelivered?: boolean
    delivery?: boolean
    recurringPointsAllotment?: boolean
    mrr?: boolean
    growthInMrr?: boolean
    potentialMrr?: boolean
    website?: boolean
    linkedinProfile?: boolean
    industry?: boolean
    annualRevenue?: boolean
    employees?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    goals?: boolean | Account$goalsArgs<ExtArgs>
    notes?: boolean | Account$notesArgs<ExtArgs>
    clientContacts?: boolean | Account$clientContactsArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      goals: Prisma.$GoalPayload<ExtArgs>[]
      notes: Prisma.$NotePayload<ExtArgs>[]
      clientContacts: Prisma.$ClientContactPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      accountName: string
      businessUnit: $Enums.BusinessUnit
      engagementType: $Enums.EngagementType
      priority: $Enums.Priority
      accountManager: string
      teamManager: string
      relationshipStartDate: Date
      contractStartDate: Date
      contractRenewalEnd: Date
      services: $Enums.Service[]
      pointsPurchased: number
      pointsDelivered: number
      delivery: string
      recurringPointsAllotment: number
      mrr: number
      growthInMrr: number
      potentialMrr: number
      website: string | null
      linkedinProfile: string | null
      industry: string
      annualRevenue: number
      employees: number
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    goals<T extends Account$goalsArgs<ExtArgs> = {}>(args?: Subset<T, Account$goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany"> | Null>
    notes<T extends Account$notesArgs<ExtArgs> = {}>(args?: Subset<T, Account$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany"> | Null>
    clientContacts<T extends Account$clientContactsArgs<ExtArgs> = {}>(args?: Subset<T, Account$clientContactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientContactPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly accountName: FieldRef<"Account", 'String'>
    readonly businessUnit: FieldRef<"Account", 'BusinessUnit'>
    readonly engagementType: FieldRef<"Account", 'EngagementType'>
    readonly priority: FieldRef<"Account", 'Priority'>
    readonly accountManager: FieldRef<"Account", 'String'>
    readonly teamManager: FieldRef<"Account", 'String'>
    readonly relationshipStartDate: FieldRef<"Account", 'DateTime'>
    readonly contractStartDate: FieldRef<"Account", 'DateTime'>
    readonly contractRenewalEnd: FieldRef<"Account", 'DateTime'>
    readonly services: FieldRef<"Account", 'Service[]'>
    readonly pointsPurchased: FieldRef<"Account", 'Int'>
    readonly pointsDelivered: FieldRef<"Account", 'Int'>
    readonly delivery: FieldRef<"Account", 'String'>
    readonly recurringPointsAllotment: FieldRef<"Account", 'Int'>
    readonly mrr: FieldRef<"Account", 'Int'>
    readonly growthInMrr: FieldRef<"Account", 'Int'>
    readonly potentialMrr: FieldRef<"Account", 'Int'>
    readonly website: FieldRef<"Account", 'String'>
    readonly linkedinProfile: FieldRef<"Account", 'String'>
    readonly industry: FieldRef<"Account", 'String'>
    readonly annualRevenue: FieldRef<"Account", 'Int'>
    readonly employees: FieldRef<"Account", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }

  /**
   * Account.goals
   */
  export type Account$goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    cursor?: GoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Account.notes
   */
  export type Account$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Account.clientContacts
   */
  export type Account$clientContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContactInclude<ExtArgs> | null
    where?: ClientContactWhereInput
    orderBy?: ClientContactOrderByWithRelationInput | ClientContactOrderByWithRelationInput[]
    cursor?: ClientContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClientContactScalarFieldEnum | ClientContactScalarFieldEnum[]
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Goal
   */

  export type AggregateGoal = {
    _count: GoalCountAggregateOutputType | null
    _avg: GoalAvgAggregateOutputType | null
    _sum: GoalSumAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  export type GoalAvgAggregateOutputType = {
    progress: number | null
  }

  export type GoalSumAggregateOutputType = {
    progress: number | null
  }

  export type GoalMinAggregateOutputType = {
    id: string | null
    clientId: string | null
    description: string | null
    status: string | null
    dueDate: Date | null
    progress: number | null
  }

  export type GoalMaxAggregateOutputType = {
    id: string | null
    clientId: string | null
    description: string | null
    status: string | null
    dueDate: Date | null
    progress: number | null
  }

  export type GoalCountAggregateOutputType = {
    id: number
    clientId: number
    description: number
    status: number
    dueDate: number
    progress: number
    _all: number
  }


  export type GoalAvgAggregateInputType = {
    progress?: true
  }

  export type GoalSumAggregateInputType = {
    progress?: true
  }

  export type GoalMinAggregateInputType = {
    id?: true
    clientId?: true
    description?: true
    status?: true
    dueDate?: true
    progress?: true
  }

  export type GoalMaxAggregateInputType = {
    id?: true
    clientId?: true
    description?: true
    status?: true
    dueDate?: true
    progress?: true
  }

  export type GoalCountAggregateInputType = {
    id?: true
    clientId?: true
    description?: true
    status?: true
    dueDate?: true
    progress?: true
    _all?: true
  }

  export type GoalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goal to aggregate.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Goals
    **/
    _count?: true | GoalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GoalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GoalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalMaxAggregateInputType
  }

  export type GetGoalAggregateType<T extends GoalAggregateArgs> = {
        [P in keyof T & keyof AggregateGoal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoal[P]>
      : GetScalarType<T[P], AggregateGoal[P]>
  }




  export type GoalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
    orderBy?: GoalOrderByWithAggregationInput | GoalOrderByWithAggregationInput[]
    by: GoalScalarFieldEnum[] | GoalScalarFieldEnum
    having?: GoalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalCountAggregateInputType | true
    _avg?: GoalAvgAggregateInputType
    _sum?: GoalSumAggregateInputType
    _min?: GoalMinAggregateInputType
    _max?: GoalMaxAggregateInputType
  }

  export type GoalGroupByOutputType = {
    id: string
    clientId: string
    description: string
    status: string
    dueDate: Date
    progress: number
    _count: GoalCountAggregateOutputType | null
    _avg: GoalAvgAggregateOutputType | null
    _sum: GoalSumAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  type GetGoalGroupByPayload<T extends GoalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalGroupByOutputType[P]>
            : GetScalarType<T[P], GoalGroupByOutputType[P]>
        }
      >
    >


  export type GoalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    description?: boolean
    status?: boolean
    dueDate?: boolean
    progress?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>

  export type GoalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    description?: boolean
    status?: boolean
    dueDate?: boolean
    progress?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>

  export type GoalSelectScalar = {
    id?: boolean
    clientId?: boolean
    description?: boolean
    status?: boolean
    dueDate?: boolean
    progress?: boolean
  }

  export type GoalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }
  export type GoalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }

  export type $GoalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Goal"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clientId: string
      description: string
      status: string
      dueDate: Date
      progress: number
    }, ExtArgs["result"]["goal"]>
    composites: {}
  }

  type GoalGetPayload<S extends boolean | null | undefined | GoalDefaultArgs> = $Result.GetResult<Prisma.$GoalPayload, S>

  type GoalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GoalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GoalCountAggregateInputType | true
    }

  export interface GoalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Goal'], meta: { name: 'Goal' } }
    /**
     * Find zero or one Goal that matches the filter.
     * @param {GoalFindUniqueArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GoalFindUniqueArgs>(args: SelectSubset<T, GoalFindUniqueArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Goal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GoalFindUniqueOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GoalFindUniqueOrThrowArgs>(args: SelectSubset<T, GoalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Goal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GoalFindFirstArgs>(args?: SelectSubset<T, GoalFindFirstArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Goal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GoalFindFirstOrThrowArgs>(args?: SelectSubset<T, GoalFindFirstOrThrowArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Goals
     * const goals = await prisma.goal.findMany()
     * 
     * // Get first 10 Goals
     * const goals = await prisma.goal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalWithIdOnly = await prisma.goal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GoalFindManyArgs>(args?: SelectSubset<T, GoalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Goal.
     * @param {GoalCreateArgs} args - Arguments to create a Goal.
     * @example
     * // Create one Goal
     * const Goal = await prisma.goal.create({
     *   data: {
     *     // ... data to create a Goal
     *   }
     * })
     * 
     */
    create<T extends GoalCreateArgs>(args: SelectSubset<T, GoalCreateArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Goals.
     * @param {GoalCreateManyArgs} args - Arguments to create many Goals.
     * @example
     * // Create many Goals
     * const goal = await prisma.goal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GoalCreateManyArgs>(args?: SelectSubset<T, GoalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Goals and returns the data saved in the database.
     * @param {GoalCreateManyAndReturnArgs} args - Arguments to create many Goals.
     * @example
     * // Create many Goals
     * const goal = await prisma.goal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Goals and only return the `id`
     * const goalWithIdOnly = await prisma.goal.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GoalCreateManyAndReturnArgs>(args?: SelectSubset<T, GoalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Goal.
     * @param {GoalDeleteArgs} args - Arguments to delete one Goal.
     * @example
     * // Delete one Goal
     * const Goal = await prisma.goal.delete({
     *   where: {
     *     // ... filter to delete one Goal
     *   }
     * })
     * 
     */
    delete<T extends GoalDeleteArgs>(args: SelectSubset<T, GoalDeleteArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Goal.
     * @param {GoalUpdateArgs} args - Arguments to update one Goal.
     * @example
     * // Update one Goal
     * const goal = await prisma.goal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GoalUpdateArgs>(args: SelectSubset<T, GoalUpdateArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Goals.
     * @param {GoalDeleteManyArgs} args - Arguments to filter Goals to delete.
     * @example
     * // Delete a few Goals
     * const { count } = await prisma.goal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GoalDeleteManyArgs>(args?: SelectSubset<T, GoalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Goals
     * const goal = await prisma.goal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GoalUpdateManyArgs>(args: SelectSubset<T, GoalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Goal.
     * @param {GoalUpsertArgs} args - Arguments to update or create a Goal.
     * @example
     * // Update or create a Goal
     * const goal = await prisma.goal.upsert({
     *   create: {
     *     // ... data to create a Goal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Goal we want to update
     *   }
     * })
     */
    upsert<T extends GoalUpsertArgs>(args: SelectSubset<T, GoalUpsertArgs<ExtArgs>>): Prisma__GoalClient<$Result.GetResult<Prisma.$GoalPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalCountArgs} args - Arguments to filter Goals to count.
     * @example
     * // Count the number of Goals
     * const count = await prisma.goal.count({
     *   where: {
     *     // ... the filter for the Goals we want to count
     *   }
     * })
    **/
    count<T extends GoalCountArgs>(
      args?: Subset<T, GoalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalAggregateArgs>(args: Subset<T, GoalAggregateArgs>): Prisma.PrismaPromise<GetGoalAggregateType<T>>

    /**
     * Group by Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoalGroupByArgs['orderBy'] }
        : { orderBy?: GoalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Goal model
   */
  readonly fields: GoalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Goal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GoalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Goal model
   */ 
  interface GoalFieldRefs {
    readonly id: FieldRef<"Goal", 'String'>
    readonly clientId: FieldRef<"Goal", 'String'>
    readonly description: FieldRef<"Goal", 'String'>
    readonly status: FieldRef<"Goal", 'String'>
    readonly dueDate: FieldRef<"Goal", 'DateTime'>
    readonly progress: FieldRef<"Goal", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Goal findUnique
   */
  export type GoalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal findUniqueOrThrow
   */
  export type GoalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal findFirst
   */
  export type GoalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     */
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal findFirstOrThrow
   */
  export type GoalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     */
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal findMany
   */
  export type GoalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goals to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: GoalOrderByWithRelationInput | GoalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    distinct?: GoalScalarFieldEnum | GoalScalarFieldEnum[]
  }

  /**
   * Goal create
   */
  export type GoalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The data needed to create a Goal.
     */
    data: XOR<GoalCreateInput, GoalUncheckedCreateInput>
  }

  /**
   * Goal createMany
   */
  export type GoalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Goals.
     */
    data: GoalCreateManyInput | GoalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Goal createManyAndReturn
   */
  export type GoalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Goals.
     */
    data: GoalCreateManyInput | GoalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Goal update
   */
  export type GoalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The data needed to update a Goal.
     */
    data: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
    /**
     * Choose, which Goal to update.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal updateMany
   */
  export type GoalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Goals.
     */
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyInput>
    /**
     * Filter which Goals to update
     */
    where?: GoalWhereInput
  }

  /**
   * Goal upsert
   */
  export type GoalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The filter to search for the Goal to update in case it exists.
     */
    where: GoalWhereUniqueInput
    /**
     * In case the Goal found by the `where` argument doesn't exist, create a new Goal with this data.
     */
    create: XOR<GoalCreateInput, GoalUncheckedCreateInput>
    /**
     * In case the Goal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
  }

  /**
   * Goal delete
   */
  export type GoalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter which Goal to delete.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal deleteMany
   */
  export type GoalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goals to delete
     */
    where?: GoalWhereInput
  }

  /**
   * Goal without action
   */
  export type GoalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GoalInclude<ExtArgs> | null
  }


  /**
   * Model Note
   */

  export type AggregateNote = {
    _count: NoteCountAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  export type NoteMinAggregateOutputType = {
    id: string | null
    clientId: string | null
    description: string | null
    createdBy: string | null
    createdAt: Date | null
  }

  export type NoteMaxAggregateOutputType = {
    id: string | null
    clientId: string | null
    description: string | null
    createdBy: string | null
    createdAt: Date | null
  }

  export type NoteCountAggregateOutputType = {
    id: number
    clientId: number
    description: number
    createdBy: number
    createdAt: number
    _all: number
  }


  export type NoteMinAggregateInputType = {
    id?: true
    clientId?: true
    description?: true
    createdBy?: true
    createdAt?: true
  }

  export type NoteMaxAggregateInputType = {
    id?: true
    clientId?: true
    description?: true
    createdBy?: true
    createdAt?: true
  }

  export type NoteCountAggregateInputType = {
    id?: true
    clientId?: true
    description?: true
    createdBy?: true
    createdAt?: true
    _all?: true
  }

  export type NoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Note to aggregate.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notes
    **/
    _count?: true | NoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoteMaxAggregateInputType
  }

  export type GetNoteAggregateType<T extends NoteAggregateArgs> = {
        [P in keyof T & keyof AggregateNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNote[P]>
      : GetScalarType<T[P], AggregateNote[P]>
  }




  export type NoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithAggregationInput | NoteOrderByWithAggregationInput[]
    by: NoteScalarFieldEnum[] | NoteScalarFieldEnum
    having?: NoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoteCountAggregateInputType | true
    _min?: NoteMinAggregateInputType
    _max?: NoteMaxAggregateInputType
  }

  export type NoteGroupByOutputType = {
    id: string
    clientId: string
    description: string
    createdBy: string
    createdAt: Date
    _count: NoteCountAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  type GetNoteGroupByPayload<T extends NoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoteGroupByOutputType[P]>
            : GetScalarType<T[P], NoteGroupByOutputType[P]>
        }
      >
    >


  export type NoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    description?: boolean
    createdBy?: boolean
    createdAt?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    description?: boolean
    createdBy?: boolean
    createdAt?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectScalar = {
    id?: boolean
    clientId?: boolean
    description?: boolean
    createdBy?: boolean
    createdAt?: boolean
  }

  export type NoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }
  export type NoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }

  export type $NotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Note"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clientId: string
      description: string
      createdBy: string
      createdAt: Date
    }, ExtArgs["result"]["note"]>
    composites: {}
  }

  type NoteGetPayload<S extends boolean | null | undefined | NoteDefaultArgs> = $Result.GetResult<Prisma.$NotePayload, S>

  type NoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NoteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NoteCountAggregateInputType | true
    }

  export interface NoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Note'], meta: { name: 'Note' } }
    /**
     * Find zero or one Note that matches the filter.
     * @param {NoteFindUniqueArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NoteFindUniqueArgs>(args: SelectSubset<T, NoteFindUniqueArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Note that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NoteFindUniqueOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NoteFindUniqueOrThrowArgs>(args: SelectSubset<T, NoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Note that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NoteFindFirstArgs>(args?: SelectSubset<T, NoteFindFirstArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Note that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NoteFindFirstOrThrowArgs>(args?: SelectSubset<T, NoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notes
     * const notes = await prisma.note.findMany()
     * 
     * // Get first 10 Notes
     * const notes = await prisma.note.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noteWithIdOnly = await prisma.note.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NoteFindManyArgs>(args?: SelectSubset<T, NoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Note.
     * @param {NoteCreateArgs} args - Arguments to create a Note.
     * @example
     * // Create one Note
     * const Note = await prisma.note.create({
     *   data: {
     *     // ... data to create a Note
     *   }
     * })
     * 
     */
    create<T extends NoteCreateArgs>(args: SelectSubset<T, NoteCreateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notes.
     * @param {NoteCreateManyArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NoteCreateManyArgs>(args?: SelectSubset<T, NoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notes and returns the data saved in the database.
     * @param {NoteCreateManyAndReturnArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notes and only return the `id`
     * const noteWithIdOnly = await prisma.note.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NoteCreateManyAndReturnArgs>(args?: SelectSubset<T, NoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Note.
     * @param {NoteDeleteArgs} args - Arguments to delete one Note.
     * @example
     * // Delete one Note
     * const Note = await prisma.note.delete({
     *   where: {
     *     // ... filter to delete one Note
     *   }
     * })
     * 
     */
    delete<T extends NoteDeleteArgs>(args: SelectSubset<T, NoteDeleteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Note.
     * @param {NoteUpdateArgs} args - Arguments to update one Note.
     * @example
     * // Update one Note
     * const note = await prisma.note.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NoteUpdateArgs>(args: SelectSubset<T, NoteUpdateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notes.
     * @param {NoteDeleteManyArgs} args - Arguments to filter Notes to delete.
     * @example
     * // Delete a few Notes
     * const { count } = await prisma.note.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NoteDeleteManyArgs>(args?: SelectSubset<T, NoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NoteUpdateManyArgs>(args: SelectSubset<T, NoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Note.
     * @param {NoteUpsertArgs} args - Arguments to update or create a Note.
     * @example
     * // Update or create a Note
     * const note = await prisma.note.upsert({
     *   create: {
     *     // ... data to create a Note
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Note we want to update
     *   }
     * })
     */
    upsert<T extends NoteUpsertArgs>(args: SelectSubset<T, NoteUpsertArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteCountArgs} args - Arguments to filter Notes to count.
     * @example
     * // Count the number of Notes
     * const count = await prisma.note.count({
     *   where: {
     *     // ... the filter for the Notes we want to count
     *   }
     * })
    **/
    count<T extends NoteCountArgs>(
      args?: Subset<T, NoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoteAggregateArgs>(args: Subset<T, NoteAggregateArgs>): Prisma.PrismaPromise<GetNoteAggregateType<T>>

    /**
     * Group by Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoteGroupByArgs['orderBy'] }
        : { orderBy?: NoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Note model
   */
  readonly fields: NoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Note.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Note model
   */ 
  interface NoteFieldRefs {
    readonly id: FieldRef<"Note", 'String'>
    readonly clientId: FieldRef<"Note", 'String'>
    readonly description: FieldRef<"Note", 'String'>
    readonly createdBy: FieldRef<"Note", 'String'>
    readonly createdAt: FieldRef<"Note", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Note findUnique
   */
  export type NoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findUniqueOrThrow
   */
  export type NoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findFirst
   */
  export type NoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findFirstOrThrow
   */
  export type NoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findMany
   */
  export type NoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Notes to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note create
   */
  export type NoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Note.
     */
    data: XOR<NoteCreateInput, NoteUncheckedCreateInput>
  }

  /**
   * Note createMany
   */
  export type NoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Note createManyAndReturn
   */
  export type NoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Note update
   */
  export type NoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Note.
     */
    data: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
    /**
     * Choose, which Note to update.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note updateMany
   */
  export type NoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notes.
     */
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    /**
     * Filter which Notes to update
     */
    where?: NoteWhereInput
  }

  /**
   * Note upsert
   */
  export type NoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Note to update in case it exists.
     */
    where: NoteWhereUniqueInput
    /**
     * In case the Note found by the `where` argument doesn't exist, create a new Note with this data.
     */
    create: XOR<NoteCreateInput, NoteUncheckedCreateInput>
    /**
     * In case the Note was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
  }

  /**
   * Note delete
   */
  export type NoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter which Note to delete.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note deleteMany
   */
  export type NoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notes to delete
     */
    where?: NoteWhereInput
  }

  /**
   * Note without action
   */
  export type NoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
  }


  /**
   * Model ClientContact
   */

  export type AggregateClientContact = {
    _count: ClientContactCountAggregateOutputType | null
    _min: ClientContactMinAggregateOutputType | null
    _max: ClientContactMaxAggregateOutputType | null
  }

  export type ClientContactMinAggregateOutputType = {
    id: string | null
    clientId: string | null
    firstName: string | null
    lastName: string | null
    title: string | null
    email: string | null
  }

  export type ClientContactMaxAggregateOutputType = {
    id: string | null
    clientId: string | null
    firstName: string | null
    lastName: string | null
    title: string | null
    email: string | null
  }

  export type ClientContactCountAggregateOutputType = {
    id: number
    clientId: number
    firstName: number
    lastName: number
    title: number
    email: number
    _all: number
  }


  export type ClientContactMinAggregateInputType = {
    id?: true
    clientId?: true
    firstName?: true
    lastName?: true
    title?: true
    email?: true
  }

  export type ClientContactMaxAggregateInputType = {
    id?: true
    clientId?: true
    firstName?: true
    lastName?: true
    title?: true
    email?: true
  }

  export type ClientContactCountAggregateInputType = {
    id?: true
    clientId?: true
    firstName?: true
    lastName?: true
    title?: true
    email?: true
    _all?: true
  }

  export type ClientContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClientContact to aggregate.
     */
    where?: ClientContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientContacts to fetch.
     */
    orderBy?: ClientContactOrderByWithRelationInput | ClientContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClientContacts
    **/
    _count?: true | ClientContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientContactMaxAggregateInputType
  }

  export type GetClientContactAggregateType<T extends ClientContactAggregateArgs> = {
        [P in keyof T & keyof AggregateClientContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientContact[P]>
      : GetScalarType<T[P], AggregateClientContact[P]>
  }




  export type ClientContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientContactWhereInput
    orderBy?: ClientContactOrderByWithAggregationInput | ClientContactOrderByWithAggregationInput[]
    by: ClientContactScalarFieldEnum[] | ClientContactScalarFieldEnum
    having?: ClientContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientContactCountAggregateInputType | true
    _min?: ClientContactMinAggregateInputType
    _max?: ClientContactMaxAggregateInputType
  }

  export type ClientContactGroupByOutputType = {
    id: string
    clientId: string
    firstName: string
    lastName: string
    title: string
    email: string
    _count: ClientContactCountAggregateOutputType | null
    _min: ClientContactMinAggregateOutputType | null
    _max: ClientContactMaxAggregateOutputType | null
  }

  type GetClientContactGroupByPayload<T extends ClientContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientContactGroupByOutputType[P]>
            : GetScalarType<T[P], ClientContactGroupByOutputType[P]>
        }
      >
    >


  export type ClientContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    firstName?: boolean
    lastName?: boolean
    title?: boolean
    email?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clientContact"]>

  export type ClientContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    firstName?: boolean
    lastName?: boolean
    title?: boolean
    email?: boolean
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clientContact"]>

  export type ClientContactSelectScalar = {
    id?: boolean
    clientId?: boolean
    firstName?: boolean
    lastName?: boolean
    title?: boolean
    email?: boolean
  }

  export type ClientContactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }
  export type ClientContactIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | AccountDefaultArgs<ExtArgs>
  }

  export type $ClientContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClientContact"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clientId: string
      firstName: string
      lastName: string
      title: string
      email: string
    }, ExtArgs["result"]["clientContact"]>
    composites: {}
  }

  type ClientContactGetPayload<S extends boolean | null | undefined | ClientContactDefaultArgs> = $Result.GetResult<Prisma.$ClientContactPayload, S>

  type ClientContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClientContactFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClientContactCountAggregateInputType | true
    }

  export interface ClientContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClientContact'], meta: { name: 'ClientContact' } }
    /**
     * Find zero or one ClientContact that matches the filter.
     * @param {ClientContactFindUniqueArgs} args - Arguments to find a ClientContact
     * @example
     * // Get one ClientContact
     * const clientContact = await prisma.clientContact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClientContactFindUniqueArgs>(args: SelectSubset<T, ClientContactFindUniqueArgs<ExtArgs>>): Prisma__ClientContactClient<$Result.GetResult<Prisma.$ClientContactPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ClientContact that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClientContactFindUniqueOrThrowArgs} args - Arguments to find a ClientContact
     * @example
     * // Get one ClientContact
     * const clientContact = await prisma.clientContact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClientContactFindUniqueOrThrowArgs>(args: SelectSubset<T, ClientContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClientContactClient<$Result.GetResult<Prisma.$ClientContactPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ClientContact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContactFindFirstArgs} args - Arguments to find a ClientContact
     * @example
     * // Get one ClientContact
     * const clientContact = await prisma.clientContact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClientContactFindFirstArgs>(args?: SelectSubset<T, ClientContactFindFirstArgs<ExtArgs>>): Prisma__ClientContactClient<$Result.GetResult<Prisma.$ClientContactPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ClientContact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContactFindFirstOrThrowArgs} args - Arguments to find a ClientContact
     * @example
     * // Get one ClientContact
     * const clientContact = await prisma.clientContact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClientContactFindFirstOrThrowArgs>(args?: SelectSubset<T, ClientContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClientContactClient<$Result.GetResult<Prisma.$ClientContactPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ClientContacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClientContacts
     * const clientContacts = await prisma.clientContact.findMany()
     * 
     * // Get first 10 ClientContacts
     * const clientContacts = await prisma.clientContact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientContactWithIdOnly = await prisma.clientContact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClientContactFindManyArgs>(args?: SelectSubset<T, ClientContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientContactPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ClientContact.
     * @param {ClientContactCreateArgs} args - Arguments to create a ClientContact.
     * @example
     * // Create one ClientContact
     * const ClientContact = await prisma.clientContact.create({
     *   data: {
     *     // ... data to create a ClientContact
     *   }
     * })
     * 
     */
    create<T extends ClientContactCreateArgs>(args: SelectSubset<T, ClientContactCreateArgs<ExtArgs>>): Prisma__ClientContactClient<$Result.GetResult<Prisma.$ClientContactPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ClientContacts.
     * @param {ClientContactCreateManyArgs} args - Arguments to create many ClientContacts.
     * @example
     * // Create many ClientContacts
     * const clientContact = await prisma.clientContact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClientContactCreateManyArgs>(args?: SelectSubset<T, ClientContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClientContacts and returns the data saved in the database.
     * @param {ClientContactCreateManyAndReturnArgs} args - Arguments to create many ClientContacts.
     * @example
     * // Create many ClientContacts
     * const clientContact = await prisma.clientContact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClientContacts and only return the `id`
     * const clientContactWithIdOnly = await prisma.clientContact.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClientContactCreateManyAndReturnArgs>(args?: SelectSubset<T, ClientContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientContactPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ClientContact.
     * @param {ClientContactDeleteArgs} args - Arguments to delete one ClientContact.
     * @example
     * // Delete one ClientContact
     * const ClientContact = await prisma.clientContact.delete({
     *   where: {
     *     // ... filter to delete one ClientContact
     *   }
     * })
     * 
     */
    delete<T extends ClientContactDeleteArgs>(args: SelectSubset<T, ClientContactDeleteArgs<ExtArgs>>): Prisma__ClientContactClient<$Result.GetResult<Prisma.$ClientContactPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ClientContact.
     * @param {ClientContactUpdateArgs} args - Arguments to update one ClientContact.
     * @example
     * // Update one ClientContact
     * const clientContact = await prisma.clientContact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClientContactUpdateArgs>(args: SelectSubset<T, ClientContactUpdateArgs<ExtArgs>>): Prisma__ClientContactClient<$Result.GetResult<Prisma.$ClientContactPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ClientContacts.
     * @param {ClientContactDeleteManyArgs} args - Arguments to filter ClientContacts to delete.
     * @example
     * // Delete a few ClientContacts
     * const { count } = await prisma.clientContact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClientContactDeleteManyArgs>(args?: SelectSubset<T, ClientContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClientContacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClientContacts
     * const clientContact = await prisma.clientContact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClientContactUpdateManyArgs>(args: SelectSubset<T, ClientContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClientContact.
     * @param {ClientContactUpsertArgs} args - Arguments to update or create a ClientContact.
     * @example
     * // Update or create a ClientContact
     * const clientContact = await prisma.clientContact.upsert({
     *   create: {
     *     // ... data to create a ClientContact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClientContact we want to update
     *   }
     * })
     */
    upsert<T extends ClientContactUpsertArgs>(args: SelectSubset<T, ClientContactUpsertArgs<ExtArgs>>): Prisma__ClientContactClient<$Result.GetResult<Prisma.$ClientContactPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ClientContacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContactCountArgs} args - Arguments to filter ClientContacts to count.
     * @example
     * // Count the number of ClientContacts
     * const count = await prisma.clientContact.count({
     *   where: {
     *     // ... the filter for the ClientContacts we want to count
     *   }
     * })
    **/
    count<T extends ClientContactCountArgs>(
      args?: Subset<T, ClientContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClientContact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientContactAggregateArgs>(args: Subset<T, ClientContactAggregateArgs>): Prisma.PrismaPromise<GetClientContactAggregateType<T>>

    /**
     * Group by ClientContact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientContactGroupByArgs['orderBy'] }
        : { orderBy?: ClientContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClientContact model
   */
  readonly fields: ClientContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClientContact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends AccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountDefaultArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClientContact model
   */ 
  interface ClientContactFieldRefs {
    readonly id: FieldRef<"ClientContact", 'String'>
    readonly clientId: FieldRef<"ClientContact", 'String'>
    readonly firstName: FieldRef<"ClientContact", 'String'>
    readonly lastName: FieldRef<"ClientContact", 'String'>
    readonly title: FieldRef<"ClientContact", 'String'>
    readonly email: FieldRef<"ClientContact", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ClientContact findUnique
   */
  export type ClientContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContactInclude<ExtArgs> | null
    /**
     * Filter, which ClientContact to fetch.
     */
    where: ClientContactWhereUniqueInput
  }

  /**
   * ClientContact findUniqueOrThrow
   */
  export type ClientContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContactInclude<ExtArgs> | null
    /**
     * Filter, which ClientContact to fetch.
     */
    where: ClientContactWhereUniqueInput
  }

  /**
   * ClientContact findFirst
   */
  export type ClientContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContactInclude<ExtArgs> | null
    /**
     * Filter, which ClientContact to fetch.
     */
    where?: ClientContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientContacts to fetch.
     */
    orderBy?: ClientContactOrderByWithRelationInput | ClientContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientContacts.
     */
    cursor?: ClientContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientContacts.
     */
    distinct?: ClientContactScalarFieldEnum | ClientContactScalarFieldEnum[]
  }

  /**
   * ClientContact findFirstOrThrow
   */
  export type ClientContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContactInclude<ExtArgs> | null
    /**
     * Filter, which ClientContact to fetch.
     */
    where?: ClientContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientContacts to fetch.
     */
    orderBy?: ClientContactOrderByWithRelationInput | ClientContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientContacts.
     */
    cursor?: ClientContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientContacts.
     */
    distinct?: ClientContactScalarFieldEnum | ClientContactScalarFieldEnum[]
  }

  /**
   * ClientContact findMany
   */
  export type ClientContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContactInclude<ExtArgs> | null
    /**
     * Filter, which ClientContacts to fetch.
     */
    where?: ClientContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientContacts to fetch.
     */
    orderBy?: ClientContactOrderByWithRelationInput | ClientContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClientContacts.
     */
    cursor?: ClientContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientContacts.
     */
    skip?: number
    distinct?: ClientContactScalarFieldEnum | ClientContactScalarFieldEnum[]
  }

  /**
   * ClientContact create
   */
  export type ClientContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContactInclude<ExtArgs> | null
    /**
     * The data needed to create a ClientContact.
     */
    data: XOR<ClientContactCreateInput, ClientContactUncheckedCreateInput>
  }

  /**
   * ClientContact createMany
   */
  export type ClientContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClientContacts.
     */
    data: ClientContactCreateManyInput | ClientContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClientContact createManyAndReturn
   */
  export type ClientContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ClientContacts.
     */
    data: ClientContactCreateManyInput | ClientContactCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContactIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClientContact update
   */
  export type ClientContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContactInclude<ExtArgs> | null
    /**
     * The data needed to update a ClientContact.
     */
    data: XOR<ClientContactUpdateInput, ClientContactUncheckedUpdateInput>
    /**
     * Choose, which ClientContact to update.
     */
    where: ClientContactWhereUniqueInput
  }

  /**
   * ClientContact updateMany
   */
  export type ClientContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClientContacts.
     */
    data: XOR<ClientContactUpdateManyMutationInput, ClientContactUncheckedUpdateManyInput>
    /**
     * Filter which ClientContacts to update
     */
    where?: ClientContactWhereInput
  }

  /**
   * ClientContact upsert
   */
  export type ClientContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContactInclude<ExtArgs> | null
    /**
     * The filter to search for the ClientContact to update in case it exists.
     */
    where: ClientContactWhereUniqueInput
    /**
     * In case the ClientContact found by the `where` argument doesn't exist, create a new ClientContact with this data.
     */
    create: XOR<ClientContactCreateInput, ClientContactUncheckedCreateInput>
    /**
     * In case the ClientContact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientContactUpdateInput, ClientContactUncheckedUpdateInput>
  }

  /**
   * ClientContact delete
   */
  export type ClientContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContactInclude<ExtArgs> | null
    /**
     * Filter which ClientContact to delete.
     */
    where: ClientContactWhereUniqueInput
  }

  /**
   * ClientContact deleteMany
   */
  export type ClientContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClientContacts to delete
     */
    where?: ClientContactWhereInput
  }

  /**
   * ClientContact without action
   */
  export type ClientContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientContactInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountScalarFieldEnum: {
    id: 'id',
    accountName: 'accountName',
    businessUnit: 'businessUnit',
    engagementType: 'engagementType',
    priority: 'priority',
    accountManager: 'accountManager',
    teamManager: 'teamManager',
    relationshipStartDate: 'relationshipStartDate',
    contractStartDate: 'contractStartDate',
    contractRenewalEnd: 'contractRenewalEnd',
    services: 'services',
    pointsPurchased: 'pointsPurchased',
    pointsDelivered: 'pointsDelivered',
    delivery: 'delivery',
    recurringPointsAllotment: 'recurringPointsAllotment',
    mrr: 'mrr',
    growthInMrr: 'growthInMrr',
    potentialMrr: 'potentialMrr',
    website: 'website',
    linkedinProfile: 'linkedinProfile',
    industry: 'industry',
    annualRevenue: 'annualRevenue',
    employees: 'employees'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const GoalScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    description: 'description',
    status: 'status',
    dueDate: 'dueDate',
    progress: 'progress'
  };

  export type GoalScalarFieldEnum = (typeof GoalScalarFieldEnum)[keyof typeof GoalScalarFieldEnum]


  export const NoteScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    description: 'description',
    createdBy: 'createdBy',
    createdAt: 'createdAt'
  };

  export type NoteScalarFieldEnum = (typeof NoteScalarFieldEnum)[keyof typeof NoteScalarFieldEnum]


  export const ClientContactScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    firstName: 'firstName',
    lastName: 'lastName',
    title: 'title',
    email: 'email'
  };

  export type ClientContactScalarFieldEnum = (typeof ClientContactScalarFieldEnum)[keyof typeof ClientContactScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'BusinessUnit'
   */
  export type EnumBusinessUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BusinessUnit'>
    


  /**
   * Reference to a field of type 'BusinessUnit[]'
   */
  export type ListEnumBusinessUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BusinessUnit[]'>
    


  /**
   * Reference to a field of type 'EngagementType'
   */
  export type EnumEngagementTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EngagementType'>
    


  /**
   * Reference to a field of type 'EngagementType[]'
   */
  export type ListEnumEngagementTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EngagementType[]'>
    


  /**
   * Reference to a field of type 'Priority'
   */
  export type EnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority'>
    


  /**
   * Reference to a field of type 'Priority[]'
   */
  export type ListEnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Service[]'
   */
  export type ListEnumServiceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Service[]'>
    


  /**
   * Reference to a field of type 'Service'
   */
  export type EnumServiceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Service'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    accountName?: StringFilter<"Account"> | string
    businessUnit?: EnumBusinessUnitFilter<"Account"> | $Enums.BusinessUnit
    engagementType?: EnumEngagementTypeFilter<"Account"> | $Enums.EngagementType
    priority?: EnumPriorityFilter<"Account"> | $Enums.Priority
    accountManager?: StringFilter<"Account"> | string
    teamManager?: StringFilter<"Account"> | string
    relationshipStartDate?: DateTimeFilter<"Account"> | Date | string
    contractStartDate?: DateTimeFilter<"Account"> | Date | string
    contractRenewalEnd?: DateTimeFilter<"Account"> | Date | string
    services?: EnumServiceNullableListFilter<"Account">
    pointsPurchased?: IntFilter<"Account"> | number
    pointsDelivered?: IntFilter<"Account"> | number
    delivery?: StringFilter<"Account"> | string
    recurringPointsAllotment?: IntFilter<"Account"> | number
    mrr?: IntFilter<"Account"> | number
    growthInMrr?: IntFilter<"Account"> | number
    potentialMrr?: IntFilter<"Account"> | number
    website?: StringNullableFilter<"Account"> | string | null
    linkedinProfile?: StringNullableFilter<"Account"> | string | null
    industry?: StringFilter<"Account"> | string
    annualRevenue?: IntFilter<"Account"> | number
    employees?: IntFilter<"Account"> | number
    goals?: GoalListRelationFilter
    notes?: NoteListRelationFilter
    clientContacts?: ClientContactListRelationFilter
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    accountName?: SortOrder
    businessUnit?: SortOrder
    engagementType?: SortOrder
    priority?: SortOrder
    accountManager?: SortOrder
    teamManager?: SortOrder
    relationshipStartDate?: SortOrder
    contractStartDate?: SortOrder
    contractRenewalEnd?: SortOrder
    services?: SortOrder
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    delivery?: SortOrder
    recurringPointsAllotment?: SortOrder
    mrr?: SortOrder
    growthInMrr?: SortOrder
    potentialMrr?: SortOrder
    website?: SortOrderInput | SortOrder
    linkedinProfile?: SortOrderInput | SortOrder
    industry?: SortOrder
    annualRevenue?: SortOrder
    employees?: SortOrder
    goals?: GoalOrderByRelationAggregateInput
    notes?: NoteOrderByRelationAggregateInput
    clientContacts?: ClientContactOrderByRelationAggregateInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    accountName?: StringFilter<"Account"> | string
    businessUnit?: EnumBusinessUnitFilter<"Account"> | $Enums.BusinessUnit
    engagementType?: EnumEngagementTypeFilter<"Account"> | $Enums.EngagementType
    priority?: EnumPriorityFilter<"Account"> | $Enums.Priority
    accountManager?: StringFilter<"Account"> | string
    teamManager?: StringFilter<"Account"> | string
    relationshipStartDate?: DateTimeFilter<"Account"> | Date | string
    contractStartDate?: DateTimeFilter<"Account"> | Date | string
    contractRenewalEnd?: DateTimeFilter<"Account"> | Date | string
    services?: EnumServiceNullableListFilter<"Account">
    pointsPurchased?: IntFilter<"Account"> | number
    pointsDelivered?: IntFilter<"Account"> | number
    delivery?: StringFilter<"Account"> | string
    recurringPointsAllotment?: IntFilter<"Account"> | number
    mrr?: IntFilter<"Account"> | number
    growthInMrr?: IntFilter<"Account"> | number
    potentialMrr?: IntFilter<"Account"> | number
    website?: StringNullableFilter<"Account"> | string | null
    linkedinProfile?: StringNullableFilter<"Account"> | string | null
    industry?: StringFilter<"Account"> | string
    annualRevenue?: IntFilter<"Account"> | number
    employees?: IntFilter<"Account"> | number
    goals?: GoalListRelationFilter
    notes?: NoteListRelationFilter
    clientContacts?: ClientContactListRelationFilter
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    accountName?: SortOrder
    businessUnit?: SortOrder
    engagementType?: SortOrder
    priority?: SortOrder
    accountManager?: SortOrder
    teamManager?: SortOrder
    relationshipStartDate?: SortOrder
    contractStartDate?: SortOrder
    contractRenewalEnd?: SortOrder
    services?: SortOrder
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    delivery?: SortOrder
    recurringPointsAllotment?: SortOrder
    mrr?: SortOrder
    growthInMrr?: SortOrder
    potentialMrr?: SortOrder
    website?: SortOrderInput | SortOrder
    linkedinProfile?: SortOrderInput | SortOrder
    industry?: SortOrder
    annualRevenue?: SortOrder
    employees?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    accountName?: StringWithAggregatesFilter<"Account"> | string
    businessUnit?: EnumBusinessUnitWithAggregatesFilter<"Account"> | $Enums.BusinessUnit
    engagementType?: EnumEngagementTypeWithAggregatesFilter<"Account"> | $Enums.EngagementType
    priority?: EnumPriorityWithAggregatesFilter<"Account"> | $Enums.Priority
    accountManager?: StringWithAggregatesFilter<"Account"> | string
    teamManager?: StringWithAggregatesFilter<"Account"> | string
    relationshipStartDate?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    contractStartDate?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    contractRenewalEnd?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    services?: EnumServiceNullableListFilter<"Account">
    pointsPurchased?: IntWithAggregatesFilter<"Account"> | number
    pointsDelivered?: IntWithAggregatesFilter<"Account"> | number
    delivery?: StringWithAggregatesFilter<"Account"> | string
    recurringPointsAllotment?: IntWithAggregatesFilter<"Account"> | number
    mrr?: IntWithAggregatesFilter<"Account"> | number
    growthInMrr?: IntWithAggregatesFilter<"Account"> | number
    potentialMrr?: IntWithAggregatesFilter<"Account"> | number
    website?: StringNullableWithAggregatesFilter<"Account"> | string | null
    linkedinProfile?: StringNullableWithAggregatesFilter<"Account"> | string | null
    industry?: StringWithAggregatesFilter<"Account"> | string
    annualRevenue?: IntWithAggregatesFilter<"Account"> | number
    employees?: IntWithAggregatesFilter<"Account"> | number
  }

  export type GoalWhereInput = {
    AND?: GoalWhereInput | GoalWhereInput[]
    OR?: GoalWhereInput[]
    NOT?: GoalWhereInput | GoalWhereInput[]
    id?: StringFilter<"Goal"> | string
    clientId?: StringFilter<"Goal"> | string
    description?: StringFilter<"Goal"> | string
    status?: StringFilter<"Goal"> | string
    dueDate?: DateTimeFilter<"Goal"> | Date | string
    progress?: IntFilter<"Goal"> | number
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }

  export type GoalOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    description?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    progress?: SortOrder
    account?: AccountOrderByWithRelationInput
  }

  export type GoalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GoalWhereInput | GoalWhereInput[]
    OR?: GoalWhereInput[]
    NOT?: GoalWhereInput | GoalWhereInput[]
    clientId?: StringFilter<"Goal"> | string
    description?: StringFilter<"Goal"> | string
    status?: StringFilter<"Goal"> | string
    dueDate?: DateTimeFilter<"Goal"> | Date | string
    progress?: IntFilter<"Goal"> | number
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }, "id">

  export type GoalOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    description?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    progress?: SortOrder
    _count?: GoalCountOrderByAggregateInput
    _avg?: GoalAvgOrderByAggregateInput
    _max?: GoalMaxOrderByAggregateInput
    _min?: GoalMinOrderByAggregateInput
    _sum?: GoalSumOrderByAggregateInput
  }

  export type GoalScalarWhereWithAggregatesInput = {
    AND?: GoalScalarWhereWithAggregatesInput | GoalScalarWhereWithAggregatesInput[]
    OR?: GoalScalarWhereWithAggregatesInput[]
    NOT?: GoalScalarWhereWithAggregatesInput | GoalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Goal"> | string
    clientId?: StringWithAggregatesFilter<"Goal"> | string
    description?: StringWithAggregatesFilter<"Goal"> | string
    status?: StringWithAggregatesFilter<"Goal"> | string
    dueDate?: DateTimeWithAggregatesFilter<"Goal"> | Date | string
    progress?: IntWithAggregatesFilter<"Goal"> | number
  }

  export type NoteWhereInput = {
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    id?: StringFilter<"Note"> | string
    clientId?: StringFilter<"Note"> | string
    description?: StringFilter<"Note"> | string
    createdBy?: StringFilter<"Note"> | string
    createdAt?: DateTimeFilter<"Note"> | Date | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }

  export type NoteOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    account?: AccountOrderByWithRelationInput
  }

  export type NoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    clientId?: StringFilter<"Note"> | string
    description?: StringFilter<"Note"> | string
    createdBy?: StringFilter<"Note"> | string
    createdAt?: DateTimeFilter<"Note"> | Date | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }, "id">

  export type NoteOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    _count?: NoteCountOrderByAggregateInput
    _max?: NoteMaxOrderByAggregateInput
    _min?: NoteMinOrderByAggregateInput
  }

  export type NoteScalarWhereWithAggregatesInput = {
    AND?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    OR?: NoteScalarWhereWithAggregatesInput[]
    NOT?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Note"> | string
    clientId?: StringWithAggregatesFilter<"Note"> | string
    description?: StringWithAggregatesFilter<"Note"> | string
    createdBy?: StringWithAggregatesFilter<"Note"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Note"> | Date | string
  }

  export type ClientContactWhereInput = {
    AND?: ClientContactWhereInput | ClientContactWhereInput[]
    OR?: ClientContactWhereInput[]
    NOT?: ClientContactWhereInput | ClientContactWhereInput[]
    id?: StringFilter<"ClientContact"> | string
    clientId?: StringFilter<"ClientContact"> | string
    firstName?: StringFilter<"ClientContact"> | string
    lastName?: StringFilter<"ClientContact"> | string
    title?: StringFilter<"ClientContact"> | string
    email?: StringFilter<"ClientContact"> | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }

  export type ClientContactOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    title?: SortOrder
    email?: SortOrder
    account?: AccountOrderByWithRelationInput
  }

  export type ClientContactWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClientContactWhereInput | ClientContactWhereInput[]
    OR?: ClientContactWhereInput[]
    NOT?: ClientContactWhereInput | ClientContactWhereInput[]
    clientId?: StringFilter<"ClientContact"> | string
    firstName?: StringFilter<"ClientContact"> | string
    lastName?: StringFilter<"ClientContact"> | string
    title?: StringFilter<"ClientContact"> | string
    email?: StringFilter<"ClientContact"> | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }, "id">

  export type ClientContactOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    title?: SortOrder
    email?: SortOrder
    _count?: ClientContactCountOrderByAggregateInput
    _max?: ClientContactMaxOrderByAggregateInput
    _min?: ClientContactMinOrderByAggregateInput
  }

  export type ClientContactScalarWhereWithAggregatesInput = {
    AND?: ClientContactScalarWhereWithAggregatesInput | ClientContactScalarWhereWithAggregatesInput[]
    OR?: ClientContactScalarWhereWithAggregatesInput[]
    NOT?: ClientContactScalarWhereWithAggregatesInput | ClientContactScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ClientContact"> | string
    clientId?: StringWithAggregatesFilter<"ClientContact"> | string
    firstName?: StringWithAggregatesFilter<"ClientContact"> | string
    lastName?: StringWithAggregatesFilter<"ClientContact"> | string
    title?: StringWithAggregatesFilter<"ClientContact"> | string
    email?: StringWithAggregatesFilter<"ClientContact"> | string
  }

  export type AccountCreateInput = {
    id?: string
    accountName: string
    businessUnit: $Enums.BusinessUnit
    engagementType: $Enums.EngagementType
    priority: $Enums.Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | $Enums.Service[]
    pointsPurchased: number
    pointsDelivered: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    goals?: GoalCreateNestedManyWithoutAccountInput
    notes?: NoteCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    accountName: string
    businessUnit: $Enums.BusinessUnit
    engagementType: $Enums.EngagementType
    priority: $Enums.Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | $Enums.Service[]
    pointsPurchased: number
    pointsDelivered: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    goals?: GoalUncheckedCreateNestedManyWithoutAccountInput
    notes?: NoteUncheckedCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | $Enums.BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | $Enums.EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | $Enums.Service[]
    pointsPurchased?: IntFieldUpdateOperationsInput | number
    pointsDelivered?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: IntFieldUpdateOperationsInput | number
    mrr?: IntFieldUpdateOperationsInput | number
    growthInMrr?: IntFieldUpdateOperationsInput | number
    potentialMrr?: IntFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: IntFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    goals?: GoalUpdateManyWithoutAccountNestedInput
    notes?: NoteUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | $Enums.BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | $Enums.EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | $Enums.Service[]
    pointsPurchased?: IntFieldUpdateOperationsInput | number
    pointsDelivered?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: IntFieldUpdateOperationsInput | number
    mrr?: IntFieldUpdateOperationsInput | number
    growthInMrr?: IntFieldUpdateOperationsInput | number
    potentialMrr?: IntFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: IntFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    goals?: GoalUncheckedUpdateManyWithoutAccountNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountCreateManyInput = {
    id?: string
    accountName: string
    businessUnit: $Enums.BusinessUnit
    engagementType: $Enums.EngagementType
    priority: $Enums.Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | $Enums.Service[]
    pointsPurchased: number
    pointsDelivered: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | $Enums.BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | $Enums.EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | $Enums.Service[]
    pointsPurchased?: IntFieldUpdateOperationsInput | number
    pointsDelivered?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: IntFieldUpdateOperationsInput | number
    mrr?: IntFieldUpdateOperationsInput | number
    growthInMrr?: IntFieldUpdateOperationsInput | number
    potentialMrr?: IntFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: IntFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | $Enums.BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | $Enums.EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | $Enums.Service[]
    pointsPurchased?: IntFieldUpdateOperationsInput | number
    pointsDelivered?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: IntFieldUpdateOperationsInput | number
    mrr?: IntFieldUpdateOperationsInput | number
    growthInMrr?: IntFieldUpdateOperationsInput | number
    potentialMrr?: IntFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: IntFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
  }

  export type GoalCreateInput = {
    id?: string
    description: string
    status: string
    dueDate: Date | string
    progress: number
    account: AccountCreateNestedOneWithoutGoalsInput
  }

  export type GoalUncheckedCreateInput = {
    id?: string
    clientId: string
    description: string
    status: string
    dueDate: Date | string
    progress: number
  }

  export type GoalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    account?: AccountUpdateOneRequiredWithoutGoalsNestedInput
  }

  export type GoalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
  }

  export type GoalCreateManyInput = {
    id?: string
    clientId: string
    description: string
    status: string
    dueDate: Date | string
    progress: number
  }

  export type GoalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
  }

  export type GoalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
  }

  export type NoteCreateInput = {
    id?: string
    description: string
    createdBy: string
    createdAt: Date | string
    account: AccountCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateInput = {
    id?: string
    clientId: string
    description: string
    createdBy: string
    createdAt: Date | string
  }

  export type NoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneRequiredWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteCreateManyInput = {
    id?: string
    clientId: string
    description: string
    createdBy: string
    createdAt: Date | string
  }

  export type NoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientContactCreateInput = {
    id?: string
    firstName: string
    lastName: string
    title: string
    email: string
    account: AccountCreateNestedOneWithoutClientContactsInput
  }

  export type ClientContactUncheckedCreateInput = {
    id?: string
    clientId: string
    firstName: string
    lastName: string
    title: string
    email: string
  }

  export type ClientContactUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    account?: AccountUpdateOneRequiredWithoutClientContactsNestedInput
  }

  export type ClientContactUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ClientContactCreateManyInput = {
    id?: string
    clientId: string
    firstName: string
    lastName: string
    title: string
    email: string
  }

  export type ClientContactUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ClientContactUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumBusinessUnitFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessUnit | EnumBusinessUnitFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessUnit[] | ListEnumBusinessUnitFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessUnit[] | ListEnumBusinessUnitFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessUnitFilter<$PrismaModel> | $Enums.BusinessUnit
  }

  export type EnumEngagementTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EngagementType | EnumEngagementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EngagementType[] | ListEnumEngagementTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EngagementType[] | ListEnumEngagementTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEngagementTypeFilter<$PrismaModel> | $Enums.EngagementType
  }

  export type EnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumServiceNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.Service[] | ListEnumServiceFieldRefInput<$PrismaModel> | null
    has?: $Enums.Service | EnumServiceFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.Service[] | ListEnumServiceFieldRefInput<$PrismaModel>
    hasSome?: $Enums.Service[] | ListEnumServiceFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type GoalListRelationFilter = {
    every?: GoalWhereInput
    some?: GoalWhereInput
    none?: GoalWhereInput
  }

  export type NoteListRelationFilter = {
    every?: NoteWhereInput
    some?: NoteWhereInput
    none?: NoteWhereInput
  }

  export type ClientContactListRelationFilter = {
    every?: ClientContactWhereInput
    some?: ClientContactWhereInput
    none?: ClientContactWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GoalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    accountName?: SortOrder
    businessUnit?: SortOrder
    engagementType?: SortOrder
    priority?: SortOrder
    accountManager?: SortOrder
    teamManager?: SortOrder
    relationshipStartDate?: SortOrder
    contractStartDate?: SortOrder
    contractRenewalEnd?: SortOrder
    services?: SortOrder
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    delivery?: SortOrder
    recurringPointsAllotment?: SortOrder
    mrr?: SortOrder
    growthInMrr?: SortOrder
    potentialMrr?: SortOrder
    website?: SortOrder
    linkedinProfile?: SortOrder
    industry?: SortOrder
    annualRevenue?: SortOrder
    employees?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    recurringPointsAllotment?: SortOrder
    mrr?: SortOrder
    growthInMrr?: SortOrder
    potentialMrr?: SortOrder
    annualRevenue?: SortOrder
    employees?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    accountName?: SortOrder
    businessUnit?: SortOrder
    engagementType?: SortOrder
    priority?: SortOrder
    accountManager?: SortOrder
    teamManager?: SortOrder
    relationshipStartDate?: SortOrder
    contractStartDate?: SortOrder
    contractRenewalEnd?: SortOrder
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    delivery?: SortOrder
    recurringPointsAllotment?: SortOrder
    mrr?: SortOrder
    growthInMrr?: SortOrder
    potentialMrr?: SortOrder
    website?: SortOrder
    linkedinProfile?: SortOrder
    industry?: SortOrder
    annualRevenue?: SortOrder
    employees?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    accountName?: SortOrder
    businessUnit?: SortOrder
    engagementType?: SortOrder
    priority?: SortOrder
    accountManager?: SortOrder
    teamManager?: SortOrder
    relationshipStartDate?: SortOrder
    contractStartDate?: SortOrder
    contractRenewalEnd?: SortOrder
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    delivery?: SortOrder
    recurringPointsAllotment?: SortOrder
    mrr?: SortOrder
    growthInMrr?: SortOrder
    potentialMrr?: SortOrder
    website?: SortOrder
    linkedinProfile?: SortOrder
    industry?: SortOrder
    annualRevenue?: SortOrder
    employees?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    recurringPointsAllotment?: SortOrder
    mrr?: SortOrder
    growthInMrr?: SortOrder
    potentialMrr?: SortOrder
    annualRevenue?: SortOrder
    employees?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumBusinessUnitWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessUnit | EnumBusinessUnitFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessUnit[] | ListEnumBusinessUnitFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessUnit[] | ListEnumBusinessUnitFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessUnitWithAggregatesFilter<$PrismaModel> | $Enums.BusinessUnit
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBusinessUnitFilter<$PrismaModel>
    _max?: NestedEnumBusinessUnitFilter<$PrismaModel>
  }

  export type EnumEngagementTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EngagementType | EnumEngagementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EngagementType[] | ListEnumEngagementTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EngagementType[] | ListEnumEngagementTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEngagementTypeWithAggregatesFilter<$PrismaModel> | $Enums.EngagementType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEngagementTypeFilter<$PrismaModel>
    _max?: NestedEnumEngagementTypeFilter<$PrismaModel>
  }

  export type EnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type AccountRelationFilter = {
    is?: AccountWhereInput
    isNot?: AccountWhereInput
  }

  export type GoalCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    description?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    progress?: SortOrder
  }

  export type GoalAvgOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type GoalMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    description?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    progress?: SortOrder
  }

  export type GoalMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    description?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    progress?: SortOrder
  }

  export type GoalSumOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type NoteCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
  }

  export type NoteMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
  }

  export type NoteMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
  }

  export type ClientContactCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    title?: SortOrder
    email?: SortOrder
  }

  export type ClientContactMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    title?: SortOrder
    email?: SortOrder
  }

  export type ClientContactMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    title?: SortOrder
    email?: SortOrder
  }

  export type AccountCreateservicesInput = {
    set: $Enums.Service[]
  }

  export type GoalCreateNestedManyWithoutAccountInput = {
    create?: XOR<GoalCreateWithoutAccountInput, GoalUncheckedCreateWithoutAccountInput> | GoalCreateWithoutAccountInput[] | GoalUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutAccountInput | GoalCreateOrConnectWithoutAccountInput[]
    createMany?: GoalCreateManyAccountInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type NoteCreateNestedManyWithoutAccountInput = {
    create?: XOR<NoteCreateWithoutAccountInput, NoteUncheckedCreateWithoutAccountInput> | NoteCreateWithoutAccountInput[] | NoteUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutAccountInput | NoteCreateOrConnectWithoutAccountInput[]
    createMany?: NoteCreateManyAccountInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type ClientContactCreateNestedManyWithoutAccountInput = {
    create?: XOR<ClientContactCreateWithoutAccountInput, ClientContactUncheckedCreateWithoutAccountInput> | ClientContactCreateWithoutAccountInput[] | ClientContactUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: ClientContactCreateOrConnectWithoutAccountInput | ClientContactCreateOrConnectWithoutAccountInput[]
    createMany?: ClientContactCreateManyAccountInputEnvelope
    connect?: ClientContactWhereUniqueInput | ClientContactWhereUniqueInput[]
  }

  export type GoalUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<GoalCreateWithoutAccountInput, GoalUncheckedCreateWithoutAccountInput> | GoalCreateWithoutAccountInput[] | GoalUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutAccountInput | GoalCreateOrConnectWithoutAccountInput[]
    createMany?: GoalCreateManyAccountInputEnvelope
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<NoteCreateWithoutAccountInput, NoteUncheckedCreateWithoutAccountInput> | NoteCreateWithoutAccountInput[] | NoteUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutAccountInput | NoteCreateOrConnectWithoutAccountInput[]
    createMany?: NoteCreateManyAccountInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type ClientContactUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<ClientContactCreateWithoutAccountInput, ClientContactUncheckedCreateWithoutAccountInput> | ClientContactCreateWithoutAccountInput[] | ClientContactUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: ClientContactCreateOrConnectWithoutAccountInput | ClientContactCreateOrConnectWithoutAccountInput[]
    createMany?: ClientContactCreateManyAccountInputEnvelope
    connect?: ClientContactWhereUniqueInput | ClientContactWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumBusinessUnitFieldUpdateOperationsInput = {
    set?: $Enums.BusinessUnit
  }

  export type EnumEngagementTypeFieldUpdateOperationsInput = {
    set?: $Enums.EngagementType
  }

  export type EnumPriorityFieldUpdateOperationsInput = {
    set?: $Enums.Priority
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AccountUpdateservicesInput = {
    set?: $Enums.Service[]
    push?: $Enums.Service | $Enums.Service[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type GoalUpdateManyWithoutAccountNestedInput = {
    create?: XOR<GoalCreateWithoutAccountInput, GoalUncheckedCreateWithoutAccountInput> | GoalCreateWithoutAccountInput[] | GoalUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutAccountInput | GoalCreateOrConnectWithoutAccountInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutAccountInput | GoalUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: GoalCreateManyAccountInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutAccountInput | GoalUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutAccountInput | GoalUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type NoteUpdateManyWithoutAccountNestedInput = {
    create?: XOR<NoteCreateWithoutAccountInput, NoteUncheckedCreateWithoutAccountInput> | NoteCreateWithoutAccountInput[] | NoteUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutAccountInput | NoteCreateOrConnectWithoutAccountInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutAccountInput | NoteUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: NoteCreateManyAccountInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutAccountInput | NoteUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutAccountInput | NoteUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type ClientContactUpdateManyWithoutAccountNestedInput = {
    create?: XOR<ClientContactCreateWithoutAccountInput, ClientContactUncheckedCreateWithoutAccountInput> | ClientContactCreateWithoutAccountInput[] | ClientContactUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: ClientContactCreateOrConnectWithoutAccountInput | ClientContactCreateOrConnectWithoutAccountInput[]
    upsert?: ClientContactUpsertWithWhereUniqueWithoutAccountInput | ClientContactUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: ClientContactCreateManyAccountInputEnvelope
    set?: ClientContactWhereUniqueInput | ClientContactWhereUniqueInput[]
    disconnect?: ClientContactWhereUniqueInput | ClientContactWhereUniqueInput[]
    delete?: ClientContactWhereUniqueInput | ClientContactWhereUniqueInput[]
    connect?: ClientContactWhereUniqueInput | ClientContactWhereUniqueInput[]
    update?: ClientContactUpdateWithWhereUniqueWithoutAccountInput | ClientContactUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: ClientContactUpdateManyWithWhereWithoutAccountInput | ClientContactUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: ClientContactScalarWhereInput | ClientContactScalarWhereInput[]
  }

  export type GoalUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<GoalCreateWithoutAccountInput, GoalUncheckedCreateWithoutAccountInput> | GoalCreateWithoutAccountInput[] | GoalUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: GoalCreateOrConnectWithoutAccountInput | GoalCreateOrConnectWithoutAccountInput[]
    upsert?: GoalUpsertWithWhereUniqueWithoutAccountInput | GoalUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: GoalCreateManyAccountInputEnvelope
    set?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    disconnect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    delete?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    connect?: GoalWhereUniqueInput | GoalWhereUniqueInput[]
    update?: GoalUpdateWithWhereUniqueWithoutAccountInput | GoalUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: GoalUpdateManyWithWhereWithoutAccountInput | GoalUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: GoalScalarWhereInput | GoalScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<NoteCreateWithoutAccountInput, NoteUncheckedCreateWithoutAccountInput> | NoteCreateWithoutAccountInput[] | NoteUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutAccountInput | NoteCreateOrConnectWithoutAccountInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutAccountInput | NoteUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: NoteCreateManyAccountInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutAccountInput | NoteUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutAccountInput | NoteUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type ClientContactUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<ClientContactCreateWithoutAccountInput, ClientContactUncheckedCreateWithoutAccountInput> | ClientContactCreateWithoutAccountInput[] | ClientContactUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: ClientContactCreateOrConnectWithoutAccountInput | ClientContactCreateOrConnectWithoutAccountInput[]
    upsert?: ClientContactUpsertWithWhereUniqueWithoutAccountInput | ClientContactUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: ClientContactCreateManyAccountInputEnvelope
    set?: ClientContactWhereUniqueInput | ClientContactWhereUniqueInput[]
    disconnect?: ClientContactWhereUniqueInput | ClientContactWhereUniqueInput[]
    delete?: ClientContactWhereUniqueInput | ClientContactWhereUniqueInput[]
    connect?: ClientContactWhereUniqueInput | ClientContactWhereUniqueInput[]
    update?: ClientContactUpdateWithWhereUniqueWithoutAccountInput | ClientContactUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: ClientContactUpdateManyWithWhereWithoutAccountInput | ClientContactUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: ClientContactScalarWhereInput | ClientContactScalarWhereInput[]
  }

  export type AccountCreateNestedOneWithoutGoalsInput = {
    create?: XOR<AccountCreateWithoutGoalsInput, AccountUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutGoalsInput
    connect?: AccountWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutGoalsNestedInput = {
    create?: XOR<AccountCreateWithoutGoalsInput, AccountUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutGoalsInput
    upsert?: AccountUpsertWithoutGoalsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutGoalsInput, AccountUpdateWithoutGoalsInput>, AccountUncheckedUpdateWithoutGoalsInput>
  }

  export type AccountCreateNestedOneWithoutNotesInput = {
    create?: XOR<AccountCreateWithoutNotesInput, AccountUncheckedCreateWithoutNotesInput>
    connectOrCreate?: AccountCreateOrConnectWithoutNotesInput
    connect?: AccountWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<AccountCreateWithoutNotesInput, AccountUncheckedCreateWithoutNotesInput>
    connectOrCreate?: AccountCreateOrConnectWithoutNotesInput
    upsert?: AccountUpsertWithoutNotesInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutNotesInput, AccountUpdateWithoutNotesInput>, AccountUncheckedUpdateWithoutNotesInput>
  }

  export type AccountCreateNestedOneWithoutClientContactsInput = {
    create?: XOR<AccountCreateWithoutClientContactsInput, AccountUncheckedCreateWithoutClientContactsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutClientContactsInput
    connect?: AccountWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutClientContactsNestedInput = {
    create?: XOR<AccountCreateWithoutClientContactsInput, AccountUncheckedCreateWithoutClientContactsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutClientContactsInput
    upsert?: AccountUpsertWithoutClientContactsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutClientContactsInput, AccountUpdateWithoutClientContactsInput>, AccountUncheckedUpdateWithoutClientContactsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumBusinessUnitFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessUnit | EnumBusinessUnitFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessUnit[] | ListEnumBusinessUnitFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessUnit[] | ListEnumBusinessUnitFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessUnitFilter<$PrismaModel> | $Enums.BusinessUnit
  }

  export type NestedEnumEngagementTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EngagementType | EnumEngagementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EngagementType[] | ListEnumEngagementTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EngagementType[] | ListEnumEngagementTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEngagementTypeFilter<$PrismaModel> | $Enums.EngagementType
  }

  export type NestedEnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumBusinessUnitWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessUnit | EnumBusinessUnitFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessUnit[] | ListEnumBusinessUnitFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessUnit[] | ListEnumBusinessUnitFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessUnitWithAggregatesFilter<$PrismaModel> | $Enums.BusinessUnit
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBusinessUnitFilter<$PrismaModel>
    _max?: NestedEnumBusinessUnitFilter<$PrismaModel>
  }

  export type NestedEnumEngagementTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EngagementType | EnumEngagementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EngagementType[] | ListEnumEngagementTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EngagementType[] | ListEnumEngagementTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEngagementTypeWithAggregatesFilter<$PrismaModel> | $Enums.EngagementType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEngagementTypeFilter<$PrismaModel>
    _max?: NestedEnumEngagementTypeFilter<$PrismaModel>
  }

  export type NestedEnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type GoalCreateWithoutAccountInput = {
    id?: string
    description: string
    status: string
    dueDate: Date | string
    progress: number
  }

  export type GoalUncheckedCreateWithoutAccountInput = {
    id?: string
    description: string
    status: string
    dueDate: Date | string
    progress: number
  }

  export type GoalCreateOrConnectWithoutAccountInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutAccountInput, GoalUncheckedCreateWithoutAccountInput>
  }

  export type GoalCreateManyAccountInputEnvelope = {
    data: GoalCreateManyAccountInput | GoalCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutAccountInput = {
    id?: string
    description: string
    createdBy: string
    createdAt: Date | string
  }

  export type NoteUncheckedCreateWithoutAccountInput = {
    id?: string
    description: string
    createdBy: string
    createdAt: Date | string
  }

  export type NoteCreateOrConnectWithoutAccountInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutAccountInput, NoteUncheckedCreateWithoutAccountInput>
  }

  export type NoteCreateManyAccountInputEnvelope = {
    data: NoteCreateManyAccountInput | NoteCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type ClientContactCreateWithoutAccountInput = {
    id?: string
    firstName: string
    lastName: string
    title: string
    email: string
  }

  export type ClientContactUncheckedCreateWithoutAccountInput = {
    id?: string
    firstName: string
    lastName: string
    title: string
    email: string
  }

  export type ClientContactCreateOrConnectWithoutAccountInput = {
    where: ClientContactWhereUniqueInput
    create: XOR<ClientContactCreateWithoutAccountInput, ClientContactUncheckedCreateWithoutAccountInput>
  }

  export type ClientContactCreateManyAccountInputEnvelope = {
    data: ClientContactCreateManyAccountInput | ClientContactCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type GoalUpsertWithWhereUniqueWithoutAccountInput = {
    where: GoalWhereUniqueInput
    update: XOR<GoalUpdateWithoutAccountInput, GoalUncheckedUpdateWithoutAccountInput>
    create: XOR<GoalCreateWithoutAccountInput, GoalUncheckedCreateWithoutAccountInput>
  }

  export type GoalUpdateWithWhereUniqueWithoutAccountInput = {
    where: GoalWhereUniqueInput
    data: XOR<GoalUpdateWithoutAccountInput, GoalUncheckedUpdateWithoutAccountInput>
  }

  export type GoalUpdateManyWithWhereWithoutAccountInput = {
    where: GoalScalarWhereInput
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyWithoutAccountInput>
  }

  export type GoalScalarWhereInput = {
    AND?: GoalScalarWhereInput | GoalScalarWhereInput[]
    OR?: GoalScalarWhereInput[]
    NOT?: GoalScalarWhereInput | GoalScalarWhereInput[]
    id?: StringFilter<"Goal"> | string
    clientId?: StringFilter<"Goal"> | string
    description?: StringFilter<"Goal"> | string
    status?: StringFilter<"Goal"> | string
    dueDate?: DateTimeFilter<"Goal"> | Date | string
    progress?: IntFilter<"Goal"> | number
  }

  export type NoteUpsertWithWhereUniqueWithoutAccountInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutAccountInput, NoteUncheckedUpdateWithoutAccountInput>
    create: XOR<NoteCreateWithoutAccountInput, NoteUncheckedCreateWithoutAccountInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutAccountInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutAccountInput, NoteUncheckedUpdateWithoutAccountInput>
  }

  export type NoteUpdateManyWithWhereWithoutAccountInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutAccountInput>
  }

  export type NoteScalarWhereInput = {
    AND?: NoteScalarWhereInput | NoteScalarWhereInput[]
    OR?: NoteScalarWhereInput[]
    NOT?: NoteScalarWhereInput | NoteScalarWhereInput[]
    id?: StringFilter<"Note"> | string
    clientId?: StringFilter<"Note"> | string
    description?: StringFilter<"Note"> | string
    createdBy?: StringFilter<"Note"> | string
    createdAt?: DateTimeFilter<"Note"> | Date | string
  }

  export type ClientContactUpsertWithWhereUniqueWithoutAccountInput = {
    where: ClientContactWhereUniqueInput
    update: XOR<ClientContactUpdateWithoutAccountInput, ClientContactUncheckedUpdateWithoutAccountInput>
    create: XOR<ClientContactCreateWithoutAccountInput, ClientContactUncheckedCreateWithoutAccountInput>
  }

  export type ClientContactUpdateWithWhereUniqueWithoutAccountInput = {
    where: ClientContactWhereUniqueInput
    data: XOR<ClientContactUpdateWithoutAccountInput, ClientContactUncheckedUpdateWithoutAccountInput>
  }

  export type ClientContactUpdateManyWithWhereWithoutAccountInput = {
    where: ClientContactScalarWhereInput
    data: XOR<ClientContactUpdateManyMutationInput, ClientContactUncheckedUpdateManyWithoutAccountInput>
  }

  export type ClientContactScalarWhereInput = {
    AND?: ClientContactScalarWhereInput | ClientContactScalarWhereInput[]
    OR?: ClientContactScalarWhereInput[]
    NOT?: ClientContactScalarWhereInput | ClientContactScalarWhereInput[]
    id?: StringFilter<"ClientContact"> | string
    clientId?: StringFilter<"ClientContact"> | string
    firstName?: StringFilter<"ClientContact"> | string
    lastName?: StringFilter<"ClientContact"> | string
    title?: StringFilter<"ClientContact"> | string
    email?: StringFilter<"ClientContact"> | string
  }

  export type AccountCreateWithoutGoalsInput = {
    id?: string
    accountName: string
    businessUnit: $Enums.BusinessUnit
    engagementType: $Enums.EngagementType
    priority: $Enums.Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | $Enums.Service[]
    pointsPurchased: number
    pointsDelivered: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    notes?: NoteCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutGoalsInput = {
    id?: string
    accountName: string
    businessUnit: $Enums.BusinessUnit
    engagementType: $Enums.EngagementType
    priority: $Enums.Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | $Enums.Service[]
    pointsPurchased: number
    pointsDelivered: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    notes?: NoteUncheckedCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutGoalsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutGoalsInput, AccountUncheckedCreateWithoutGoalsInput>
  }

  export type AccountUpsertWithoutGoalsInput = {
    update: XOR<AccountUpdateWithoutGoalsInput, AccountUncheckedUpdateWithoutGoalsInput>
    create: XOR<AccountCreateWithoutGoalsInput, AccountUncheckedCreateWithoutGoalsInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutGoalsInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutGoalsInput, AccountUncheckedUpdateWithoutGoalsInput>
  }

  export type AccountUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | $Enums.BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | $Enums.EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | $Enums.Service[]
    pointsPurchased?: IntFieldUpdateOperationsInput | number
    pointsDelivered?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: IntFieldUpdateOperationsInput | number
    mrr?: IntFieldUpdateOperationsInput | number
    growthInMrr?: IntFieldUpdateOperationsInput | number
    potentialMrr?: IntFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: IntFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    notes?: NoteUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | $Enums.BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | $Enums.EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | $Enums.Service[]
    pointsPurchased?: IntFieldUpdateOperationsInput | number
    pointsDelivered?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: IntFieldUpdateOperationsInput | number
    mrr?: IntFieldUpdateOperationsInput | number
    growthInMrr?: IntFieldUpdateOperationsInput | number
    potentialMrr?: IntFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: IntFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    notes?: NoteUncheckedUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountCreateWithoutNotesInput = {
    id?: string
    accountName: string
    businessUnit: $Enums.BusinessUnit
    engagementType: $Enums.EngagementType
    priority: $Enums.Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | $Enums.Service[]
    pointsPurchased: number
    pointsDelivered: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    goals?: GoalCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutNotesInput = {
    id?: string
    accountName: string
    businessUnit: $Enums.BusinessUnit
    engagementType: $Enums.EngagementType
    priority: $Enums.Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | $Enums.Service[]
    pointsPurchased: number
    pointsDelivered: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    goals?: GoalUncheckedCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutNotesInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutNotesInput, AccountUncheckedCreateWithoutNotesInput>
  }

  export type AccountUpsertWithoutNotesInput = {
    update: XOR<AccountUpdateWithoutNotesInput, AccountUncheckedUpdateWithoutNotesInput>
    create: XOR<AccountCreateWithoutNotesInput, AccountUncheckedCreateWithoutNotesInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutNotesInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutNotesInput, AccountUncheckedUpdateWithoutNotesInput>
  }

  export type AccountUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | $Enums.BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | $Enums.EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | $Enums.Service[]
    pointsPurchased?: IntFieldUpdateOperationsInput | number
    pointsDelivered?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: IntFieldUpdateOperationsInput | number
    mrr?: IntFieldUpdateOperationsInput | number
    growthInMrr?: IntFieldUpdateOperationsInput | number
    potentialMrr?: IntFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: IntFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    goals?: GoalUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | $Enums.BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | $Enums.EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | $Enums.Service[]
    pointsPurchased?: IntFieldUpdateOperationsInput | number
    pointsDelivered?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: IntFieldUpdateOperationsInput | number
    mrr?: IntFieldUpdateOperationsInput | number
    growthInMrr?: IntFieldUpdateOperationsInput | number
    potentialMrr?: IntFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: IntFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    goals?: GoalUncheckedUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountCreateWithoutClientContactsInput = {
    id?: string
    accountName: string
    businessUnit: $Enums.BusinessUnit
    engagementType: $Enums.EngagementType
    priority: $Enums.Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | $Enums.Service[]
    pointsPurchased: number
    pointsDelivered: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    goals?: GoalCreateNestedManyWithoutAccountInput
    notes?: NoteCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutClientContactsInput = {
    id?: string
    accountName: string
    businessUnit: $Enums.BusinessUnit
    engagementType: $Enums.EngagementType
    priority: $Enums.Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | $Enums.Service[]
    pointsPurchased: number
    pointsDelivered: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    goals?: GoalUncheckedCreateNestedManyWithoutAccountInput
    notes?: NoteUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutClientContactsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutClientContactsInput, AccountUncheckedCreateWithoutClientContactsInput>
  }

  export type AccountUpsertWithoutClientContactsInput = {
    update: XOR<AccountUpdateWithoutClientContactsInput, AccountUncheckedUpdateWithoutClientContactsInput>
    create: XOR<AccountCreateWithoutClientContactsInput, AccountUncheckedCreateWithoutClientContactsInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutClientContactsInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutClientContactsInput, AccountUncheckedUpdateWithoutClientContactsInput>
  }

  export type AccountUpdateWithoutClientContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | $Enums.BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | $Enums.EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | $Enums.Service[]
    pointsPurchased?: IntFieldUpdateOperationsInput | number
    pointsDelivered?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: IntFieldUpdateOperationsInput | number
    mrr?: IntFieldUpdateOperationsInput | number
    growthInMrr?: IntFieldUpdateOperationsInput | number
    potentialMrr?: IntFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: IntFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    goals?: GoalUpdateManyWithoutAccountNestedInput
    notes?: NoteUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutClientContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | $Enums.BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | $Enums.EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | $Enums.Service[]
    pointsPurchased?: IntFieldUpdateOperationsInput | number
    pointsDelivered?: IntFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: IntFieldUpdateOperationsInput | number
    mrr?: IntFieldUpdateOperationsInput | number
    growthInMrr?: IntFieldUpdateOperationsInput | number
    potentialMrr?: IntFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: IntFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    goals?: GoalUncheckedUpdateManyWithoutAccountNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type GoalCreateManyAccountInput = {
    id?: string
    description: string
    status: string
    dueDate: Date | string
    progress: number
  }

  export type NoteCreateManyAccountInput = {
    id?: string
    description: string
    createdBy: string
    createdAt: Date | string
  }

  export type ClientContactCreateManyAccountInput = {
    id?: string
    firstName: string
    lastName: string
    title: string
    email: string
  }

  export type GoalUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
  }

  export type GoalUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
  }

  export type GoalUncheckedUpdateManyWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
  }

  export type NoteUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteUncheckedUpdateManyWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientContactUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ClientContactUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ClientContactUncheckedUpdateManyWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AccountCountOutputTypeDefaultArgs instead
     */
    export type AccountCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GoalDefaultArgs instead
     */
    export type GoalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GoalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NoteDefaultArgs instead
     */
    export type NoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NoteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClientContactDefaultArgs instead
     */
    export type ClientContactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClientContactDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}