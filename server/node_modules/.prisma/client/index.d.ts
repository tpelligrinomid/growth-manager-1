
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type AccountPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Account"
  objects: {
    tasks: TaskPayload<ExtArgs>[]
    goals: GoalPayload<ExtArgs>[]
    notes: NotePayload<ExtArgs>[]
    clientContacts: ClientContactPayload<ExtArgs>[]
    points: PointsPayload<ExtArgs> | null
    growthTasks: GrowthTaskPayload<ExtArgs>[]
    clientListData: ClientListDataPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date
    contractStartDate: Date
    contractRenewalEnd: Date
    services: Service[]
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website: string | null
    linkedinProfile: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId: string | null
    clientListTaskId: string | null
  }, ExtArgs["result"]["account"]>
  composites: {}
}

/**
 * Model Account
 * 
 */
export type Account = runtime.Types.DefaultSelection<AccountPayload>
export type TaskPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Task"
  objects: {
    account: AccountPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    description: string | null
    status: string
    assignee: string | null
    createdAt: Date
    dueDate: Date | null
    completedAt: Date | null
    accountId: string
    lastSyncedAt: Date
  }, ExtArgs["result"]["task"]>
  composites: {}
}

/**
 * Model Task
 * 
 */
export type Task = runtime.Types.DefaultSelection<TaskPayload>
export type GoalPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Goal"
  objects: {
    account: AccountPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    description: string
    status: string
    dueDate: Date
    progress: number
    accountId: string
  }, ExtArgs["result"]["goal"]>
  composites: {}
}

/**
 * Model Goal
 * 
 */
export type Goal = runtime.Types.DefaultSelection<GoalPayload>
export type NotePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Note"
  objects: {
    account: AccountPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    description: string
    createdBy: string
    createdAt: Date
    accountId: string
  }, ExtArgs["result"]["note"]>
  composites: {}
}

/**
 * Model Note
 * 
 */
export type Note = runtime.Types.DefaultSelection<NotePayload>
export type ClientContactPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ClientContact"
  objects: {
    account: AccountPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    firstName: string
    lastName: string
    title: string
    email: string
    accountId: string
  }, ExtArgs["result"]["clientContact"]>
  composites: {}
}

/**
 * Model ClientContact
 * 
 */
export type ClientContact = runtime.Types.DefaultSelection<ClientContactPayload>
export type UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "User"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    email: string
    name: string | null
    googleId: string
    role: Role
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model User
 * 
 */
export type User = runtime.Types.DefaultSelection<UserPayload>
export type PointsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Points"
  objects: {
    account: AccountPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    accountId: string
    pointsPurchased: number
    pointsDelivered: number
    lastSyncedAt: Date
  }, ExtArgs["result"]["points"]>
  composites: {}
}

/**
 * Model Points
 * 
 */
export type Points = runtime.Types.DefaultSelection<PointsPayload>
export type GrowthTaskPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "GrowthTask"
  objects: {
    account: AccountPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    accountId: string
    taskId: string
    description: string
    status: string
    assignee: string | null
    isGrowthTask: boolean
    createdDate: Date
    dueDate: Date | null
    dateDone: Date | null
    createdBy: string
    lastSyncedAt: Date
  }, ExtArgs["result"]["growthTask"]>
  composites: {}
}

/**
 * Model GrowthTask
 * 
 */
export type GrowthTask = runtime.Types.DefaultSelection<GrowthTaskPayload>
export type ClientListDataPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ClientListData"
  objects: {
    account: AccountPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    accountId: string
    assignee: string | null
    teamLead: string | null
    status: string | null
    mrr: number | null
    contractStartDate: Date | null
    contractRenewalEnd: Date | null
    nextStrategyApproval: Date | null
    recurringPointsAllotment: number | null
    businessUnit: string | null
    lastSyncedAt: Date
  }, ExtArgs["result"]["clientListData"]>
  composites: {}
}

/**
 * Model ClientListData
 * 
 */
export type ClientListData = runtime.Types.DefaultSelection<ClientListDataPayload>

/**
 * Enums
 */

export const BusinessUnit: {
  NEW_NORTH: 'NEW_NORTH',
  IDEOMETRY: 'IDEOMETRY',
  MOTION: 'MOTION',
  SPOKE: 'SPOKE'
};

export type BusinessUnit = (typeof BusinessUnit)[keyof typeof BusinessUnit]


export const EngagementType: {
  STRATEGIC: 'STRATEGIC',
  TACTICAL: 'TACTICAL'
};

export type EngagementType = (typeof EngagementType)[keyof typeof EngagementType]


export const Priority: {
  TIER_1: 'TIER_1',
  TIER_2: 'TIER_2',
  TIER_3: 'TIER_3',
  TIER_4: 'TIER_4'
};

export type Priority = (typeof Priority)[keyof typeof Priority]


export const Service: {
  SOCIAL: 'SOCIAL',
  WEBSITE: 'WEBSITE',
  SEO: 'SEO',
  PPC: 'PPC',
  EMAIL: 'EMAIL',
  CONTENT: 'CONTENT'
};

export type Service = (typeof Service)[keyof typeof Service]


export const Role: {
  GROWTH_MANAGER: 'GROWTH_MANAGER',
  ADMINISTRATOR: 'ADMINISTRATOR',
  GROWTH_ADVISOR: 'GROWTH_ADVISOR'
};

export type Role = (typeof Role)[keyof typeof Role]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.goal`: Exposes CRUD operations for the **Goal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Goals
    * const goals = await prisma.goal.findMany()
    * ```
    */
  get goal(): Prisma.GoalDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.note`: Exposes CRUD operations for the **Note** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notes
    * const notes = await prisma.note.findMany()
    * ```
    */
  get note(): Prisma.NoteDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.clientContact`: Exposes CRUD operations for the **ClientContact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClientContacts
    * const clientContacts = await prisma.clientContact.findMany()
    * ```
    */
  get clientContact(): Prisma.ClientContactDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.points`: Exposes CRUD operations for the **Points** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Points
    * const points = await prisma.points.findMany()
    * ```
    */
  get points(): Prisma.PointsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.growthTask`: Exposes CRUD operations for the **GrowthTask** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GrowthTasks
    * const growthTasks = await prisma.growthTask.findMany()
    * ```
    */
  get growthTask(): Prisma.GrowthTaskDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.clientListData`: Exposes CRUD operations for the **ClientListData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClientListData
    * const clientListData = await prisma.clientListData.findMany()
    * ```
    */
  get clientListData(): Prisma.ClientListDataDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Account: 'Account',
    Task: 'Task',
    Goal: 'Goal',
    Note: 'Note',
    ClientContact: 'ClientContact',
    User: 'User',
    Points: 'Points',
    GrowthTask: 'GrowthTask',
    ClientListData: 'ClientListData'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'account' | 'task' | 'goal' | 'note' | 'clientContact' | 'user' | 'points' | 'growthTask' | 'clientListData'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Account: {
        payload: AccountPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: TaskPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>,
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      Goal: {
        payload: GoalPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.GoalFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GoalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GoalFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GoalPayload>
          }
          findFirst: {
            args: Prisma.GoalFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GoalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GoalFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GoalPayload>
          }
          findMany: {
            args: Prisma.GoalFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GoalPayload>[]
          }
          create: {
            args: Prisma.GoalCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GoalPayload>
          }
          createMany: {
            args: Prisma.GoalCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GoalDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GoalPayload>
          }
          update: {
            args: Prisma.GoalUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GoalPayload>
          }
          deleteMany: {
            args: Prisma.GoalDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GoalUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GoalUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GoalPayload>
          }
          aggregate: {
            args: Prisma.GoalAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGoal>
          }
          groupBy: {
            args: Prisma.GoalGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GoalGroupByOutputType>[]
          }
          count: {
            args: Prisma.GoalCountArgs<ExtArgs>,
            result: $Utils.Optional<GoalCountAggregateOutputType> | number
          }
        }
      }
      Note: {
        payload: NotePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.NoteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotePayload>
          }
          findFirst: {
            args: Prisma.NoteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotePayload>
          }
          findMany: {
            args: Prisma.NoteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotePayload>[]
          }
          create: {
            args: Prisma.NoteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotePayload>
          }
          createMany: {
            args: Prisma.NoteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NoteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotePayload>
          }
          update: {
            args: Prisma.NoteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotePayload>
          }
          deleteMany: {
            args: Prisma.NoteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NoteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NoteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<NotePayload>
          }
          aggregate: {
            args: Prisma.NoteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNote>
          }
          groupBy: {
            args: Prisma.NoteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoteCountArgs<ExtArgs>,
            result: $Utils.Optional<NoteCountAggregateOutputType> | number
          }
        }
      }
      ClientContact: {
        payload: ClientContactPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ClientContactFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientContactFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientContactPayload>
          }
          findFirst: {
            args: Prisma.ClientContactFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientContactFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientContactPayload>
          }
          findMany: {
            args: Prisma.ClientContactFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientContactPayload>[]
          }
          create: {
            args: Prisma.ClientContactCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientContactPayload>
          }
          createMany: {
            args: Prisma.ClientContactCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ClientContactDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientContactPayload>
          }
          update: {
            args: Prisma.ClientContactUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientContactPayload>
          }
          deleteMany: {
            args: Prisma.ClientContactDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClientContactUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClientContactUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientContactPayload>
          }
          aggregate: {
            args: Prisma.ClientContactAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateClientContact>
          }
          groupBy: {
            args: Prisma.ClientContactGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClientContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientContactCountArgs<ExtArgs>,
            result: $Utils.Optional<ClientContactCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: UserPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Points: {
        payload: PointsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.PointsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PointsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PointsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PointsPayload>
          }
          findFirst: {
            args: Prisma.PointsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PointsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PointsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PointsPayload>
          }
          findMany: {
            args: Prisma.PointsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PointsPayload>[]
          }
          create: {
            args: Prisma.PointsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PointsPayload>
          }
          createMany: {
            args: Prisma.PointsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PointsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PointsPayload>
          }
          update: {
            args: Prisma.PointsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PointsPayload>
          }
          deleteMany: {
            args: Prisma.PointsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PointsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PointsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PointsPayload>
          }
          aggregate: {
            args: Prisma.PointsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePoints>
          }
          groupBy: {
            args: Prisma.PointsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PointsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PointsCountArgs<ExtArgs>,
            result: $Utils.Optional<PointsCountAggregateOutputType> | number
          }
        }
      }
      GrowthTask: {
        payload: GrowthTaskPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.GrowthTaskFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GrowthTaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GrowthTaskFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GrowthTaskPayload>
          }
          findFirst: {
            args: Prisma.GrowthTaskFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GrowthTaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GrowthTaskFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GrowthTaskPayload>
          }
          findMany: {
            args: Prisma.GrowthTaskFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GrowthTaskPayload>[]
          }
          create: {
            args: Prisma.GrowthTaskCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GrowthTaskPayload>
          }
          createMany: {
            args: Prisma.GrowthTaskCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GrowthTaskDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GrowthTaskPayload>
          }
          update: {
            args: Prisma.GrowthTaskUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GrowthTaskPayload>
          }
          deleteMany: {
            args: Prisma.GrowthTaskDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GrowthTaskUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GrowthTaskUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GrowthTaskPayload>
          }
          aggregate: {
            args: Prisma.GrowthTaskAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGrowthTask>
          }
          groupBy: {
            args: Prisma.GrowthTaskGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GrowthTaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.GrowthTaskCountArgs<ExtArgs>,
            result: $Utils.Optional<GrowthTaskCountAggregateOutputType> | number
          }
        }
      }
      ClientListData: {
        payload: ClientListDataPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ClientListDataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientListDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientListDataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientListDataPayload>
          }
          findFirst: {
            args: Prisma.ClientListDataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientListDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientListDataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientListDataPayload>
          }
          findMany: {
            args: Prisma.ClientListDataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientListDataPayload>[]
          }
          create: {
            args: Prisma.ClientListDataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientListDataPayload>
          }
          createMany: {
            args: Prisma.ClientListDataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ClientListDataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientListDataPayload>
          }
          update: {
            args: Prisma.ClientListDataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientListDataPayload>
          }
          deleteMany: {
            args: Prisma.ClientListDataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClientListDataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClientListDataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ClientListDataPayload>
          }
          aggregate: {
            args: Prisma.ClientListDataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateClientListData>
          }
          groupBy: {
            args: Prisma.ClientListDataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClientListDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientListDataCountArgs<ExtArgs>,
            result: $Utils.Optional<ClientListDataCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AccountCountOutputType
   */


  export type AccountCountOutputType = {
    tasks: number
    goals: number
    notes: number
    clientContacts: number
    growthTasks: number
  }

  export type AccountCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    tasks?: boolean | AccountCountOutputTypeCountTasksArgs
    goals?: boolean | AccountCountOutputTypeCountGoalsArgs
    notes?: boolean | AccountCountOutputTypeCountNotesArgs
    clientContacts?: boolean | AccountCountOutputTypeCountClientContactsArgs
    growthTasks?: boolean | AccountCountOutputTypeCountGrowthTasksArgs
  }

  // Custom InputTypes

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountCountOutputType
     */
    select?: AccountCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }


  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountGoalsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
  }


  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }


  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountClientContactsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClientContactWhereInput
  }


  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountGrowthTasksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GrowthTaskWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Account
   */


  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    pointsPurchased: number | null
    pointsDelivered: number | null
    pointsStrikingDistance: number | null
    recurringPointsAllotment: number | null
    mrr: number | null
    growthInMrr: number | null
    potentialMrr: number | null
    annualRevenue: number | null
    employees: number | null
  }

  export type AccountSumAggregateOutputType = {
    pointsPurchased: number | null
    pointsDelivered: number | null
    pointsStrikingDistance: number | null
    recurringPointsAllotment: number | null
    mrr: number | null
    growthInMrr: number | null
    potentialMrr: number | null
    annualRevenue: number | null
    employees: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    accountName: string | null
    businessUnit: BusinessUnit | null
    engagementType: EngagementType | null
    priority: Priority | null
    accountManager: string | null
    teamManager: string | null
    relationshipStartDate: Date | null
    contractStartDate: Date | null
    contractRenewalEnd: Date | null
    pointsPurchased: number | null
    pointsDelivered: number | null
    pointsStrikingDistance: number | null
    delivery: string | null
    recurringPointsAllotment: number | null
    mrr: number | null
    growthInMrr: number | null
    potentialMrr: number | null
    website: string | null
    linkedinProfile: string | null
    industry: string | null
    annualRevenue: number | null
    employees: number | null
    clientFolderId: string | null
    clientListTaskId: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    accountName: string | null
    businessUnit: BusinessUnit | null
    engagementType: EngagementType | null
    priority: Priority | null
    accountManager: string | null
    teamManager: string | null
    relationshipStartDate: Date | null
    contractStartDate: Date | null
    contractRenewalEnd: Date | null
    pointsPurchased: number | null
    pointsDelivered: number | null
    pointsStrikingDistance: number | null
    delivery: string | null
    recurringPointsAllotment: number | null
    mrr: number | null
    growthInMrr: number | null
    potentialMrr: number | null
    website: string | null
    linkedinProfile: string | null
    industry: string | null
    annualRevenue: number | null
    employees: number | null
    clientFolderId: string | null
    clientListTaskId: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    accountName: number
    businessUnit: number
    engagementType: number
    priority: number
    accountManager: number
    teamManager: number
    relationshipStartDate: number
    contractStartDate: number
    contractRenewalEnd: number
    services: number
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: number
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website: number
    linkedinProfile: number
    industry: number
    annualRevenue: number
    employees: number
    clientFolderId: number
    clientListTaskId: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    pointsPurchased?: true
    pointsDelivered?: true
    pointsStrikingDistance?: true
    recurringPointsAllotment?: true
    mrr?: true
    growthInMrr?: true
    potentialMrr?: true
    annualRevenue?: true
    employees?: true
  }

  export type AccountSumAggregateInputType = {
    pointsPurchased?: true
    pointsDelivered?: true
    pointsStrikingDistance?: true
    recurringPointsAllotment?: true
    mrr?: true
    growthInMrr?: true
    potentialMrr?: true
    annualRevenue?: true
    employees?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    accountName?: true
    businessUnit?: true
    engagementType?: true
    priority?: true
    accountManager?: true
    teamManager?: true
    relationshipStartDate?: true
    contractStartDate?: true
    contractRenewalEnd?: true
    pointsPurchased?: true
    pointsDelivered?: true
    pointsStrikingDistance?: true
    delivery?: true
    recurringPointsAllotment?: true
    mrr?: true
    growthInMrr?: true
    potentialMrr?: true
    website?: true
    linkedinProfile?: true
    industry?: true
    annualRevenue?: true
    employees?: true
    clientFolderId?: true
    clientListTaskId?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    accountName?: true
    businessUnit?: true
    engagementType?: true
    priority?: true
    accountManager?: true
    teamManager?: true
    relationshipStartDate?: true
    contractStartDate?: true
    contractRenewalEnd?: true
    pointsPurchased?: true
    pointsDelivered?: true
    pointsStrikingDistance?: true
    delivery?: true
    recurringPointsAllotment?: true
    mrr?: true
    growthInMrr?: true
    potentialMrr?: true
    website?: true
    linkedinProfile?: true
    industry?: true
    annualRevenue?: true
    employees?: true
    clientFolderId?: true
    clientListTaskId?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    accountName?: true
    businessUnit?: true
    engagementType?: true
    priority?: true
    accountManager?: true
    teamManager?: true
    relationshipStartDate?: true
    contractStartDate?: true
    contractRenewalEnd?: true
    services?: true
    pointsPurchased?: true
    pointsDelivered?: true
    pointsStrikingDistance?: true
    delivery?: true
    recurringPointsAllotment?: true
    mrr?: true
    growthInMrr?: true
    potentialMrr?: true
    website?: true
    linkedinProfile?: true
    industry?: true
    annualRevenue?: true
    employees?: true
    clientFolderId?: true
    clientListTaskId?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: Enumerable<AccountOrderByWithAggregationInput>
    by: AccountScalarFieldEnum[]
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }


  export type AccountGroupByOutputType = {
    id: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date
    contractStartDate: Date
    contractRenewalEnd: Date
    services: Service[]
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website: string | null
    linkedinProfile: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId: string | null
    clientListTaskId: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountName?: boolean
    businessUnit?: boolean
    engagementType?: boolean
    priority?: boolean
    accountManager?: boolean
    teamManager?: boolean
    relationshipStartDate?: boolean
    contractStartDate?: boolean
    contractRenewalEnd?: boolean
    services?: boolean
    pointsPurchased?: boolean
    pointsDelivered?: boolean
    pointsStrikingDistance?: boolean
    delivery?: boolean
    recurringPointsAllotment?: boolean
    mrr?: boolean
    growthInMrr?: boolean
    potentialMrr?: boolean
    website?: boolean
    linkedinProfile?: boolean
    industry?: boolean
    annualRevenue?: boolean
    employees?: boolean
    clientFolderId?: boolean
    clientListTaskId?: boolean
    tasks?: boolean | Account$tasksArgs<ExtArgs>
    goals?: boolean | Account$goalsArgs<ExtArgs>
    notes?: boolean | Account$notesArgs<ExtArgs>
    clientContacts?: boolean | Account$clientContactsArgs<ExtArgs>
    points?: boolean | PointsArgs<ExtArgs>
    growthTasks?: boolean | Account$growthTasksArgs<ExtArgs>
    clientListData?: boolean | ClientListDataArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    accountName?: boolean
    businessUnit?: boolean
    engagementType?: boolean
    priority?: boolean
    accountManager?: boolean
    teamManager?: boolean
    relationshipStartDate?: boolean
    contractStartDate?: boolean
    contractRenewalEnd?: boolean
    services?: boolean
    pointsPurchased?: boolean
    pointsDelivered?: boolean
    pointsStrikingDistance?: boolean
    delivery?: boolean
    recurringPointsAllotment?: boolean
    mrr?: boolean
    growthInMrr?: boolean
    potentialMrr?: boolean
    website?: boolean
    linkedinProfile?: boolean
    industry?: boolean
    annualRevenue?: boolean
    employees?: boolean
    clientFolderId?: boolean
    clientListTaskId?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    tasks?: boolean | Account$tasksArgs<ExtArgs>
    goals?: boolean | Account$goalsArgs<ExtArgs>
    notes?: boolean | Account$notesArgs<ExtArgs>
    clientContacts?: boolean | Account$clientContactsArgs<ExtArgs>
    points?: boolean | PointsArgs<ExtArgs>
    growthTasks?: boolean | Account$growthTasksArgs<ExtArgs>
    clientListData?: boolean | ClientListDataArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeArgs<ExtArgs>
  }


  type AccountGetPayload<S extends boolean | null | undefined | AccountArgs> = $Types.GetResult<AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Account'> extends True ? Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Account'> extends True ? Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountCreateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tasks<T extends Account$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Account$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findMany', never>| Null>;

    goals<T extends Account$goalsArgs<ExtArgs> = {}>(args?: Subset<T, Account$goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<GoalPayload<ExtArgs>, T, 'findMany', never>| Null>;

    notes<T extends Account$notesArgs<ExtArgs> = {}>(args?: Subset<T, Account$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<NotePayload<ExtArgs>, T, 'findMany', never>| Null>;

    clientContacts<T extends Account$clientContactsArgs<ExtArgs> = {}>(args?: Subset<T, Account$clientContactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ClientContactPayload<ExtArgs>, T, 'findMany', never>| Null>;

    points<T extends PointsArgs<ExtArgs> = {}>(args?: Subset<T, PointsArgs<ExtArgs>>): Prisma__PointsClient<$Types.GetResult<PointsPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    growthTasks<T extends Account$growthTasksArgs<ExtArgs> = {}>(args?: Subset<T, Account$growthTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<GrowthTaskPayload<ExtArgs>, T, 'findMany', never>| Null>;

    clientListData<T extends ClientListDataArgs<ExtArgs> = {}>(args?: Subset<T, ClientListDataArgs<ExtArgs>>): Prisma__ClientListDataClient<$Types.GetResult<ClientListDataPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Account base type for findUnique actions
   */
  export type AccountFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUnique
   */
  export interface AccountFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AccountFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account base type for findFirst actions
   */
  export type AccountFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: Enumerable<AccountScalarFieldEnum>
  }

  /**
   * Account findFirst
   */
  export interface AccountFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AccountFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: Enumerable<AccountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }


  /**
   * Account.tasks
   */
  export type Account$tasksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: Enumerable<TaskOrderByWithRelationInput>
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TaskScalarFieldEnum>
  }


  /**
   * Account.goals
   */
  export type Account$goalsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoalInclude<ExtArgs> | null
    where?: GoalWhereInput
    orderBy?: Enumerable<GoalOrderByWithRelationInput>
    cursor?: GoalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GoalScalarFieldEnum>
  }


  /**
   * Account.notes
   */
  export type Account$notesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: Enumerable<NoteOrderByWithRelationInput>
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NoteScalarFieldEnum>
  }


  /**
   * Account.clientContacts
   */
  export type Account$clientContactsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientContactInclude<ExtArgs> | null
    where?: ClientContactWhereInput
    orderBy?: Enumerable<ClientContactOrderByWithRelationInput>
    cursor?: ClientContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ClientContactScalarFieldEnum>
  }


  /**
   * Account.growthTasks
   */
  export type Account$growthTasksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthTask
     */
    select?: GrowthTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrowthTaskInclude<ExtArgs> | null
    where?: GrowthTaskWhereInput
    orderBy?: Enumerable<GrowthTaskOrderByWithRelationInput>
    cursor?: GrowthTaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GrowthTaskScalarFieldEnum>
  }


  /**
   * Account without action
   */
  export type AccountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
  }



  /**
   * Model Task
   */


  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    status: string | null
    assignee: string | null
    createdAt: Date | null
    dueDate: Date | null
    completedAt: Date | null
    accountId: string | null
    lastSyncedAt: Date | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    status: string | null
    assignee: string | null
    createdAt: Date | null
    dueDate: Date | null
    completedAt: Date | null
    accountId: string | null
    lastSyncedAt: Date | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    name: number
    description: number
    status: number
    assignee: number
    createdAt: number
    dueDate: number
    completedAt: number
    accountId: number
    lastSyncedAt: number
    _all: number
  }


  export type TaskMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    assignee?: true
    createdAt?: true
    dueDate?: true
    completedAt?: true
    accountId?: true
    lastSyncedAt?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    assignee?: true
    createdAt?: true
    dueDate?: true
    completedAt?: true
    accountId?: true
    lastSyncedAt?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    assignee?: true
    createdAt?: true
    dueDate?: true
    completedAt?: true
    accountId?: true
    lastSyncedAt?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: Enumerable<TaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: Enumerable<TaskOrderByWithAggregationInput>
    by: TaskScalarFieldEnum[]
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }


  export type TaskGroupByOutputType = {
    id: string
    name: string
    description: string | null
    status: string
    assignee: string | null
    createdAt: Date
    dueDate: Date | null
    completedAt: Date | null
    accountId: string
    lastSyncedAt: Date
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    assignee?: boolean
    createdAt?: boolean
    dueDate?: boolean
    completedAt?: boolean
    accountId?: boolean
    lastSyncedAt?: boolean
    account?: boolean | AccountArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    assignee?: boolean
    createdAt?: boolean
    dueDate?: boolean
    completedAt?: boolean
    accountId?: boolean
    lastSyncedAt?: boolean
  }

  export type TaskInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    account?: boolean | AccountArgs<ExtArgs>
  }


  type TaskGetPayload<S extends boolean | null | undefined | TaskArgs> = $Types.GetResult<TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TaskFindManyArgs, 'select' | 'include'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TaskFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Task'> extends True ? Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Task that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TaskFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Task'> extends True ? Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Task that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TaskFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<TaskPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
    **/
    create<T extends TaskCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TaskCreateArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Tasks.
     *     @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     *     @example
     *     // Create many Tasks
     *     const task = await prisma.task.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TaskCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
    **/
    delete<T extends TaskDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TaskUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TaskDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TaskUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
    **/
    upsert<T extends TaskUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>
    ): Prisma__TaskClient<$Types.GetResult<TaskPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    account<T extends AccountArgs<ExtArgs> = {}>(args?: Subset<T, AccountArgs<ExtArgs>>): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Task base type for findUnique actions
   */
  export type TaskFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUnique
   */
  export interface TaskFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TaskFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }


  /**
   * Task base type for findFirst actions
   */
  export type TaskFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: Enumerable<TaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: Enumerable<TaskScalarFieldEnum>
  }

  /**
   * Task findFirst
   */
  export interface TaskFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TaskFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: Enumerable<TaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: Enumerable<TaskScalarFieldEnum>
  }


  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: Enumerable<TaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: Enumerable<TaskScalarFieldEnum>
  }


  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }


  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: Enumerable<TaskCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }


  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
  }


  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }


  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }


  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
  }


  /**
   * Task without action
   */
  export type TaskArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaskInclude<ExtArgs> | null
  }



  /**
   * Model Goal
   */


  export type AggregateGoal = {
    _count: GoalCountAggregateOutputType | null
    _avg: GoalAvgAggregateOutputType | null
    _sum: GoalSumAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  export type GoalAvgAggregateOutputType = {
    progress: number | null
  }

  export type GoalSumAggregateOutputType = {
    progress: number | null
  }

  export type GoalMinAggregateOutputType = {
    id: string | null
    description: string | null
    status: string | null
    dueDate: Date | null
    progress: number | null
    accountId: string | null
  }

  export type GoalMaxAggregateOutputType = {
    id: string | null
    description: string | null
    status: string | null
    dueDate: Date | null
    progress: number | null
    accountId: string | null
  }

  export type GoalCountAggregateOutputType = {
    id: number
    description: number
    status: number
    dueDate: number
    progress: number
    accountId: number
    _all: number
  }


  export type GoalAvgAggregateInputType = {
    progress?: true
  }

  export type GoalSumAggregateInputType = {
    progress?: true
  }

  export type GoalMinAggregateInputType = {
    id?: true
    description?: true
    status?: true
    dueDate?: true
    progress?: true
    accountId?: true
  }

  export type GoalMaxAggregateInputType = {
    id?: true
    description?: true
    status?: true
    dueDate?: true
    progress?: true
    accountId?: true
  }

  export type GoalCountAggregateInputType = {
    id?: true
    description?: true
    status?: true
    dueDate?: true
    progress?: true
    accountId?: true
    _all?: true
  }

  export type GoalAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goal to aggregate.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: Enumerable<GoalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Goals
    **/
    _count?: true | GoalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GoalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GoalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalMaxAggregateInputType
  }

  export type GetGoalAggregateType<T extends GoalAggregateArgs> = {
        [P in keyof T & keyof AggregateGoal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoal[P]>
      : GetScalarType<T[P], AggregateGoal[P]>
  }




  export type GoalGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GoalWhereInput
    orderBy?: Enumerable<GoalOrderByWithAggregationInput>
    by: GoalScalarFieldEnum[]
    having?: GoalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalCountAggregateInputType | true
    _avg?: GoalAvgAggregateInputType
    _sum?: GoalSumAggregateInputType
    _min?: GoalMinAggregateInputType
    _max?: GoalMaxAggregateInputType
  }


  export type GoalGroupByOutputType = {
    id: string
    description: string
    status: string
    dueDate: Date
    progress: number
    accountId: string
    _count: GoalCountAggregateOutputType | null
    _avg: GoalAvgAggregateOutputType | null
    _sum: GoalSumAggregateOutputType | null
    _min: GoalMinAggregateOutputType | null
    _max: GoalMaxAggregateOutputType | null
  }

  type GetGoalGroupByPayload<T extends GoalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GoalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalGroupByOutputType[P]>
            : GetScalarType<T[P], GoalGroupByOutputType[P]>
        }
      >
    >


  export type GoalSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    status?: boolean
    dueDate?: boolean
    progress?: boolean
    accountId?: boolean
    account?: boolean | AccountArgs<ExtArgs>
  }, ExtArgs["result"]["goal"]>

  export type GoalSelectScalar = {
    id?: boolean
    description?: boolean
    status?: boolean
    dueDate?: boolean
    progress?: boolean
    accountId?: boolean
  }

  export type GoalInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    account?: boolean | AccountArgs<ExtArgs>
  }


  type GoalGetPayload<S extends boolean | null | undefined | GoalArgs> = $Types.GetResult<GoalPayload, S>

  type GoalCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<GoalFindManyArgs, 'select' | 'include'> & {
      select?: GoalCountAggregateInputType | true
    }

  export interface GoalDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Goal'], meta: { name: 'Goal' } }
    /**
     * Find zero or one Goal that matches the filter.
     * @param {GoalFindUniqueArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GoalFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GoalFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Goal'> extends True ? Prisma__GoalClient<$Types.GetResult<GoalPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__GoalClient<$Types.GetResult<GoalPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Goal that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GoalFindUniqueOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GoalFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GoalFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GoalClient<$Types.GetResult<GoalPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Goal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GoalFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GoalFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Goal'> extends True ? Prisma__GoalClient<$Types.GetResult<GoalPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__GoalClient<$Types.GetResult<GoalPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Goal that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindFirstOrThrowArgs} args - Arguments to find a Goal
     * @example
     * // Get one Goal
     * const goal = await prisma.goal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GoalFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GoalFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GoalClient<$Types.GetResult<GoalPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Goals
     * const goals = await prisma.goal.findMany()
     * 
     * // Get first 10 Goals
     * const goals = await prisma.goal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalWithIdOnly = await prisma.goal.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GoalFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GoalFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<GoalPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Goal.
     * @param {GoalCreateArgs} args - Arguments to create a Goal.
     * @example
     * // Create one Goal
     * const Goal = await prisma.goal.create({
     *   data: {
     *     // ... data to create a Goal
     *   }
     * })
     * 
    **/
    create<T extends GoalCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GoalCreateArgs<ExtArgs>>
    ): Prisma__GoalClient<$Types.GetResult<GoalPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Goals.
     *     @param {GoalCreateManyArgs} args - Arguments to create many Goals.
     *     @example
     *     // Create many Goals
     *     const goal = await prisma.goal.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GoalCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GoalCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Goal.
     * @param {GoalDeleteArgs} args - Arguments to delete one Goal.
     * @example
     * // Delete one Goal
     * const Goal = await prisma.goal.delete({
     *   where: {
     *     // ... filter to delete one Goal
     *   }
     * })
     * 
    **/
    delete<T extends GoalDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GoalDeleteArgs<ExtArgs>>
    ): Prisma__GoalClient<$Types.GetResult<GoalPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Goal.
     * @param {GoalUpdateArgs} args - Arguments to update one Goal.
     * @example
     * // Update one Goal
     * const goal = await prisma.goal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GoalUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GoalUpdateArgs<ExtArgs>>
    ): Prisma__GoalClient<$Types.GetResult<GoalPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Goals.
     * @param {GoalDeleteManyArgs} args - Arguments to filter Goals to delete.
     * @example
     * // Delete a few Goals
     * const { count } = await prisma.goal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GoalDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GoalDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Goals
     * const goal = await prisma.goal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GoalUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GoalUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Goal.
     * @param {GoalUpsertArgs} args - Arguments to update or create a Goal.
     * @example
     * // Update or create a Goal
     * const goal = await prisma.goal.upsert({
     *   create: {
     *     // ... data to create a Goal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Goal we want to update
     *   }
     * })
    **/
    upsert<T extends GoalUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GoalUpsertArgs<ExtArgs>>
    ): Prisma__GoalClient<$Types.GetResult<GoalPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalCountArgs} args - Arguments to filter Goals to count.
     * @example
     * // Count the number of Goals
     * const count = await prisma.goal.count({
     *   where: {
     *     // ... the filter for the Goals we want to count
     *   }
     * })
    **/
    count<T extends GoalCountArgs>(
      args?: Subset<T, GoalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalAggregateArgs>(args: Subset<T, GoalAggregateArgs>): Prisma.PrismaPromise<GetGoalAggregateType<T>>

    /**
     * Group by Goal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GoalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GoalGroupByArgs['orderBy'] }
        : { orderBy?: GoalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GoalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Goal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GoalClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    account<T extends AccountArgs<ExtArgs> = {}>(args?: Subset<T, AccountArgs<ExtArgs>>): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Goal base type for findUnique actions
   */
  export type GoalFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where: GoalWhereUniqueInput
  }

  /**
   * Goal findUnique
   */
  export interface GoalFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends GoalFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Goal findUniqueOrThrow
   */
  export type GoalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where: GoalWhereUniqueInput
  }


  /**
   * Goal base type for findFirst actions
   */
  export type GoalFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: Enumerable<GoalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     */
    distinct?: Enumerable<GoalScalarFieldEnum>
  }

  /**
   * Goal findFirst
   */
  export interface GoalFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends GoalFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Goal findFirstOrThrow
   */
  export type GoalFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goal to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: Enumerable<GoalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Goals.
     */
    distinct?: Enumerable<GoalScalarFieldEnum>
  }


  /**
   * Goal findMany
   */
  export type GoalFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter, which Goals to fetch.
     */
    where?: GoalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Goals to fetch.
     */
    orderBy?: Enumerable<GoalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Goals.
     */
    cursor?: GoalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Goals.
     */
    skip?: number
    distinct?: Enumerable<GoalScalarFieldEnum>
  }


  /**
   * Goal create
   */
  export type GoalCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The data needed to create a Goal.
     */
    data: XOR<GoalCreateInput, GoalUncheckedCreateInput>
  }


  /**
   * Goal createMany
   */
  export type GoalCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Goals.
     */
    data: Enumerable<GoalCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Goal update
   */
  export type GoalUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The data needed to update a Goal.
     */
    data: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
    /**
     * Choose, which Goal to update.
     */
    where: GoalWhereUniqueInput
  }


  /**
   * Goal updateMany
   */
  export type GoalUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Goals.
     */
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyInput>
    /**
     * Filter which Goals to update
     */
    where?: GoalWhereInput
  }


  /**
   * Goal upsert
   */
  export type GoalUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * The filter to search for the Goal to update in case it exists.
     */
    where: GoalWhereUniqueInput
    /**
     * In case the Goal found by the `where` argument doesn't exist, create a new Goal with this data.
     */
    create: XOR<GoalCreateInput, GoalUncheckedCreateInput>
    /**
     * In case the Goal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GoalUpdateInput, GoalUncheckedUpdateInput>
  }


  /**
   * Goal delete
   */
  export type GoalDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoalInclude<ExtArgs> | null
    /**
     * Filter which Goal to delete.
     */
    where: GoalWhereUniqueInput
  }


  /**
   * Goal deleteMany
   */
  export type GoalDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Goals to delete
     */
    where?: GoalWhereInput
  }


  /**
   * Goal without action
   */
  export type GoalArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Goal
     */
    select?: GoalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GoalInclude<ExtArgs> | null
  }



  /**
   * Model Note
   */


  export type AggregateNote = {
    _count: NoteCountAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  export type NoteMinAggregateOutputType = {
    id: string | null
    description: string | null
    createdBy: string | null
    createdAt: Date | null
    accountId: string | null
  }

  export type NoteMaxAggregateOutputType = {
    id: string | null
    description: string | null
    createdBy: string | null
    createdAt: Date | null
    accountId: string | null
  }

  export type NoteCountAggregateOutputType = {
    id: number
    description: number
    createdBy: number
    createdAt: number
    accountId: number
    _all: number
  }


  export type NoteMinAggregateInputType = {
    id?: true
    description?: true
    createdBy?: true
    createdAt?: true
    accountId?: true
  }

  export type NoteMaxAggregateInputType = {
    id?: true
    description?: true
    createdBy?: true
    createdAt?: true
    accountId?: true
  }

  export type NoteCountAggregateInputType = {
    id?: true
    description?: true
    createdBy?: true
    createdAt?: true
    accountId?: true
    _all?: true
  }

  export type NoteAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Note to aggregate.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: Enumerable<NoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notes
    **/
    _count?: true | NoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoteMaxAggregateInputType
  }

  export type GetNoteAggregateType<T extends NoteAggregateArgs> = {
        [P in keyof T & keyof AggregateNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNote[P]>
      : GetScalarType<T[P], AggregateNote[P]>
  }




  export type NoteGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
    orderBy?: Enumerable<NoteOrderByWithAggregationInput>
    by: NoteScalarFieldEnum[]
    having?: NoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoteCountAggregateInputType | true
    _min?: NoteMinAggregateInputType
    _max?: NoteMaxAggregateInputType
  }


  export type NoteGroupByOutputType = {
    id: string
    description: string
    createdBy: string
    createdAt: Date
    accountId: string
    _count: NoteCountAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  type GetNoteGroupByPayload<T extends NoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<NoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoteGroupByOutputType[P]>
            : GetScalarType<T[P], NoteGroupByOutputType[P]>
        }
      >
    >


  export type NoteSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    createdBy?: boolean
    createdAt?: boolean
    accountId?: boolean
    account?: boolean | AccountArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectScalar = {
    id?: boolean
    description?: boolean
    createdBy?: boolean
    createdAt?: boolean
    accountId?: boolean
  }

  export type NoteInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    account?: boolean | AccountArgs<ExtArgs>
  }


  type NoteGetPayload<S extends boolean | null | undefined | NoteArgs> = $Types.GetResult<NotePayload, S>

  type NoteCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<NoteFindManyArgs, 'select' | 'include'> & {
      select?: NoteCountAggregateInputType | true
    }

  export interface NoteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Note'], meta: { name: 'Note' } }
    /**
     * Find zero or one Note that matches the filter.
     * @param {NoteFindUniqueArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NoteFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NoteFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Note'> extends True ? Prisma__NoteClient<$Types.GetResult<NotePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__NoteClient<$Types.GetResult<NotePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Note that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NoteFindUniqueOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NoteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NoteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NoteClient<$Types.GetResult<NotePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Note that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NoteFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NoteFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Note'> extends True ? Prisma__NoteClient<$Types.GetResult<NotePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__NoteClient<$Types.GetResult<NotePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Note that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NoteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NoteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NoteClient<$Types.GetResult<NotePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Notes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notes
     * const notes = await prisma.note.findMany()
     * 
     * // Get first 10 Notes
     * const notes = await prisma.note.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noteWithIdOnly = await prisma.note.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NoteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NoteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<NotePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Note.
     * @param {NoteCreateArgs} args - Arguments to create a Note.
     * @example
     * // Create one Note
     * const Note = await prisma.note.create({
     *   data: {
     *     // ... data to create a Note
     *   }
     * })
     * 
    **/
    create<T extends NoteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NoteCreateArgs<ExtArgs>>
    ): Prisma__NoteClient<$Types.GetResult<NotePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Notes.
     *     @param {NoteCreateManyArgs} args - Arguments to create many Notes.
     *     @example
     *     // Create many Notes
     *     const note = await prisma.note.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NoteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NoteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Note.
     * @param {NoteDeleteArgs} args - Arguments to delete one Note.
     * @example
     * // Delete one Note
     * const Note = await prisma.note.delete({
     *   where: {
     *     // ... filter to delete one Note
     *   }
     * })
     * 
    **/
    delete<T extends NoteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NoteDeleteArgs<ExtArgs>>
    ): Prisma__NoteClient<$Types.GetResult<NotePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Note.
     * @param {NoteUpdateArgs} args - Arguments to update one Note.
     * @example
     * // Update one Note
     * const note = await prisma.note.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NoteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NoteUpdateArgs<ExtArgs>>
    ): Prisma__NoteClient<$Types.GetResult<NotePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Notes.
     * @param {NoteDeleteManyArgs} args - Arguments to filter Notes to delete.
     * @example
     * // Delete a few Notes
     * const { count } = await prisma.note.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NoteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NoteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NoteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NoteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Note.
     * @param {NoteUpsertArgs} args - Arguments to update or create a Note.
     * @example
     * // Update or create a Note
     * const note = await prisma.note.upsert({
     *   create: {
     *     // ... data to create a Note
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Note we want to update
     *   }
     * })
    **/
    upsert<T extends NoteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NoteUpsertArgs<ExtArgs>>
    ): Prisma__NoteClient<$Types.GetResult<NotePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteCountArgs} args - Arguments to filter Notes to count.
     * @example
     * // Count the number of Notes
     * const count = await prisma.note.count({
     *   where: {
     *     // ... the filter for the Notes we want to count
     *   }
     * })
    **/
    count<T extends NoteCountArgs>(
      args?: Subset<T, NoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoteAggregateArgs>(args: Subset<T, NoteAggregateArgs>): Prisma.PrismaPromise<GetNoteAggregateType<T>>

    /**
     * Group by Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoteGroupByArgs['orderBy'] }
        : { orderBy?: NoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Note.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NoteClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    account<T extends AccountArgs<ExtArgs> = {}>(args?: Subset<T, AccountArgs<ExtArgs>>): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Note base type for findUnique actions
   */
  export type NoteFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findUnique
   */
  export interface NoteFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends NoteFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Note findUniqueOrThrow
   */
  export type NoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }


  /**
   * Note base type for findFirst actions
   */
  export type NoteFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: Enumerable<NoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: Enumerable<NoteScalarFieldEnum>
  }

  /**
   * Note findFirst
   */
  export interface NoteFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends NoteFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Note findFirstOrThrow
   */
  export type NoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: Enumerable<NoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: Enumerable<NoteScalarFieldEnum>
  }


  /**
   * Note findMany
   */
  export type NoteFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Notes to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: Enumerable<NoteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    distinct?: Enumerable<NoteScalarFieldEnum>
  }


  /**
   * Note create
   */
  export type NoteCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Note.
     */
    data: XOR<NoteCreateInput, NoteUncheckedCreateInput>
  }


  /**
   * Note createMany
   */
  export type NoteCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notes.
     */
    data: Enumerable<NoteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Note update
   */
  export type NoteUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Note.
     */
    data: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
    /**
     * Choose, which Note to update.
     */
    where: NoteWhereUniqueInput
  }


  /**
   * Note updateMany
   */
  export type NoteUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notes.
     */
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    /**
     * Filter which Notes to update
     */
    where?: NoteWhereInput
  }


  /**
   * Note upsert
   */
  export type NoteUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Note to update in case it exists.
     */
    where: NoteWhereUniqueInput
    /**
     * In case the Note found by the `where` argument doesn't exist, create a new Note with this data.
     */
    create: XOR<NoteCreateInput, NoteUncheckedCreateInput>
    /**
     * In case the Note was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
  }


  /**
   * Note delete
   */
  export type NoteDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter which Note to delete.
     */
    where: NoteWhereUniqueInput
  }


  /**
   * Note deleteMany
   */
  export type NoteDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notes to delete
     */
    where?: NoteWhereInput
  }


  /**
   * Note without action
   */
  export type NoteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NoteInclude<ExtArgs> | null
  }



  /**
   * Model ClientContact
   */


  export type AggregateClientContact = {
    _count: ClientContactCountAggregateOutputType | null
    _min: ClientContactMinAggregateOutputType | null
    _max: ClientContactMaxAggregateOutputType | null
  }

  export type ClientContactMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    title: string | null
    email: string | null
    accountId: string | null
  }

  export type ClientContactMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    title: string | null
    email: string | null
    accountId: string | null
  }

  export type ClientContactCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    title: number
    email: number
    accountId: number
    _all: number
  }


  export type ClientContactMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    title?: true
    email?: true
    accountId?: true
  }

  export type ClientContactMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    title?: true
    email?: true
    accountId?: true
  }

  export type ClientContactCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    title?: true
    email?: true
    accountId?: true
    _all?: true
  }

  export type ClientContactAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClientContact to aggregate.
     */
    where?: ClientContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientContacts to fetch.
     */
    orderBy?: Enumerable<ClientContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClientContacts
    **/
    _count?: true | ClientContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientContactMaxAggregateInputType
  }

  export type GetClientContactAggregateType<T extends ClientContactAggregateArgs> = {
        [P in keyof T & keyof AggregateClientContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientContact[P]>
      : GetScalarType<T[P], AggregateClientContact[P]>
  }




  export type ClientContactGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClientContactWhereInput
    orderBy?: Enumerable<ClientContactOrderByWithAggregationInput>
    by: ClientContactScalarFieldEnum[]
    having?: ClientContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientContactCountAggregateInputType | true
    _min?: ClientContactMinAggregateInputType
    _max?: ClientContactMaxAggregateInputType
  }


  export type ClientContactGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    title: string
    email: string
    accountId: string
    _count: ClientContactCountAggregateOutputType | null
    _min: ClientContactMinAggregateOutputType | null
    _max: ClientContactMaxAggregateOutputType | null
  }

  type GetClientContactGroupByPayload<T extends ClientContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ClientContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientContactGroupByOutputType[P]>
            : GetScalarType<T[P], ClientContactGroupByOutputType[P]>
        }
      >
    >


  export type ClientContactSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    title?: boolean
    email?: boolean
    accountId?: boolean
    account?: boolean | AccountArgs<ExtArgs>
  }, ExtArgs["result"]["clientContact"]>

  export type ClientContactSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    title?: boolean
    email?: boolean
    accountId?: boolean
  }

  export type ClientContactInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    account?: boolean | AccountArgs<ExtArgs>
  }


  type ClientContactGetPayload<S extends boolean | null | undefined | ClientContactArgs> = $Types.GetResult<ClientContactPayload, S>

  type ClientContactCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ClientContactFindManyArgs, 'select' | 'include'> & {
      select?: ClientContactCountAggregateInputType | true
    }

  export interface ClientContactDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClientContact'], meta: { name: 'ClientContact' } }
    /**
     * Find zero or one ClientContact that matches the filter.
     * @param {ClientContactFindUniqueArgs} args - Arguments to find a ClientContact
     * @example
     * // Get one ClientContact
     * const clientContact = await prisma.clientContact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClientContactFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClientContactFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ClientContact'> extends True ? Prisma__ClientContactClient<$Types.GetResult<ClientContactPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ClientContactClient<$Types.GetResult<ClientContactPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ClientContact that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClientContactFindUniqueOrThrowArgs} args - Arguments to find a ClientContact
     * @example
     * // Get one ClientContact
     * const clientContact = await prisma.clientContact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClientContactFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientContactFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClientContactClient<$Types.GetResult<ClientContactPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ClientContact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContactFindFirstArgs} args - Arguments to find a ClientContact
     * @example
     * // Get one ClientContact
     * const clientContact = await prisma.clientContact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClientContactFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClientContactFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ClientContact'> extends True ? Prisma__ClientContactClient<$Types.GetResult<ClientContactPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ClientContactClient<$Types.GetResult<ClientContactPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ClientContact that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContactFindFirstOrThrowArgs} args - Arguments to find a ClientContact
     * @example
     * // Get one ClientContact
     * const clientContact = await prisma.clientContact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClientContactFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientContactFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClientContactClient<$Types.GetResult<ClientContactPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ClientContacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContactFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClientContacts
     * const clientContacts = await prisma.clientContact.findMany()
     * 
     * // Get first 10 ClientContacts
     * const clientContacts = await prisma.clientContact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientContactWithIdOnly = await prisma.clientContact.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClientContactFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientContactFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ClientContactPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ClientContact.
     * @param {ClientContactCreateArgs} args - Arguments to create a ClientContact.
     * @example
     * // Create one ClientContact
     * const ClientContact = await prisma.clientContact.create({
     *   data: {
     *     // ... data to create a ClientContact
     *   }
     * })
     * 
    **/
    create<T extends ClientContactCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClientContactCreateArgs<ExtArgs>>
    ): Prisma__ClientContactClient<$Types.GetResult<ClientContactPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ClientContacts.
     *     @param {ClientContactCreateManyArgs} args - Arguments to create many ClientContacts.
     *     @example
     *     // Create many ClientContacts
     *     const clientContact = await prisma.clientContact.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClientContactCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientContactCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ClientContact.
     * @param {ClientContactDeleteArgs} args - Arguments to delete one ClientContact.
     * @example
     * // Delete one ClientContact
     * const ClientContact = await prisma.clientContact.delete({
     *   where: {
     *     // ... filter to delete one ClientContact
     *   }
     * })
     * 
    **/
    delete<T extends ClientContactDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClientContactDeleteArgs<ExtArgs>>
    ): Prisma__ClientContactClient<$Types.GetResult<ClientContactPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ClientContact.
     * @param {ClientContactUpdateArgs} args - Arguments to update one ClientContact.
     * @example
     * // Update one ClientContact
     * const clientContact = await prisma.clientContact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClientContactUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClientContactUpdateArgs<ExtArgs>>
    ): Prisma__ClientContactClient<$Types.GetResult<ClientContactPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ClientContacts.
     * @param {ClientContactDeleteManyArgs} args - Arguments to filter ClientContacts to delete.
     * @example
     * // Delete a few ClientContacts
     * const { count } = await prisma.clientContact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClientContactDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientContactDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClientContacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClientContacts
     * const clientContact = await prisma.clientContact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClientContactUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClientContactUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClientContact.
     * @param {ClientContactUpsertArgs} args - Arguments to update or create a ClientContact.
     * @example
     * // Update or create a ClientContact
     * const clientContact = await prisma.clientContact.upsert({
     *   create: {
     *     // ... data to create a ClientContact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClientContact we want to update
     *   }
     * })
    **/
    upsert<T extends ClientContactUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClientContactUpsertArgs<ExtArgs>>
    ): Prisma__ClientContactClient<$Types.GetResult<ClientContactPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ClientContacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContactCountArgs} args - Arguments to filter ClientContacts to count.
     * @example
     * // Count the number of ClientContacts
     * const count = await prisma.clientContact.count({
     *   where: {
     *     // ... the filter for the ClientContacts we want to count
     *   }
     * })
    **/
    count<T extends ClientContactCountArgs>(
      args?: Subset<T, ClientContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClientContact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientContactAggregateArgs>(args: Subset<T, ClientContactAggregateArgs>): Prisma.PrismaPromise<GetClientContactAggregateType<T>>

    /**
     * Group by ClientContact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientContactGroupByArgs['orderBy'] }
        : { orderBy?: ClientContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ClientContact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClientContactClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    account<T extends AccountArgs<ExtArgs> = {}>(args?: Subset<T, AccountArgs<ExtArgs>>): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ClientContact base type for findUnique actions
   */
  export type ClientContactFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientContactInclude<ExtArgs> | null
    /**
     * Filter, which ClientContact to fetch.
     */
    where: ClientContactWhereUniqueInput
  }

  /**
   * ClientContact findUnique
   */
  export interface ClientContactFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ClientContactFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ClientContact findUniqueOrThrow
   */
  export type ClientContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientContactInclude<ExtArgs> | null
    /**
     * Filter, which ClientContact to fetch.
     */
    where: ClientContactWhereUniqueInput
  }


  /**
   * ClientContact base type for findFirst actions
   */
  export type ClientContactFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientContactInclude<ExtArgs> | null
    /**
     * Filter, which ClientContact to fetch.
     */
    where?: ClientContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientContacts to fetch.
     */
    orderBy?: Enumerable<ClientContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientContacts.
     */
    cursor?: ClientContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientContacts.
     */
    distinct?: Enumerable<ClientContactScalarFieldEnum>
  }

  /**
   * ClientContact findFirst
   */
  export interface ClientContactFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ClientContactFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ClientContact findFirstOrThrow
   */
  export type ClientContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientContactInclude<ExtArgs> | null
    /**
     * Filter, which ClientContact to fetch.
     */
    where?: ClientContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientContacts to fetch.
     */
    orderBy?: Enumerable<ClientContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientContacts.
     */
    cursor?: ClientContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientContacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientContacts.
     */
    distinct?: Enumerable<ClientContactScalarFieldEnum>
  }


  /**
   * ClientContact findMany
   */
  export type ClientContactFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientContactInclude<ExtArgs> | null
    /**
     * Filter, which ClientContacts to fetch.
     */
    where?: ClientContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientContacts to fetch.
     */
    orderBy?: Enumerable<ClientContactOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClientContacts.
     */
    cursor?: ClientContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientContacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientContacts.
     */
    skip?: number
    distinct?: Enumerable<ClientContactScalarFieldEnum>
  }


  /**
   * ClientContact create
   */
  export type ClientContactCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientContactInclude<ExtArgs> | null
    /**
     * The data needed to create a ClientContact.
     */
    data: XOR<ClientContactCreateInput, ClientContactUncheckedCreateInput>
  }


  /**
   * ClientContact createMany
   */
  export type ClientContactCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClientContacts.
     */
    data: Enumerable<ClientContactCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ClientContact update
   */
  export type ClientContactUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientContactInclude<ExtArgs> | null
    /**
     * The data needed to update a ClientContact.
     */
    data: XOR<ClientContactUpdateInput, ClientContactUncheckedUpdateInput>
    /**
     * Choose, which ClientContact to update.
     */
    where: ClientContactWhereUniqueInput
  }


  /**
   * ClientContact updateMany
   */
  export type ClientContactUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClientContacts.
     */
    data: XOR<ClientContactUpdateManyMutationInput, ClientContactUncheckedUpdateManyInput>
    /**
     * Filter which ClientContacts to update
     */
    where?: ClientContactWhereInput
  }


  /**
   * ClientContact upsert
   */
  export type ClientContactUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientContactInclude<ExtArgs> | null
    /**
     * The filter to search for the ClientContact to update in case it exists.
     */
    where: ClientContactWhereUniqueInput
    /**
     * In case the ClientContact found by the `where` argument doesn't exist, create a new ClientContact with this data.
     */
    create: XOR<ClientContactCreateInput, ClientContactUncheckedCreateInput>
    /**
     * In case the ClientContact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientContactUpdateInput, ClientContactUncheckedUpdateInput>
  }


  /**
   * ClientContact delete
   */
  export type ClientContactDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientContactInclude<ExtArgs> | null
    /**
     * Filter which ClientContact to delete.
     */
    where: ClientContactWhereUniqueInput
  }


  /**
   * ClientContact deleteMany
   */
  export type ClientContactDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClientContacts to delete
     */
    where?: ClientContactWhereInput
  }


  /**
   * ClientContact without action
   */
  export type ClientContactArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientContact
     */
    select?: ClientContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientContactInclude<ExtArgs> | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    googleId: string | null
    role: Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    googleId: string | null
    role: Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    googleId: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    googleId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    googleId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    googleId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    googleId: string
    role: Role
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    googleId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    googleId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  type UserGetPayload<S extends boolean | null | undefined | UserArgs> = $Types.GetResult<UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }



  /**
   * Model Points
   */


  export type AggregatePoints = {
    _count: PointsCountAggregateOutputType | null
    _avg: PointsAvgAggregateOutputType | null
    _sum: PointsSumAggregateOutputType | null
    _min: PointsMinAggregateOutputType | null
    _max: PointsMaxAggregateOutputType | null
  }

  export type PointsAvgAggregateOutputType = {
    pointsPurchased: number | null
    pointsDelivered: number | null
  }

  export type PointsSumAggregateOutputType = {
    pointsPurchased: number | null
    pointsDelivered: number | null
  }

  export type PointsMinAggregateOutputType = {
    id: string | null
    accountId: string | null
    pointsPurchased: number | null
    pointsDelivered: number | null
    lastSyncedAt: Date | null
  }

  export type PointsMaxAggregateOutputType = {
    id: string | null
    accountId: string | null
    pointsPurchased: number | null
    pointsDelivered: number | null
    lastSyncedAt: Date | null
  }

  export type PointsCountAggregateOutputType = {
    id: number
    accountId: number
    pointsPurchased: number
    pointsDelivered: number
    lastSyncedAt: number
    _all: number
  }


  export type PointsAvgAggregateInputType = {
    pointsPurchased?: true
    pointsDelivered?: true
  }

  export type PointsSumAggregateInputType = {
    pointsPurchased?: true
    pointsDelivered?: true
  }

  export type PointsMinAggregateInputType = {
    id?: true
    accountId?: true
    pointsPurchased?: true
    pointsDelivered?: true
    lastSyncedAt?: true
  }

  export type PointsMaxAggregateInputType = {
    id?: true
    accountId?: true
    pointsPurchased?: true
    pointsDelivered?: true
    lastSyncedAt?: true
  }

  export type PointsCountAggregateInputType = {
    id?: true
    accountId?: true
    pointsPurchased?: true
    pointsDelivered?: true
    lastSyncedAt?: true
    _all?: true
  }

  export type PointsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Points to aggregate.
     */
    where?: PointsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Points to fetch.
     */
    orderBy?: Enumerable<PointsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PointsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Points from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Points.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Points
    **/
    _count?: true | PointsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PointsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PointsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PointsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PointsMaxAggregateInputType
  }

  export type GetPointsAggregateType<T extends PointsAggregateArgs> = {
        [P in keyof T & keyof AggregatePoints]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePoints[P]>
      : GetScalarType<T[P], AggregatePoints[P]>
  }




  export type PointsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PointsWhereInput
    orderBy?: Enumerable<PointsOrderByWithAggregationInput>
    by: PointsScalarFieldEnum[]
    having?: PointsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PointsCountAggregateInputType | true
    _avg?: PointsAvgAggregateInputType
    _sum?: PointsSumAggregateInputType
    _min?: PointsMinAggregateInputType
    _max?: PointsMaxAggregateInputType
  }


  export type PointsGroupByOutputType = {
    id: string
    accountId: string
    pointsPurchased: number
    pointsDelivered: number
    lastSyncedAt: Date
    _count: PointsCountAggregateOutputType | null
    _avg: PointsAvgAggregateOutputType | null
    _sum: PointsSumAggregateOutputType | null
    _min: PointsMinAggregateOutputType | null
    _max: PointsMaxAggregateOutputType | null
  }

  type GetPointsGroupByPayload<T extends PointsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PointsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PointsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PointsGroupByOutputType[P]>
            : GetScalarType<T[P], PointsGroupByOutputType[P]>
        }
      >
    >


  export type PointsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    pointsPurchased?: boolean
    pointsDelivered?: boolean
    lastSyncedAt?: boolean
    account?: boolean | AccountArgs<ExtArgs>
  }, ExtArgs["result"]["points"]>

  export type PointsSelectScalar = {
    id?: boolean
    accountId?: boolean
    pointsPurchased?: boolean
    pointsDelivered?: boolean
    lastSyncedAt?: boolean
  }

  export type PointsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    account?: boolean | AccountArgs<ExtArgs>
  }


  type PointsGetPayload<S extends boolean | null | undefined | PointsArgs> = $Types.GetResult<PointsPayload, S>

  type PointsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PointsFindManyArgs, 'select' | 'include'> & {
      select?: PointsCountAggregateInputType | true
    }

  export interface PointsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Points'], meta: { name: 'Points' } }
    /**
     * Find zero or one Points that matches the filter.
     * @param {PointsFindUniqueArgs} args - Arguments to find a Points
     * @example
     * // Get one Points
     * const points = await prisma.points.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PointsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PointsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Points'> extends True ? Prisma__PointsClient<$Types.GetResult<PointsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__PointsClient<$Types.GetResult<PointsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Points that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PointsFindUniqueOrThrowArgs} args - Arguments to find a Points
     * @example
     * // Get one Points
     * const points = await prisma.points.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PointsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PointsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PointsClient<$Types.GetResult<PointsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Points that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PointsFindFirstArgs} args - Arguments to find a Points
     * @example
     * // Get one Points
     * const points = await prisma.points.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PointsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PointsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Points'> extends True ? Prisma__PointsClient<$Types.GetResult<PointsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__PointsClient<$Types.GetResult<PointsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Points that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PointsFindFirstOrThrowArgs} args - Arguments to find a Points
     * @example
     * // Get one Points
     * const points = await prisma.points.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PointsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PointsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PointsClient<$Types.GetResult<PointsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Points that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PointsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Points
     * const points = await prisma.points.findMany()
     * 
     * // Get first 10 Points
     * const points = await prisma.points.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pointsWithIdOnly = await prisma.points.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PointsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PointsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PointsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Points.
     * @param {PointsCreateArgs} args - Arguments to create a Points.
     * @example
     * // Create one Points
     * const Points = await prisma.points.create({
     *   data: {
     *     // ... data to create a Points
     *   }
     * })
     * 
    **/
    create<T extends PointsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PointsCreateArgs<ExtArgs>>
    ): Prisma__PointsClient<$Types.GetResult<PointsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Points.
     *     @param {PointsCreateManyArgs} args - Arguments to create many Points.
     *     @example
     *     // Create many Points
     *     const points = await prisma.points.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PointsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PointsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Points.
     * @param {PointsDeleteArgs} args - Arguments to delete one Points.
     * @example
     * // Delete one Points
     * const Points = await prisma.points.delete({
     *   where: {
     *     // ... filter to delete one Points
     *   }
     * })
     * 
    **/
    delete<T extends PointsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PointsDeleteArgs<ExtArgs>>
    ): Prisma__PointsClient<$Types.GetResult<PointsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Points.
     * @param {PointsUpdateArgs} args - Arguments to update one Points.
     * @example
     * // Update one Points
     * const points = await prisma.points.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PointsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PointsUpdateArgs<ExtArgs>>
    ): Prisma__PointsClient<$Types.GetResult<PointsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Points.
     * @param {PointsDeleteManyArgs} args - Arguments to filter Points to delete.
     * @example
     * // Delete a few Points
     * const { count } = await prisma.points.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PointsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PointsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Points.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PointsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Points
     * const points = await prisma.points.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PointsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PointsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Points.
     * @param {PointsUpsertArgs} args - Arguments to update or create a Points.
     * @example
     * // Update or create a Points
     * const points = await prisma.points.upsert({
     *   create: {
     *     // ... data to create a Points
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Points we want to update
     *   }
     * })
    **/
    upsert<T extends PointsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PointsUpsertArgs<ExtArgs>>
    ): Prisma__PointsClient<$Types.GetResult<PointsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Points.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PointsCountArgs} args - Arguments to filter Points to count.
     * @example
     * // Count the number of Points
     * const count = await prisma.points.count({
     *   where: {
     *     // ... the filter for the Points we want to count
     *   }
     * })
    **/
    count<T extends PointsCountArgs>(
      args?: Subset<T, PointsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PointsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Points.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PointsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PointsAggregateArgs>(args: Subset<T, PointsAggregateArgs>): Prisma.PrismaPromise<GetPointsAggregateType<T>>

    /**
     * Group by Points.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PointsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PointsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PointsGroupByArgs['orderBy'] }
        : { orderBy?: PointsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PointsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPointsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Points.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PointsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    account<T extends AccountArgs<ExtArgs> = {}>(args?: Subset<T, AccountArgs<ExtArgs>>): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Points base type for findUnique actions
   */
  export type PointsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Points
     */
    select?: PointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PointsInclude<ExtArgs> | null
    /**
     * Filter, which Points to fetch.
     */
    where: PointsWhereUniqueInput
  }

  /**
   * Points findUnique
   */
  export interface PointsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PointsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Points findUniqueOrThrow
   */
  export type PointsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Points
     */
    select?: PointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PointsInclude<ExtArgs> | null
    /**
     * Filter, which Points to fetch.
     */
    where: PointsWhereUniqueInput
  }


  /**
   * Points base type for findFirst actions
   */
  export type PointsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Points
     */
    select?: PointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PointsInclude<ExtArgs> | null
    /**
     * Filter, which Points to fetch.
     */
    where?: PointsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Points to fetch.
     */
    orderBy?: Enumerable<PointsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Points.
     */
    cursor?: PointsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Points from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Points.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Points.
     */
    distinct?: Enumerable<PointsScalarFieldEnum>
  }

  /**
   * Points findFirst
   */
  export interface PointsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PointsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Points findFirstOrThrow
   */
  export type PointsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Points
     */
    select?: PointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PointsInclude<ExtArgs> | null
    /**
     * Filter, which Points to fetch.
     */
    where?: PointsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Points to fetch.
     */
    orderBy?: Enumerable<PointsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Points.
     */
    cursor?: PointsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Points from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Points.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Points.
     */
    distinct?: Enumerable<PointsScalarFieldEnum>
  }


  /**
   * Points findMany
   */
  export type PointsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Points
     */
    select?: PointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PointsInclude<ExtArgs> | null
    /**
     * Filter, which Points to fetch.
     */
    where?: PointsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Points to fetch.
     */
    orderBy?: Enumerable<PointsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Points.
     */
    cursor?: PointsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Points from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Points.
     */
    skip?: number
    distinct?: Enumerable<PointsScalarFieldEnum>
  }


  /**
   * Points create
   */
  export type PointsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Points
     */
    select?: PointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PointsInclude<ExtArgs> | null
    /**
     * The data needed to create a Points.
     */
    data: XOR<PointsCreateInput, PointsUncheckedCreateInput>
  }


  /**
   * Points createMany
   */
  export type PointsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Points.
     */
    data: Enumerable<PointsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Points update
   */
  export type PointsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Points
     */
    select?: PointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PointsInclude<ExtArgs> | null
    /**
     * The data needed to update a Points.
     */
    data: XOR<PointsUpdateInput, PointsUncheckedUpdateInput>
    /**
     * Choose, which Points to update.
     */
    where: PointsWhereUniqueInput
  }


  /**
   * Points updateMany
   */
  export type PointsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Points.
     */
    data: XOR<PointsUpdateManyMutationInput, PointsUncheckedUpdateManyInput>
    /**
     * Filter which Points to update
     */
    where?: PointsWhereInput
  }


  /**
   * Points upsert
   */
  export type PointsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Points
     */
    select?: PointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PointsInclude<ExtArgs> | null
    /**
     * The filter to search for the Points to update in case it exists.
     */
    where: PointsWhereUniqueInput
    /**
     * In case the Points found by the `where` argument doesn't exist, create a new Points with this data.
     */
    create: XOR<PointsCreateInput, PointsUncheckedCreateInput>
    /**
     * In case the Points was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PointsUpdateInput, PointsUncheckedUpdateInput>
  }


  /**
   * Points delete
   */
  export type PointsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Points
     */
    select?: PointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PointsInclude<ExtArgs> | null
    /**
     * Filter which Points to delete.
     */
    where: PointsWhereUniqueInput
  }


  /**
   * Points deleteMany
   */
  export type PointsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Points to delete
     */
    where?: PointsWhereInput
  }


  /**
   * Points without action
   */
  export type PointsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Points
     */
    select?: PointsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PointsInclude<ExtArgs> | null
  }



  /**
   * Model GrowthTask
   */


  export type AggregateGrowthTask = {
    _count: GrowthTaskCountAggregateOutputType | null
    _min: GrowthTaskMinAggregateOutputType | null
    _max: GrowthTaskMaxAggregateOutputType | null
  }

  export type GrowthTaskMinAggregateOutputType = {
    id: string | null
    accountId: string | null
    taskId: string | null
    description: string | null
    status: string | null
    assignee: string | null
    isGrowthTask: boolean | null
    createdDate: Date | null
    dueDate: Date | null
    dateDone: Date | null
    createdBy: string | null
    lastSyncedAt: Date | null
  }

  export type GrowthTaskMaxAggregateOutputType = {
    id: string | null
    accountId: string | null
    taskId: string | null
    description: string | null
    status: string | null
    assignee: string | null
    isGrowthTask: boolean | null
    createdDate: Date | null
    dueDate: Date | null
    dateDone: Date | null
    createdBy: string | null
    lastSyncedAt: Date | null
  }

  export type GrowthTaskCountAggregateOutputType = {
    id: number
    accountId: number
    taskId: number
    description: number
    status: number
    assignee: number
    isGrowthTask: number
    createdDate: number
    dueDate: number
    dateDone: number
    createdBy: number
    lastSyncedAt: number
    _all: number
  }


  export type GrowthTaskMinAggregateInputType = {
    id?: true
    accountId?: true
    taskId?: true
    description?: true
    status?: true
    assignee?: true
    isGrowthTask?: true
    createdDate?: true
    dueDate?: true
    dateDone?: true
    createdBy?: true
    lastSyncedAt?: true
  }

  export type GrowthTaskMaxAggregateInputType = {
    id?: true
    accountId?: true
    taskId?: true
    description?: true
    status?: true
    assignee?: true
    isGrowthTask?: true
    createdDate?: true
    dueDate?: true
    dateDone?: true
    createdBy?: true
    lastSyncedAt?: true
  }

  export type GrowthTaskCountAggregateInputType = {
    id?: true
    accountId?: true
    taskId?: true
    description?: true
    status?: true
    assignee?: true
    isGrowthTask?: true
    createdDate?: true
    dueDate?: true
    dateDone?: true
    createdBy?: true
    lastSyncedAt?: true
    _all?: true
  }

  export type GrowthTaskAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which GrowthTask to aggregate.
     */
    where?: GrowthTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrowthTasks to fetch.
     */
    orderBy?: Enumerable<GrowthTaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GrowthTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrowthTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrowthTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GrowthTasks
    **/
    _count?: true | GrowthTaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GrowthTaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GrowthTaskMaxAggregateInputType
  }

  export type GetGrowthTaskAggregateType<T extends GrowthTaskAggregateArgs> = {
        [P in keyof T & keyof AggregateGrowthTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrowthTask[P]>
      : GetScalarType<T[P], AggregateGrowthTask[P]>
  }




  export type GrowthTaskGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GrowthTaskWhereInput
    orderBy?: Enumerable<GrowthTaskOrderByWithAggregationInput>
    by: GrowthTaskScalarFieldEnum[]
    having?: GrowthTaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GrowthTaskCountAggregateInputType | true
    _min?: GrowthTaskMinAggregateInputType
    _max?: GrowthTaskMaxAggregateInputType
  }


  export type GrowthTaskGroupByOutputType = {
    id: string
    accountId: string
    taskId: string
    description: string
    status: string
    assignee: string | null
    isGrowthTask: boolean
    createdDate: Date
    dueDate: Date | null
    dateDone: Date | null
    createdBy: string
    lastSyncedAt: Date
    _count: GrowthTaskCountAggregateOutputType | null
    _min: GrowthTaskMinAggregateOutputType | null
    _max: GrowthTaskMaxAggregateOutputType | null
  }

  type GetGrowthTaskGroupByPayload<T extends GrowthTaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GrowthTaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GrowthTaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GrowthTaskGroupByOutputType[P]>
            : GetScalarType<T[P], GrowthTaskGroupByOutputType[P]>
        }
      >
    >


  export type GrowthTaskSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    taskId?: boolean
    description?: boolean
    status?: boolean
    assignee?: boolean
    isGrowthTask?: boolean
    createdDate?: boolean
    dueDate?: boolean
    dateDone?: boolean
    createdBy?: boolean
    lastSyncedAt?: boolean
    account?: boolean | AccountArgs<ExtArgs>
  }, ExtArgs["result"]["growthTask"]>

  export type GrowthTaskSelectScalar = {
    id?: boolean
    accountId?: boolean
    taskId?: boolean
    description?: boolean
    status?: boolean
    assignee?: boolean
    isGrowthTask?: boolean
    createdDate?: boolean
    dueDate?: boolean
    dateDone?: boolean
    createdBy?: boolean
    lastSyncedAt?: boolean
  }

  export type GrowthTaskInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    account?: boolean | AccountArgs<ExtArgs>
  }


  type GrowthTaskGetPayload<S extends boolean | null | undefined | GrowthTaskArgs> = $Types.GetResult<GrowthTaskPayload, S>

  type GrowthTaskCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<GrowthTaskFindManyArgs, 'select' | 'include'> & {
      select?: GrowthTaskCountAggregateInputType | true
    }

  export interface GrowthTaskDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GrowthTask'], meta: { name: 'GrowthTask' } }
    /**
     * Find zero or one GrowthTask that matches the filter.
     * @param {GrowthTaskFindUniqueArgs} args - Arguments to find a GrowthTask
     * @example
     * // Get one GrowthTask
     * const growthTask = await prisma.growthTask.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GrowthTaskFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GrowthTaskFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GrowthTask'> extends True ? Prisma__GrowthTaskClient<$Types.GetResult<GrowthTaskPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__GrowthTaskClient<$Types.GetResult<GrowthTaskPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one GrowthTask that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GrowthTaskFindUniqueOrThrowArgs} args - Arguments to find a GrowthTask
     * @example
     * // Get one GrowthTask
     * const growthTask = await prisma.growthTask.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GrowthTaskFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GrowthTaskFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GrowthTaskClient<$Types.GetResult<GrowthTaskPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first GrowthTask that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrowthTaskFindFirstArgs} args - Arguments to find a GrowthTask
     * @example
     * // Get one GrowthTask
     * const growthTask = await prisma.growthTask.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GrowthTaskFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GrowthTaskFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GrowthTask'> extends True ? Prisma__GrowthTaskClient<$Types.GetResult<GrowthTaskPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__GrowthTaskClient<$Types.GetResult<GrowthTaskPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first GrowthTask that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrowthTaskFindFirstOrThrowArgs} args - Arguments to find a GrowthTask
     * @example
     * // Get one GrowthTask
     * const growthTask = await prisma.growthTask.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GrowthTaskFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GrowthTaskFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GrowthTaskClient<$Types.GetResult<GrowthTaskPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more GrowthTasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrowthTaskFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GrowthTasks
     * const growthTasks = await prisma.growthTask.findMany()
     * 
     * // Get first 10 GrowthTasks
     * const growthTasks = await prisma.growthTask.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const growthTaskWithIdOnly = await prisma.growthTask.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GrowthTaskFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GrowthTaskFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<GrowthTaskPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a GrowthTask.
     * @param {GrowthTaskCreateArgs} args - Arguments to create a GrowthTask.
     * @example
     * // Create one GrowthTask
     * const GrowthTask = await prisma.growthTask.create({
     *   data: {
     *     // ... data to create a GrowthTask
     *   }
     * })
     * 
    **/
    create<T extends GrowthTaskCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GrowthTaskCreateArgs<ExtArgs>>
    ): Prisma__GrowthTaskClient<$Types.GetResult<GrowthTaskPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many GrowthTasks.
     *     @param {GrowthTaskCreateManyArgs} args - Arguments to create many GrowthTasks.
     *     @example
     *     // Create many GrowthTasks
     *     const growthTask = await prisma.growthTask.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GrowthTaskCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GrowthTaskCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GrowthTask.
     * @param {GrowthTaskDeleteArgs} args - Arguments to delete one GrowthTask.
     * @example
     * // Delete one GrowthTask
     * const GrowthTask = await prisma.growthTask.delete({
     *   where: {
     *     // ... filter to delete one GrowthTask
     *   }
     * })
     * 
    **/
    delete<T extends GrowthTaskDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GrowthTaskDeleteArgs<ExtArgs>>
    ): Prisma__GrowthTaskClient<$Types.GetResult<GrowthTaskPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one GrowthTask.
     * @param {GrowthTaskUpdateArgs} args - Arguments to update one GrowthTask.
     * @example
     * // Update one GrowthTask
     * const growthTask = await prisma.growthTask.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GrowthTaskUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GrowthTaskUpdateArgs<ExtArgs>>
    ): Prisma__GrowthTaskClient<$Types.GetResult<GrowthTaskPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more GrowthTasks.
     * @param {GrowthTaskDeleteManyArgs} args - Arguments to filter GrowthTasks to delete.
     * @example
     * // Delete a few GrowthTasks
     * const { count } = await prisma.growthTask.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GrowthTaskDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GrowthTaskDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GrowthTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrowthTaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GrowthTasks
     * const growthTask = await prisma.growthTask.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GrowthTaskUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GrowthTaskUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GrowthTask.
     * @param {GrowthTaskUpsertArgs} args - Arguments to update or create a GrowthTask.
     * @example
     * // Update or create a GrowthTask
     * const growthTask = await prisma.growthTask.upsert({
     *   create: {
     *     // ... data to create a GrowthTask
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GrowthTask we want to update
     *   }
     * })
    **/
    upsert<T extends GrowthTaskUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GrowthTaskUpsertArgs<ExtArgs>>
    ): Prisma__GrowthTaskClient<$Types.GetResult<GrowthTaskPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of GrowthTasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrowthTaskCountArgs} args - Arguments to filter GrowthTasks to count.
     * @example
     * // Count the number of GrowthTasks
     * const count = await prisma.growthTask.count({
     *   where: {
     *     // ... the filter for the GrowthTasks we want to count
     *   }
     * })
    **/
    count<T extends GrowthTaskCountArgs>(
      args?: Subset<T, GrowthTaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GrowthTaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GrowthTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrowthTaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GrowthTaskAggregateArgs>(args: Subset<T, GrowthTaskAggregateArgs>): Prisma.PrismaPromise<GetGrowthTaskAggregateType<T>>

    /**
     * Group by GrowthTask.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GrowthTaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GrowthTaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GrowthTaskGroupByArgs['orderBy'] }
        : { orderBy?: GrowthTaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GrowthTaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGrowthTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for GrowthTask.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GrowthTaskClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    account<T extends AccountArgs<ExtArgs> = {}>(args?: Subset<T, AccountArgs<ExtArgs>>): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * GrowthTask base type for findUnique actions
   */
  export type GrowthTaskFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthTask
     */
    select?: GrowthTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrowthTaskInclude<ExtArgs> | null
    /**
     * Filter, which GrowthTask to fetch.
     */
    where: GrowthTaskWhereUniqueInput
  }

  /**
   * GrowthTask findUnique
   */
  export interface GrowthTaskFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends GrowthTaskFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GrowthTask findUniqueOrThrow
   */
  export type GrowthTaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthTask
     */
    select?: GrowthTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrowthTaskInclude<ExtArgs> | null
    /**
     * Filter, which GrowthTask to fetch.
     */
    where: GrowthTaskWhereUniqueInput
  }


  /**
   * GrowthTask base type for findFirst actions
   */
  export type GrowthTaskFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthTask
     */
    select?: GrowthTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrowthTaskInclude<ExtArgs> | null
    /**
     * Filter, which GrowthTask to fetch.
     */
    where?: GrowthTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrowthTasks to fetch.
     */
    orderBy?: Enumerable<GrowthTaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GrowthTasks.
     */
    cursor?: GrowthTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrowthTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrowthTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GrowthTasks.
     */
    distinct?: Enumerable<GrowthTaskScalarFieldEnum>
  }

  /**
   * GrowthTask findFirst
   */
  export interface GrowthTaskFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends GrowthTaskFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GrowthTask findFirstOrThrow
   */
  export type GrowthTaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthTask
     */
    select?: GrowthTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrowthTaskInclude<ExtArgs> | null
    /**
     * Filter, which GrowthTask to fetch.
     */
    where?: GrowthTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrowthTasks to fetch.
     */
    orderBy?: Enumerable<GrowthTaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GrowthTasks.
     */
    cursor?: GrowthTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrowthTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrowthTasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GrowthTasks.
     */
    distinct?: Enumerable<GrowthTaskScalarFieldEnum>
  }


  /**
   * GrowthTask findMany
   */
  export type GrowthTaskFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthTask
     */
    select?: GrowthTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrowthTaskInclude<ExtArgs> | null
    /**
     * Filter, which GrowthTasks to fetch.
     */
    where?: GrowthTaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GrowthTasks to fetch.
     */
    orderBy?: Enumerable<GrowthTaskOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GrowthTasks.
     */
    cursor?: GrowthTaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GrowthTasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GrowthTasks.
     */
    skip?: number
    distinct?: Enumerable<GrowthTaskScalarFieldEnum>
  }


  /**
   * GrowthTask create
   */
  export type GrowthTaskCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthTask
     */
    select?: GrowthTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrowthTaskInclude<ExtArgs> | null
    /**
     * The data needed to create a GrowthTask.
     */
    data: XOR<GrowthTaskCreateInput, GrowthTaskUncheckedCreateInput>
  }


  /**
   * GrowthTask createMany
   */
  export type GrowthTaskCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GrowthTasks.
     */
    data: Enumerable<GrowthTaskCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GrowthTask update
   */
  export type GrowthTaskUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthTask
     */
    select?: GrowthTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrowthTaskInclude<ExtArgs> | null
    /**
     * The data needed to update a GrowthTask.
     */
    data: XOR<GrowthTaskUpdateInput, GrowthTaskUncheckedUpdateInput>
    /**
     * Choose, which GrowthTask to update.
     */
    where: GrowthTaskWhereUniqueInput
  }


  /**
   * GrowthTask updateMany
   */
  export type GrowthTaskUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GrowthTasks.
     */
    data: XOR<GrowthTaskUpdateManyMutationInput, GrowthTaskUncheckedUpdateManyInput>
    /**
     * Filter which GrowthTasks to update
     */
    where?: GrowthTaskWhereInput
  }


  /**
   * GrowthTask upsert
   */
  export type GrowthTaskUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthTask
     */
    select?: GrowthTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrowthTaskInclude<ExtArgs> | null
    /**
     * The filter to search for the GrowthTask to update in case it exists.
     */
    where: GrowthTaskWhereUniqueInput
    /**
     * In case the GrowthTask found by the `where` argument doesn't exist, create a new GrowthTask with this data.
     */
    create: XOR<GrowthTaskCreateInput, GrowthTaskUncheckedCreateInput>
    /**
     * In case the GrowthTask was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GrowthTaskUpdateInput, GrowthTaskUncheckedUpdateInput>
  }


  /**
   * GrowthTask delete
   */
  export type GrowthTaskDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthTask
     */
    select?: GrowthTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrowthTaskInclude<ExtArgs> | null
    /**
     * Filter which GrowthTask to delete.
     */
    where: GrowthTaskWhereUniqueInput
  }


  /**
   * GrowthTask deleteMany
   */
  export type GrowthTaskDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which GrowthTasks to delete
     */
    where?: GrowthTaskWhereInput
  }


  /**
   * GrowthTask without action
   */
  export type GrowthTaskArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GrowthTask
     */
    select?: GrowthTaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GrowthTaskInclude<ExtArgs> | null
  }



  /**
   * Model ClientListData
   */


  export type AggregateClientListData = {
    _count: ClientListDataCountAggregateOutputType | null
    _avg: ClientListDataAvgAggregateOutputType | null
    _sum: ClientListDataSumAggregateOutputType | null
    _min: ClientListDataMinAggregateOutputType | null
    _max: ClientListDataMaxAggregateOutputType | null
  }

  export type ClientListDataAvgAggregateOutputType = {
    mrr: number | null
    recurringPointsAllotment: number | null
  }

  export type ClientListDataSumAggregateOutputType = {
    mrr: number | null
    recurringPointsAllotment: number | null
  }

  export type ClientListDataMinAggregateOutputType = {
    id: string | null
    accountId: string | null
    assignee: string | null
    teamLead: string | null
    status: string | null
    mrr: number | null
    contractStartDate: Date | null
    contractRenewalEnd: Date | null
    nextStrategyApproval: Date | null
    recurringPointsAllotment: number | null
    businessUnit: string | null
    lastSyncedAt: Date | null
  }

  export type ClientListDataMaxAggregateOutputType = {
    id: string | null
    accountId: string | null
    assignee: string | null
    teamLead: string | null
    status: string | null
    mrr: number | null
    contractStartDate: Date | null
    contractRenewalEnd: Date | null
    nextStrategyApproval: Date | null
    recurringPointsAllotment: number | null
    businessUnit: string | null
    lastSyncedAt: Date | null
  }

  export type ClientListDataCountAggregateOutputType = {
    id: number
    accountId: number
    assignee: number
    teamLead: number
    status: number
    mrr: number
    contractStartDate: number
    contractRenewalEnd: number
    nextStrategyApproval: number
    recurringPointsAllotment: number
    businessUnit: number
    lastSyncedAt: number
    _all: number
  }


  export type ClientListDataAvgAggregateInputType = {
    mrr?: true
    recurringPointsAllotment?: true
  }

  export type ClientListDataSumAggregateInputType = {
    mrr?: true
    recurringPointsAllotment?: true
  }

  export type ClientListDataMinAggregateInputType = {
    id?: true
    accountId?: true
    assignee?: true
    teamLead?: true
    status?: true
    mrr?: true
    contractStartDate?: true
    contractRenewalEnd?: true
    nextStrategyApproval?: true
    recurringPointsAllotment?: true
    businessUnit?: true
    lastSyncedAt?: true
  }

  export type ClientListDataMaxAggregateInputType = {
    id?: true
    accountId?: true
    assignee?: true
    teamLead?: true
    status?: true
    mrr?: true
    contractStartDate?: true
    contractRenewalEnd?: true
    nextStrategyApproval?: true
    recurringPointsAllotment?: true
    businessUnit?: true
    lastSyncedAt?: true
  }

  export type ClientListDataCountAggregateInputType = {
    id?: true
    accountId?: true
    assignee?: true
    teamLead?: true
    status?: true
    mrr?: true
    contractStartDate?: true
    contractRenewalEnd?: true
    nextStrategyApproval?: true
    recurringPointsAllotment?: true
    businessUnit?: true
    lastSyncedAt?: true
    _all?: true
  }

  export type ClientListDataAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClientListData to aggregate.
     */
    where?: ClientListDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientListData to fetch.
     */
    orderBy?: Enumerable<ClientListDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientListDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientListData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientListData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClientListData
    **/
    _count?: true | ClientListDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientListDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientListDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientListDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientListDataMaxAggregateInputType
  }

  export type GetClientListDataAggregateType<T extends ClientListDataAggregateArgs> = {
        [P in keyof T & keyof AggregateClientListData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientListData[P]>
      : GetScalarType<T[P], AggregateClientListData[P]>
  }




  export type ClientListDataGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClientListDataWhereInput
    orderBy?: Enumerable<ClientListDataOrderByWithAggregationInput>
    by: ClientListDataScalarFieldEnum[]
    having?: ClientListDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientListDataCountAggregateInputType | true
    _avg?: ClientListDataAvgAggregateInputType
    _sum?: ClientListDataSumAggregateInputType
    _min?: ClientListDataMinAggregateInputType
    _max?: ClientListDataMaxAggregateInputType
  }


  export type ClientListDataGroupByOutputType = {
    id: string
    accountId: string
    assignee: string | null
    teamLead: string | null
    status: string | null
    mrr: number | null
    contractStartDate: Date | null
    contractRenewalEnd: Date | null
    nextStrategyApproval: Date | null
    recurringPointsAllotment: number | null
    businessUnit: string | null
    lastSyncedAt: Date
    _count: ClientListDataCountAggregateOutputType | null
    _avg: ClientListDataAvgAggregateOutputType | null
    _sum: ClientListDataSumAggregateOutputType | null
    _min: ClientListDataMinAggregateOutputType | null
    _max: ClientListDataMaxAggregateOutputType | null
  }

  type GetClientListDataGroupByPayload<T extends ClientListDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ClientListDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientListDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientListDataGroupByOutputType[P]>
            : GetScalarType<T[P], ClientListDataGroupByOutputType[P]>
        }
      >
    >


  export type ClientListDataSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    assignee?: boolean
    teamLead?: boolean
    status?: boolean
    mrr?: boolean
    contractStartDate?: boolean
    contractRenewalEnd?: boolean
    nextStrategyApproval?: boolean
    recurringPointsAllotment?: boolean
    businessUnit?: boolean
    lastSyncedAt?: boolean
    account?: boolean | AccountArgs<ExtArgs>
  }, ExtArgs["result"]["clientListData"]>

  export type ClientListDataSelectScalar = {
    id?: boolean
    accountId?: boolean
    assignee?: boolean
    teamLead?: boolean
    status?: boolean
    mrr?: boolean
    contractStartDate?: boolean
    contractRenewalEnd?: boolean
    nextStrategyApproval?: boolean
    recurringPointsAllotment?: boolean
    businessUnit?: boolean
    lastSyncedAt?: boolean
  }

  export type ClientListDataInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    account?: boolean | AccountArgs<ExtArgs>
  }


  type ClientListDataGetPayload<S extends boolean | null | undefined | ClientListDataArgs> = $Types.GetResult<ClientListDataPayload, S>

  type ClientListDataCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ClientListDataFindManyArgs, 'select' | 'include'> & {
      select?: ClientListDataCountAggregateInputType | true
    }

  export interface ClientListDataDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClientListData'], meta: { name: 'ClientListData' } }
    /**
     * Find zero or one ClientListData that matches the filter.
     * @param {ClientListDataFindUniqueArgs} args - Arguments to find a ClientListData
     * @example
     * // Get one ClientListData
     * const clientListData = await prisma.clientListData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClientListDataFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClientListDataFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ClientListData'> extends True ? Prisma__ClientListDataClient<$Types.GetResult<ClientListDataPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ClientListDataClient<$Types.GetResult<ClientListDataPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ClientListData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClientListDataFindUniqueOrThrowArgs} args - Arguments to find a ClientListData
     * @example
     * // Get one ClientListData
     * const clientListData = await prisma.clientListData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClientListDataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientListDataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClientListDataClient<$Types.GetResult<ClientListDataPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ClientListData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientListDataFindFirstArgs} args - Arguments to find a ClientListData
     * @example
     * // Get one ClientListData
     * const clientListData = await prisma.clientListData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClientListDataFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClientListDataFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ClientListData'> extends True ? Prisma__ClientListDataClient<$Types.GetResult<ClientListDataPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ClientListDataClient<$Types.GetResult<ClientListDataPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ClientListData that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientListDataFindFirstOrThrowArgs} args - Arguments to find a ClientListData
     * @example
     * // Get one ClientListData
     * const clientListData = await prisma.clientListData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClientListDataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientListDataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClientListDataClient<$Types.GetResult<ClientListDataPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ClientListData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientListDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClientListData
     * const clientListData = await prisma.clientListData.findMany()
     * 
     * // Get first 10 ClientListData
     * const clientListData = await prisma.clientListData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientListDataWithIdOnly = await prisma.clientListData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClientListDataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientListDataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ClientListDataPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ClientListData.
     * @param {ClientListDataCreateArgs} args - Arguments to create a ClientListData.
     * @example
     * // Create one ClientListData
     * const ClientListData = await prisma.clientListData.create({
     *   data: {
     *     // ... data to create a ClientListData
     *   }
     * })
     * 
    **/
    create<T extends ClientListDataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClientListDataCreateArgs<ExtArgs>>
    ): Prisma__ClientListDataClient<$Types.GetResult<ClientListDataPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ClientListData.
     *     @param {ClientListDataCreateManyArgs} args - Arguments to create many ClientListData.
     *     @example
     *     // Create many ClientListData
     *     const clientListData = await prisma.clientListData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClientListDataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientListDataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ClientListData.
     * @param {ClientListDataDeleteArgs} args - Arguments to delete one ClientListData.
     * @example
     * // Delete one ClientListData
     * const ClientListData = await prisma.clientListData.delete({
     *   where: {
     *     // ... filter to delete one ClientListData
     *   }
     * })
     * 
    **/
    delete<T extends ClientListDataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClientListDataDeleteArgs<ExtArgs>>
    ): Prisma__ClientListDataClient<$Types.GetResult<ClientListDataPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ClientListData.
     * @param {ClientListDataUpdateArgs} args - Arguments to update one ClientListData.
     * @example
     * // Update one ClientListData
     * const clientListData = await prisma.clientListData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClientListDataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClientListDataUpdateArgs<ExtArgs>>
    ): Prisma__ClientListDataClient<$Types.GetResult<ClientListDataPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ClientListData.
     * @param {ClientListDataDeleteManyArgs} args - Arguments to filter ClientListData to delete.
     * @example
     * // Delete a few ClientListData
     * const { count } = await prisma.clientListData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClientListDataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientListDataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClientListData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientListDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClientListData
     * const clientListData = await prisma.clientListData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClientListDataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClientListDataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClientListData.
     * @param {ClientListDataUpsertArgs} args - Arguments to update or create a ClientListData.
     * @example
     * // Update or create a ClientListData
     * const clientListData = await prisma.clientListData.upsert({
     *   create: {
     *     // ... data to create a ClientListData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClientListData we want to update
     *   }
     * })
    **/
    upsert<T extends ClientListDataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClientListDataUpsertArgs<ExtArgs>>
    ): Prisma__ClientListDataClient<$Types.GetResult<ClientListDataPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ClientListData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientListDataCountArgs} args - Arguments to filter ClientListData to count.
     * @example
     * // Count the number of ClientListData
     * const count = await prisma.clientListData.count({
     *   where: {
     *     // ... the filter for the ClientListData we want to count
     *   }
     * })
    **/
    count<T extends ClientListDataCountArgs>(
      args?: Subset<T, ClientListDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientListDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClientListData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientListDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientListDataAggregateArgs>(args: Subset<T, ClientListDataAggregateArgs>): Prisma.PrismaPromise<GetClientListDataAggregateType<T>>

    /**
     * Group by ClientListData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientListDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientListDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientListDataGroupByArgs['orderBy'] }
        : { orderBy?: ClientListDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientListDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientListDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ClientListData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClientListDataClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    account<T extends AccountArgs<ExtArgs> = {}>(args?: Subset<T, AccountArgs<ExtArgs>>): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ClientListData base type for findUnique actions
   */
  export type ClientListDataFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientListData
     */
    select?: ClientListDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientListDataInclude<ExtArgs> | null
    /**
     * Filter, which ClientListData to fetch.
     */
    where: ClientListDataWhereUniqueInput
  }

  /**
   * ClientListData findUnique
   */
  export interface ClientListDataFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ClientListDataFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ClientListData findUniqueOrThrow
   */
  export type ClientListDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientListData
     */
    select?: ClientListDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientListDataInclude<ExtArgs> | null
    /**
     * Filter, which ClientListData to fetch.
     */
    where: ClientListDataWhereUniqueInput
  }


  /**
   * ClientListData base type for findFirst actions
   */
  export type ClientListDataFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientListData
     */
    select?: ClientListDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientListDataInclude<ExtArgs> | null
    /**
     * Filter, which ClientListData to fetch.
     */
    where?: ClientListDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientListData to fetch.
     */
    orderBy?: Enumerable<ClientListDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientListData.
     */
    cursor?: ClientListDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientListData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientListData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientListData.
     */
    distinct?: Enumerable<ClientListDataScalarFieldEnum>
  }

  /**
   * ClientListData findFirst
   */
  export interface ClientListDataFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ClientListDataFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ClientListData findFirstOrThrow
   */
  export type ClientListDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientListData
     */
    select?: ClientListDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientListDataInclude<ExtArgs> | null
    /**
     * Filter, which ClientListData to fetch.
     */
    where?: ClientListDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientListData to fetch.
     */
    orderBy?: Enumerable<ClientListDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientListData.
     */
    cursor?: ClientListDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientListData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientListData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientListData.
     */
    distinct?: Enumerable<ClientListDataScalarFieldEnum>
  }


  /**
   * ClientListData findMany
   */
  export type ClientListDataFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientListData
     */
    select?: ClientListDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientListDataInclude<ExtArgs> | null
    /**
     * Filter, which ClientListData to fetch.
     */
    where?: ClientListDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientListData to fetch.
     */
    orderBy?: Enumerable<ClientListDataOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClientListData.
     */
    cursor?: ClientListDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientListData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientListData.
     */
    skip?: number
    distinct?: Enumerable<ClientListDataScalarFieldEnum>
  }


  /**
   * ClientListData create
   */
  export type ClientListDataCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientListData
     */
    select?: ClientListDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientListDataInclude<ExtArgs> | null
    /**
     * The data needed to create a ClientListData.
     */
    data: XOR<ClientListDataCreateInput, ClientListDataUncheckedCreateInput>
  }


  /**
   * ClientListData createMany
   */
  export type ClientListDataCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClientListData.
     */
    data: Enumerable<ClientListDataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ClientListData update
   */
  export type ClientListDataUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientListData
     */
    select?: ClientListDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientListDataInclude<ExtArgs> | null
    /**
     * The data needed to update a ClientListData.
     */
    data: XOR<ClientListDataUpdateInput, ClientListDataUncheckedUpdateInput>
    /**
     * Choose, which ClientListData to update.
     */
    where: ClientListDataWhereUniqueInput
  }


  /**
   * ClientListData updateMany
   */
  export type ClientListDataUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClientListData.
     */
    data: XOR<ClientListDataUpdateManyMutationInput, ClientListDataUncheckedUpdateManyInput>
    /**
     * Filter which ClientListData to update
     */
    where?: ClientListDataWhereInput
  }


  /**
   * ClientListData upsert
   */
  export type ClientListDataUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientListData
     */
    select?: ClientListDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientListDataInclude<ExtArgs> | null
    /**
     * The filter to search for the ClientListData to update in case it exists.
     */
    where: ClientListDataWhereUniqueInput
    /**
     * In case the ClientListData found by the `where` argument doesn't exist, create a new ClientListData with this data.
     */
    create: XOR<ClientListDataCreateInput, ClientListDataUncheckedCreateInput>
    /**
     * In case the ClientListData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientListDataUpdateInput, ClientListDataUncheckedUpdateInput>
  }


  /**
   * ClientListData delete
   */
  export type ClientListDataDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientListData
     */
    select?: ClientListDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientListDataInclude<ExtArgs> | null
    /**
     * Filter which ClientListData to delete.
     */
    where: ClientListDataWhereUniqueInput
  }


  /**
   * ClientListData deleteMany
   */
  export type ClientListDataDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClientListData to delete
     */
    where?: ClientListDataWhereInput
  }


  /**
   * ClientListData without action
   */
  export type ClientListDataArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientListData
     */
    select?: ClientListDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientListDataInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountScalarFieldEnum: {
    id: 'id',
    accountName: 'accountName',
    businessUnit: 'businessUnit',
    engagementType: 'engagementType',
    priority: 'priority',
    accountManager: 'accountManager',
    teamManager: 'teamManager',
    relationshipStartDate: 'relationshipStartDate',
    contractStartDate: 'contractStartDate',
    contractRenewalEnd: 'contractRenewalEnd',
    services: 'services',
    pointsPurchased: 'pointsPurchased',
    pointsDelivered: 'pointsDelivered',
    pointsStrikingDistance: 'pointsStrikingDistance',
    delivery: 'delivery',
    recurringPointsAllotment: 'recurringPointsAllotment',
    mrr: 'mrr',
    growthInMrr: 'growthInMrr',
    potentialMrr: 'potentialMrr',
    website: 'website',
    linkedinProfile: 'linkedinProfile',
    industry: 'industry',
    annualRevenue: 'annualRevenue',
    employees: 'employees',
    clientFolderId: 'clientFolderId',
    clientListTaskId: 'clientListTaskId'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    status: 'status',
    assignee: 'assignee',
    createdAt: 'createdAt',
    dueDate: 'dueDate',
    completedAt: 'completedAt',
    accountId: 'accountId',
    lastSyncedAt: 'lastSyncedAt'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const GoalScalarFieldEnum: {
    id: 'id',
    description: 'description',
    status: 'status',
    dueDate: 'dueDate',
    progress: 'progress',
    accountId: 'accountId'
  };

  export type GoalScalarFieldEnum = (typeof GoalScalarFieldEnum)[keyof typeof GoalScalarFieldEnum]


  export const NoteScalarFieldEnum: {
    id: 'id',
    description: 'description',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    accountId: 'accountId'
  };

  export type NoteScalarFieldEnum = (typeof NoteScalarFieldEnum)[keyof typeof NoteScalarFieldEnum]


  export const ClientContactScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    title: 'title',
    email: 'email',
    accountId: 'accountId'
  };

  export type ClientContactScalarFieldEnum = (typeof ClientContactScalarFieldEnum)[keyof typeof ClientContactScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    googleId: 'googleId',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PointsScalarFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    pointsPurchased: 'pointsPurchased',
    pointsDelivered: 'pointsDelivered',
    lastSyncedAt: 'lastSyncedAt'
  };

  export type PointsScalarFieldEnum = (typeof PointsScalarFieldEnum)[keyof typeof PointsScalarFieldEnum]


  export const GrowthTaskScalarFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    taskId: 'taskId',
    description: 'description',
    status: 'status',
    assignee: 'assignee',
    isGrowthTask: 'isGrowthTask',
    createdDate: 'createdDate',
    dueDate: 'dueDate',
    dateDone: 'dateDone',
    createdBy: 'createdBy',
    lastSyncedAt: 'lastSyncedAt'
  };

  export type GrowthTaskScalarFieldEnum = (typeof GrowthTaskScalarFieldEnum)[keyof typeof GrowthTaskScalarFieldEnum]


  export const ClientListDataScalarFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    assignee: 'assignee',
    teamLead: 'teamLead',
    status: 'status',
    mrr: 'mrr',
    contractStartDate: 'contractStartDate',
    contractRenewalEnd: 'contractRenewalEnd',
    nextStrategyApproval: 'nextStrategyApproval',
    recurringPointsAllotment: 'recurringPointsAllotment',
    businessUnit: 'businessUnit',
    lastSyncedAt: 'lastSyncedAt'
  };

  export type ClientListDataScalarFieldEnum = (typeof ClientListDataScalarFieldEnum)[keyof typeof ClientListDataScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: Enumerable<AccountWhereInput>
    OR?: Enumerable<AccountWhereInput>
    NOT?: Enumerable<AccountWhereInput>
    id?: StringFilter | string
    accountName?: StringFilter | string
    businessUnit?: EnumBusinessUnitFilter | BusinessUnit
    engagementType?: EnumEngagementTypeFilter | EngagementType
    priority?: EnumPriorityFilter | Priority
    accountManager?: StringFilter | string
    teamManager?: StringFilter | string
    relationshipStartDate?: DateTimeFilter | Date | string
    contractStartDate?: DateTimeFilter | Date | string
    contractRenewalEnd?: DateTimeFilter | Date | string
    services?: EnumServiceNullableListFilter
    pointsPurchased?: FloatFilter | number
    pointsDelivered?: FloatFilter | number
    pointsStrikingDistance?: FloatFilter | number
    delivery?: StringFilter | string
    recurringPointsAllotment?: FloatFilter | number
    mrr?: FloatFilter | number
    growthInMrr?: FloatFilter | number
    potentialMrr?: FloatFilter | number
    website?: StringNullableFilter | string | null
    linkedinProfile?: StringNullableFilter | string | null
    industry?: StringFilter | string
    annualRevenue?: FloatFilter | number
    employees?: IntFilter | number
    clientFolderId?: StringNullableFilter | string | null
    clientListTaskId?: StringNullableFilter | string | null
    tasks?: TaskListRelationFilter
    goals?: GoalListRelationFilter
    notes?: NoteListRelationFilter
    clientContacts?: ClientContactListRelationFilter
    points?: XOR<PointsRelationFilter, PointsWhereInput> | null
    growthTasks?: GrowthTaskListRelationFilter
    clientListData?: XOR<ClientListDataRelationFilter, ClientListDataWhereInput> | null
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    accountName?: SortOrder
    businessUnit?: SortOrder
    engagementType?: SortOrder
    priority?: SortOrder
    accountManager?: SortOrder
    teamManager?: SortOrder
    relationshipStartDate?: SortOrder
    contractStartDate?: SortOrder
    contractRenewalEnd?: SortOrder
    services?: SortOrder
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    pointsStrikingDistance?: SortOrder
    delivery?: SortOrder
    recurringPointsAllotment?: SortOrder
    mrr?: SortOrder
    growthInMrr?: SortOrder
    potentialMrr?: SortOrder
    website?: SortOrderInput | SortOrder
    linkedinProfile?: SortOrderInput | SortOrder
    industry?: SortOrder
    annualRevenue?: SortOrder
    employees?: SortOrder
    clientFolderId?: SortOrderInput | SortOrder
    clientListTaskId?: SortOrderInput | SortOrder
    tasks?: TaskOrderByRelationAggregateInput
    goals?: GoalOrderByRelationAggregateInput
    notes?: NoteOrderByRelationAggregateInput
    clientContacts?: ClientContactOrderByRelationAggregateInput
    points?: PointsOrderByWithRelationInput
    growthTasks?: GrowthTaskOrderByRelationAggregateInput
    clientListData?: ClientListDataOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = {
    id?: string
    clientFolderId?: string
    clientListTaskId?: string
  }

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    accountName?: SortOrder
    businessUnit?: SortOrder
    engagementType?: SortOrder
    priority?: SortOrder
    accountManager?: SortOrder
    teamManager?: SortOrder
    relationshipStartDate?: SortOrder
    contractStartDate?: SortOrder
    contractRenewalEnd?: SortOrder
    services?: SortOrder
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    pointsStrikingDistance?: SortOrder
    delivery?: SortOrder
    recurringPointsAllotment?: SortOrder
    mrr?: SortOrder
    growthInMrr?: SortOrder
    potentialMrr?: SortOrder
    website?: SortOrderInput | SortOrder
    linkedinProfile?: SortOrderInput | SortOrder
    industry?: SortOrder
    annualRevenue?: SortOrder
    employees?: SortOrder
    clientFolderId?: SortOrderInput | SortOrder
    clientListTaskId?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AccountScalarWhereWithAggregatesInput>
    OR?: Enumerable<AccountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AccountScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    accountName?: StringWithAggregatesFilter | string
    businessUnit?: EnumBusinessUnitWithAggregatesFilter | BusinessUnit
    engagementType?: EnumEngagementTypeWithAggregatesFilter | EngagementType
    priority?: EnumPriorityWithAggregatesFilter | Priority
    accountManager?: StringWithAggregatesFilter | string
    teamManager?: StringWithAggregatesFilter | string
    relationshipStartDate?: DateTimeWithAggregatesFilter | Date | string
    contractStartDate?: DateTimeWithAggregatesFilter | Date | string
    contractRenewalEnd?: DateTimeWithAggregatesFilter | Date | string
    services?: EnumServiceNullableListFilter
    pointsPurchased?: FloatWithAggregatesFilter | number
    pointsDelivered?: FloatWithAggregatesFilter | number
    pointsStrikingDistance?: FloatWithAggregatesFilter | number
    delivery?: StringWithAggregatesFilter | string
    recurringPointsAllotment?: FloatWithAggregatesFilter | number
    mrr?: FloatWithAggregatesFilter | number
    growthInMrr?: FloatWithAggregatesFilter | number
    potentialMrr?: FloatWithAggregatesFilter | number
    website?: StringNullableWithAggregatesFilter | string | null
    linkedinProfile?: StringNullableWithAggregatesFilter | string | null
    industry?: StringWithAggregatesFilter | string
    annualRevenue?: FloatWithAggregatesFilter | number
    employees?: IntWithAggregatesFilter | number
    clientFolderId?: StringNullableWithAggregatesFilter | string | null
    clientListTaskId?: StringNullableWithAggregatesFilter | string | null
  }

  export type TaskWhereInput = {
    AND?: Enumerable<TaskWhereInput>
    OR?: Enumerable<TaskWhereInput>
    NOT?: Enumerable<TaskWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    status?: StringFilter | string
    assignee?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    dueDate?: DateTimeNullableFilter | Date | string | null
    completedAt?: DateTimeNullableFilter | Date | string | null
    accountId?: StringFilter | string
    lastSyncedAt?: DateTimeFilter | Date | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    assignee?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    accountId?: SortOrder
    lastSyncedAt?: SortOrder
    account?: AccountOrderByWithRelationInput
  }

  export type TaskWhereUniqueInput = {
    id?: string
  }

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    assignee?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    accountId?: SortOrder
    lastSyncedAt?: SortOrder
    _count?: TaskCountOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TaskScalarWhereWithAggregatesInput>
    OR?: Enumerable<TaskScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TaskScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    status?: StringWithAggregatesFilter | string
    assignee?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    dueDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    accountId?: StringWithAggregatesFilter | string
    lastSyncedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type GoalWhereInput = {
    AND?: Enumerable<GoalWhereInput>
    OR?: Enumerable<GoalWhereInput>
    NOT?: Enumerable<GoalWhereInput>
    id?: StringFilter | string
    description?: StringFilter | string
    status?: StringFilter | string
    dueDate?: DateTimeFilter | Date | string
    progress?: IntFilter | number
    accountId?: StringFilter | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }

  export type GoalOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    progress?: SortOrder
    accountId?: SortOrder
    account?: AccountOrderByWithRelationInput
  }

  export type GoalWhereUniqueInput = {
    id?: string
  }

  export type GoalOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    progress?: SortOrder
    accountId?: SortOrder
    _count?: GoalCountOrderByAggregateInput
    _avg?: GoalAvgOrderByAggregateInput
    _max?: GoalMaxOrderByAggregateInput
    _min?: GoalMinOrderByAggregateInput
    _sum?: GoalSumOrderByAggregateInput
  }

  export type GoalScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GoalScalarWhereWithAggregatesInput>
    OR?: Enumerable<GoalScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GoalScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    dueDate?: DateTimeWithAggregatesFilter | Date | string
    progress?: IntWithAggregatesFilter | number
    accountId?: StringWithAggregatesFilter | string
  }

  export type NoteWhereInput = {
    AND?: Enumerable<NoteWhereInput>
    OR?: Enumerable<NoteWhereInput>
    NOT?: Enumerable<NoteWhereInput>
    id?: StringFilter | string
    description?: StringFilter | string
    createdBy?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    accountId?: StringFilter | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }

  export type NoteOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    accountId?: SortOrder
    account?: AccountOrderByWithRelationInput
  }

  export type NoteWhereUniqueInput = {
    id?: string
  }

  export type NoteOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    accountId?: SortOrder
    _count?: NoteCountOrderByAggregateInput
    _max?: NoteMaxOrderByAggregateInput
    _min?: NoteMinOrderByAggregateInput
  }

  export type NoteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NoteScalarWhereWithAggregatesInput>
    OR?: Enumerable<NoteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NoteScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    createdBy?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    accountId?: StringWithAggregatesFilter | string
  }

  export type ClientContactWhereInput = {
    AND?: Enumerable<ClientContactWhereInput>
    OR?: Enumerable<ClientContactWhereInput>
    NOT?: Enumerable<ClientContactWhereInput>
    id?: StringFilter | string
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    title?: StringFilter | string
    email?: StringFilter | string
    accountId?: StringFilter | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }

  export type ClientContactOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    title?: SortOrder
    email?: SortOrder
    accountId?: SortOrder
    account?: AccountOrderByWithRelationInput
  }

  export type ClientContactWhereUniqueInput = {
    id?: string
  }

  export type ClientContactOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    title?: SortOrder
    email?: SortOrder
    accountId?: SortOrder
    _count?: ClientContactCountOrderByAggregateInput
    _max?: ClientContactMaxOrderByAggregateInput
    _min?: ClientContactMinOrderByAggregateInput
  }

  export type ClientContactScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClientContactScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClientContactScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClientContactScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    accountId?: StringWithAggregatesFilter | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    name?: StringNullableFilter | string | null
    googleId?: StringFilter | string
    role?: EnumRoleFilter | Role
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    googleId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
    googleId?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    googleId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    googleId?: StringWithAggregatesFilter | string
    role?: EnumRoleWithAggregatesFilter | Role
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PointsWhereInput = {
    AND?: Enumerable<PointsWhereInput>
    OR?: Enumerable<PointsWhereInput>
    NOT?: Enumerable<PointsWhereInput>
    id?: StringFilter | string
    accountId?: StringFilter | string
    pointsPurchased?: FloatFilter | number
    pointsDelivered?: FloatFilter | number
    lastSyncedAt?: DateTimeFilter | Date | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }

  export type PointsOrderByWithRelationInput = {
    id?: SortOrder
    accountId?: SortOrder
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    lastSyncedAt?: SortOrder
    account?: AccountOrderByWithRelationInput
  }

  export type PointsWhereUniqueInput = {
    id?: string
    accountId?: string
  }

  export type PointsOrderByWithAggregationInput = {
    id?: SortOrder
    accountId?: SortOrder
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    lastSyncedAt?: SortOrder
    _count?: PointsCountOrderByAggregateInput
    _avg?: PointsAvgOrderByAggregateInput
    _max?: PointsMaxOrderByAggregateInput
    _min?: PointsMinOrderByAggregateInput
    _sum?: PointsSumOrderByAggregateInput
  }

  export type PointsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PointsScalarWhereWithAggregatesInput>
    OR?: Enumerable<PointsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PointsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    accountId?: StringWithAggregatesFilter | string
    pointsPurchased?: FloatWithAggregatesFilter | number
    pointsDelivered?: FloatWithAggregatesFilter | number
    lastSyncedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type GrowthTaskWhereInput = {
    AND?: Enumerable<GrowthTaskWhereInput>
    OR?: Enumerable<GrowthTaskWhereInput>
    NOT?: Enumerable<GrowthTaskWhereInput>
    id?: StringFilter | string
    accountId?: StringFilter | string
    taskId?: StringFilter | string
    description?: StringFilter | string
    status?: StringFilter | string
    assignee?: StringNullableFilter | string | null
    isGrowthTask?: BoolFilter | boolean
    createdDate?: DateTimeFilter | Date | string
    dueDate?: DateTimeNullableFilter | Date | string | null
    dateDone?: DateTimeNullableFilter | Date | string | null
    createdBy?: StringFilter | string
    lastSyncedAt?: DateTimeFilter | Date | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }

  export type GrowthTaskOrderByWithRelationInput = {
    id?: SortOrder
    accountId?: SortOrder
    taskId?: SortOrder
    description?: SortOrder
    status?: SortOrder
    assignee?: SortOrderInput | SortOrder
    isGrowthTask?: SortOrder
    createdDate?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    dateDone?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    lastSyncedAt?: SortOrder
    account?: AccountOrderByWithRelationInput
  }

  export type GrowthTaskWhereUniqueInput = {
    id?: string
  }

  export type GrowthTaskOrderByWithAggregationInput = {
    id?: SortOrder
    accountId?: SortOrder
    taskId?: SortOrder
    description?: SortOrder
    status?: SortOrder
    assignee?: SortOrderInput | SortOrder
    isGrowthTask?: SortOrder
    createdDate?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    dateDone?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    lastSyncedAt?: SortOrder
    _count?: GrowthTaskCountOrderByAggregateInput
    _max?: GrowthTaskMaxOrderByAggregateInput
    _min?: GrowthTaskMinOrderByAggregateInput
  }

  export type GrowthTaskScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GrowthTaskScalarWhereWithAggregatesInput>
    OR?: Enumerable<GrowthTaskScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GrowthTaskScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    accountId?: StringWithAggregatesFilter | string
    taskId?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    assignee?: StringNullableWithAggregatesFilter | string | null
    isGrowthTask?: BoolWithAggregatesFilter | boolean
    createdDate?: DateTimeWithAggregatesFilter | Date | string
    dueDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    dateDone?: DateTimeNullableWithAggregatesFilter | Date | string | null
    createdBy?: StringWithAggregatesFilter | string
    lastSyncedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ClientListDataWhereInput = {
    AND?: Enumerable<ClientListDataWhereInput>
    OR?: Enumerable<ClientListDataWhereInput>
    NOT?: Enumerable<ClientListDataWhereInput>
    id?: StringFilter | string
    accountId?: StringFilter | string
    assignee?: StringNullableFilter | string | null
    teamLead?: StringNullableFilter | string | null
    status?: StringNullableFilter | string | null
    mrr?: FloatNullableFilter | number | null
    contractStartDate?: DateTimeNullableFilter | Date | string | null
    contractRenewalEnd?: DateTimeNullableFilter | Date | string | null
    nextStrategyApproval?: DateTimeNullableFilter | Date | string | null
    recurringPointsAllotment?: FloatNullableFilter | number | null
    businessUnit?: StringNullableFilter | string | null
    lastSyncedAt?: DateTimeFilter | Date | string
    account?: XOR<AccountRelationFilter, AccountWhereInput>
  }

  export type ClientListDataOrderByWithRelationInput = {
    id?: SortOrder
    accountId?: SortOrder
    assignee?: SortOrderInput | SortOrder
    teamLead?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    mrr?: SortOrderInput | SortOrder
    contractStartDate?: SortOrderInput | SortOrder
    contractRenewalEnd?: SortOrderInput | SortOrder
    nextStrategyApproval?: SortOrderInput | SortOrder
    recurringPointsAllotment?: SortOrderInput | SortOrder
    businessUnit?: SortOrderInput | SortOrder
    lastSyncedAt?: SortOrder
    account?: AccountOrderByWithRelationInput
  }

  export type ClientListDataWhereUniqueInput = {
    id?: string
    accountId?: string
  }

  export type ClientListDataOrderByWithAggregationInput = {
    id?: SortOrder
    accountId?: SortOrder
    assignee?: SortOrderInput | SortOrder
    teamLead?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    mrr?: SortOrderInput | SortOrder
    contractStartDate?: SortOrderInput | SortOrder
    contractRenewalEnd?: SortOrderInput | SortOrder
    nextStrategyApproval?: SortOrderInput | SortOrder
    recurringPointsAllotment?: SortOrderInput | SortOrder
    businessUnit?: SortOrderInput | SortOrder
    lastSyncedAt?: SortOrder
    _count?: ClientListDataCountOrderByAggregateInput
    _avg?: ClientListDataAvgOrderByAggregateInput
    _max?: ClientListDataMaxOrderByAggregateInput
    _min?: ClientListDataMinOrderByAggregateInput
    _sum?: ClientListDataSumOrderByAggregateInput
  }

  export type ClientListDataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClientListDataScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClientListDataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClientListDataScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    accountId?: StringWithAggregatesFilter | string
    assignee?: StringNullableWithAggregatesFilter | string | null
    teamLead?: StringNullableWithAggregatesFilter | string | null
    status?: StringNullableWithAggregatesFilter | string | null
    mrr?: FloatNullableWithAggregatesFilter | number | null
    contractStartDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    contractRenewalEnd?: DateTimeNullableWithAggregatesFilter | Date | string | null
    nextStrategyApproval?: DateTimeNullableWithAggregatesFilter | Date | string | null
    recurringPointsAllotment?: FloatNullableWithAggregatesFilter | number | null
    businessUnit?: StringNullableWithAggregatesFilter | string | null
    lastSyncedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | Enumerable<Service>
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId?: string | null
    clientListTaskId?: string | null
    tasks?: TaskCreateNestedManyWithoutAccountInput
    goals?: GoalCreateNestedManyWithoutAccountInput
    notes?: NoteCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactCreateNestedManyWithoutAccountInput
    points?: PointsCreateNestedOneWithoutAccountInput
    growthTasks?: GrowthTaskCreateNestedManyWithoutAccountInput
    clientListData?: ClientListDataCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | Enumerable<Service>
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId?: string | null
    clientListTaskId?: string | null
    tasks?: TaskUncheckedCreateNestedManyWithoutAccountInput
    goals?: GoalUncheckedCreateNestedManyWithoutAccountInput
    notes?: NoteUncheckedCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactUncheckedCreateNestedManyWithoutAccountInput
    points?: PointsUncheckedCreateNestedOneWithoutAccountInput
    growthTasks?: GrowthTaskUncheckedCreateNestedManyWithoutAccountInput
    clientListData?: ClientListDataUncheckedCreateNestedOneWithoutAccountInput
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | Enumerable<Service>
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    pointsStrikingDistance?: FloatFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: FloatFieldUpdateOperationsInput | number
    mrr?: FloatFieldUpdateOperationsInput | number
    growthInMrr?: FloatFieldUpdateOperationsInput | number
    potentialMrr?: FloatFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: FloatFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    clientFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    clientListTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    tasks?: TaskUpdateManyWithoutAccountNestedInput
    goals?: GoalUpdateManyWithoutAccountNestedInput
    notes?: NoteUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUpdateManyWithoutAccountNestedInput
    points?: PointsUpdateOneWithoutAccountNestedInput
    growthTasks?: GrowthTaskUpdateManyWithoutAccountNestedInput
    clientListData?: ClientListDataUpdateOneWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | Enumerable<Service>
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    pointsStrikingDistance?: FloatFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: FloatFieldUpdateOperationsInput | number
    mrr?: FloatFieldUpdateOperationsInput | number
    growthInMrr?: FloatFieldUpdateOperationsInput | number
    potentialMrr?: FloatFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: FloatFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    clientFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    clientListTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    tasks?: TaskUncheckedUpdateManyWithoutAccountNestedInput
    goals?: GoalUncheckedUpdateManyWithoutAccountNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUncheckedUpdateManyWithoutAccountNestedInput
    points?: PointsUncheckedUpdateOneWithoutAccountNestedInput
    growthTasks?: GrowthTaskUncheckedUpdateManyWithoutAccountNestedInput
    clientListData?: ClientListDataUncheckedUpdateOneWithoutAccountNestedInput
  }

  export type AccountCreateManyInput = {
    id?: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | Enumerable<Service>
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId?: string | null
    clientListTaskId?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | Enumerable<Service>
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    pointsStrikingDistance?: FloatFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: FloatFieldUpdateOperationsInput | number
    mrr?: FloatFieldUpdateOperationsInput | number
    growthInMrr?: FloatFieldUpdateOperationsInput | number
    potentialMrr?: FloatFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: FloatFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    clientFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    clientListTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | Enumerable<Service>
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    pointsStrikingDistance?: FloatFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: FloatFieldUpdateOperationsInput | number
    mrr?: FloatFieldUpdateOperationsInput | number
    growthInMrr?: FloatFieldUpdateOperationsInput | number
    potentialMrr?: FloatFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: FloatFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    clientFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    clientListTaskId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskCreateInput = {
    id?: string
    name: string
    description?: string | null
    status: string
    assignee?: string | null
    createdAt?: Date | string
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    lastSyncedAt?: Date | string
    account: AccountCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    status: string
    assignee?: string | null
    createdAt?: Date | string
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    accountId: string
    lastSyncedAt?: Date | string
  }

  export type TaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accountId?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    status: string
    assignee?: string | null
    createdAt?: Date | string
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    accountId: string
    lastSyncedAt?: Date | string
  }

  export type TaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accountId?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalCreateInput = {
    id?: string
    description: string
    status: string
    dueDate: Date | string
    progress: number
    account: AccountCreateNestedOneWithoutGoalsInput
  }

  export type GoalUncheckedCreateInput = {
    id?: string
    description: string
    status: string
    dueDate: Date | string
    progress: number
    accountId: string
  }

  export type GoalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    account?: AccountUpdateOneRequiredWithoutGoalsNestedInput
  }

  export type GoalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    accountId?: StringFieldUpdateOperationsInput | string
  }

  export type GoalCreateManyInput = {
    id?: string
    description: string
    status: string
    dueDate: Date | string
    progress: number
    accountId: string
  }

  export type GoalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
  }

  export type GoalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
    accountId?: StringFieldUpdateOperationsInput | string
  }

  export type NoteCreateInput = {
    id?: string
    description: string
    createdBy: string
    createdAt?: Date | string
    account: AccountCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateInput = {
    id?: string
    description: string
    createdBy: string
    createdAt?: Date | string
    accountId: string
  }

  export type NoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneRequiredWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accountId?: StringFieldUpdateOperationsInput | string
  }

  export type NoteCreateManyInput = {
    id?: string
    description: string
    createdBy: string
    createdAt?: Date | string
    accountId: string
  }

  export type NoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accountId?: StringFieldUpdateOperationsInput | string
  }

  export type ClientContactCreateInput = {
    id?: string
    firstName: string
    lastName: string
    title: string
    email: string
    account: AccountCreateNestedOneWithoutClientContactsInput
  }

  export type ClientContactUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    title: string
    email: string
    accountId: string
  }

  export type ClientContactUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    account?: AccountUpdateOneRequiredWithoutClientContactsNestedInput
  }

  export type ClientContactUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
  }

  export type ClientContactCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    title: string
    email: string
    accountId: string
  }

  export type ClientContactUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ClientContactUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    googleId: string
    role?: Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    googleId: string
    role?: Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    googleId: string
    role?: Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    googleId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PointsCreateInput = {
    id?: string
    pointsPurchased: number
    pointsDelivered: number
    lastSyncedAt?: Date | string
    account: AccountCreateNestedOneWithoutPointsInput
  }

  export type PointsUncheckedCreateInput = {
    id?: string
    accountId: string
    pointsPurchased: number
    pointsDelivered: number
    lastSyncedAt?: Date | string
  }

  export type PointsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneRequiredWithoutPointsNestedInput
  }

  export type PointsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PointsCreateManyInput = {
    id?: string
    accountId: string
    pointsPurchased: number
    pointsDelivered: number
    lastSyncedAt?: Date | string
  }

  export type PointsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PointsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrowthTaskCreateInput = {
    id?: string
    taskId: string
    description: string
    status: string
    assignee?: string | null
    isGrowthTask?: boolean
    createdDate: Date | string
    dueDate?: Date | string | null
    dateDone?: Date | string | null
    createdBy: string
    lastSyncedAt?: Date | string
    account: AccountCreateNestedOneWithoutGrowthTasksInput
  }

  export type GrowthTaskUncheckedCreateInput = {
    id?: string
    accountId: string
    taskId: string
    description: string
    status: string
    assignee?: string | null
    isGrowthTask?: boolean
    createdDate: Date | string
    dueDate?: Date | string | null
    dateDone?: Date | string | null
    createdBy: string
    lastSyncedAt?: Date | string
  }

  export type GrowthTaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    isGrowthTask?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneRequiredWithoutGrowthTasksNestedInput
  }

  export type GrowthTaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    isGrowthTask?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrowthTaskCreateManyInput = {
    id?: string
    accountId: string
    taskId: string
    description: string
    status: string
    assignee?: string | null
    isGrowthTask?: boolean
    createdDate: Date | string
    dueDate?: Date | string | null
    dateDone?: Date | string | null
    createdBy: string
    lastSyncedAt?: Date | string
  }

  export type GrowthTaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    isGrowthTask?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrowthTaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    isGrowthTask?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientListDataCreateInput = {
    id?: string
    assignee?: string | null
    teamLead?: string | null
    status?: string | null
    mrr?: number | null
    contractStartDate?: Date | string | null
    contractRenewalEnd?: Date | string | null
    nextStrategyApproval?: Date | string | null
    recurringPointsAllotment?: number | null
    businessUnit?: string | null
    lastSyncedAt?: Date | string
    account: AccountCreateNestedOneWithoutClientListDataInput
  }

  export type ClientListDataUncheckedCreateInput = {
    id?: string
    accountId: string
    assignee?: string | null
    teamLead?: string | null
    status?: string | null
    mrr?: number | null
    contractStartDate?: Date | string | null
    contractRenewalEnd?: Date | string | null
    nextStrategyApproval?: Date | string | null
    recurringPointsAllotment?: number | null
    businessUnit?: string | null
    lastSyncedAt?: Date | string
  }

  export type ClientListDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    teamLead?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mrr?: NullableFloatFieldUpdateOperationsInput | number | null
    contractStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractRenewalEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextStrategyApproval?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recurringPointsAllotment?: NullableFloatFieldUpdateOperationsInput | number | null
    businessUnit?: NullableStringFieldUpdateOperationsInput | string | null
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneRequiredWithoutClientListDataNestedInput
  }

  export type ClientListDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    teamLead?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mrr?: NullableFloatFieldUpdateOperationsInput | number | null
    contractStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractRenewalEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextStrategyApproval?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recurringPointsAllotment?: NullableFloatFieldUpdateOperationsInput | number | null
    businessUnit?: NullableStringFieldUpdateOperationsInput | string | null
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientListDataCreateManyInput = {
    id?: string
    accountId: string
    assignee?: string | null
    teamLead?: string | null
    status?: string | null
    mrr?: number | null
    contractStartDate?: Date | string | null
    contractRenewalEnd?: Date | string | null
    nextStrategyApproval?: Date | string | null
    recurringPointsAllotment?: number | null
    businessUnit?: string | null
    lastSyncedAt?: Date | string
  }

  export type ClientListDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    teamLead?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mrr?: NullableFloatFieldUpdateOperationsInput | number | null
    contractStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractRenewalEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextStrategyApproval?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recurringPointsAllotment?: NullableFloatFieldUpdateOperationsInput | number | null
    businessUnit?: NullableStringFieldUpdateOperationsInput | string | null
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientListDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    teamLead?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mrr?: NullableFloatFieldUpdateOperationsInput | number | null
    contractStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractRenewalEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextStrategyApproval?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recurringPointsAllotment?: NullableFloatFieldUpdateOperationsInput | number | null
    businessUnit?: NullableStringFieldUpdateOperationsInput | string | null
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type EnumBusinessUnitFilter = {
    equals?: BusinessUnit
    in?: Enumerable<BusinessUnit>
    notIn?: Enumerable<BusinessUnit>
    not?: NestedEnumBusinessUnitFilter | BusinessUnit
  }

  export type EnumEngagementTypeFilter = {
    equals?: EngagementType
    in?: Enumerable<EngagementType>
    notIn?: Enumerable<EngagementType>
    not?: NestedEnumEngagementTypeFilter | EngagementType
  }

  export type EnumPriorityFilter = {
    equals?: Priority
    in?: Enumerable<Priority>
    notIn?: Enumerable<Priority>
    not?: NestedEnumPriorityFilter | Priority
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type EnumServiceNullableListFilter = {
    equals?: Enumerable<Service> | null
    has?: Service | null
    hasEvery?: Enumerable<Service>
    hasSome?: Enumerable<Service>
    isEmpty?: boolean
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type GoalListRelationFilter = {
    every?: GoalWhereInput
    some?: GoalWhereInput
    none?: GoalWhereInput
  }

  export type NoteListRelationFilter = {
    every?: NoteWhereInput
    some?: NoteWhereInput
    none?: NoteWhereInput
  }

  export type ClientContactListRelationFilter = {
    every?: ClientContactWhereInput
    some?: ClientContactWhereInput
    none?: ClientContactWhereInput
  }

  export type PointsRelationFilter = {
    is?: PointsWhereInput | null
    isNot?: PointsWhereInput | null
  }

  export type GrowthTaskListRelationFilter = {
    every?: GrowthTaskWhereInput
    some?: GrowthTaskWhereInput
    none?: GrowthTaskWhereInput
  }

  export type ClientListDataRelationFilter = {
    is?: ClientListDataWhereInput | null
    isNot?: ClientListDataWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GoalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GrowthTaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    accountName?: SortOrder
    businessUnit?: SortOrder
    engagementType?: SortOrder
    priority?: SortOrder
    accountManager?: SortOrder
    teamManager?: SortOrder
    relationshipStartDate?: SortOrder
    contractStartDate?: SortOrder
    contractRenewalEnd?: SortOrder
    services?: SortOrder
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    pointsStrikingDistance?: SortOrder
    delivery?: SortOrder
    recurringPointsAllotment?: SortOrder
    mrr?: SortOrder
    growthInMrr?: SortOrder
    potentialMrr?: SortOrder
    website?: SortOrder
    linkedinProfile?: SortOrder
    industry?: SortOrder
    annualRevenue?: SortOrder
    employees?: SortOrder
    clientFolderId?: SortOrder
    clientListTaskId?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    pointsStrikingDistance?: SortOrder
    recurringPointsAllotment?: SortOrder
    mrr?: SortOrder
    growthInMrr?: SortOrder
    potentialMrr?: SortOrder
    annualRevenue?: SortOrder
    employees?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    accountName?: SortOrder
    businessUnit?: SortOrder
    engagementType?: SortOrder
    priority?: SortOrder
    accountManager?: SortOrder
    teamManager?: SortOrder
    relationshipStartDate?: SortOrder
    contractStartDate?: SortOrder
    contractRenewalEnd?: SortOrder
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    pointsStrikingDistance?: SortOrder
    delivery?: SortOrder
    recurringPointsAllotment?: SortOrder
    mrr?: SortOrder
    growthInMrr?: SortOrder
    potentialMrr?: SortOrder
    website?: SortOrder
    linkedinProfile?: SortOrder
    industry?: SortOrder
    annualRevenue?: SortOrder
    employees?: SortOrder
    clientFolderId?: SortOrder
    clientListTaskId?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    accountName?: SortOrder
    businessUnit?: SortOrder
    engagementType?: SortOrder
    priority?: SortOrder
    accountManager?: SortOrder
    teamManager?: SortOrder
    relationshipStartDate?: SortOrder
    contractStartDate?: SortOrder
    contractRenewalEnd?: SortOrder
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    pointsStrikingDistance?: SortOrder
    delivery?: SortOrder
    recurringPointsAllotment?: SortOrder
    mrr?: SortOrder
    growthInMrr?: SortOrder
    potentialMrr?: SortOrder
    website?: SortOrder
    linkedinProfile?: SortOrder
    industry?: SortOrder
    annualRevenue?: SortOrder
    employees?: SortOrder
    clientFolderId?: SortOrder
    clientListTaskId?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    pointsStrikingDistance?: SortOrder
    recurringPointsAllotment?: SortOrder
    mrr?: SortOrder
    growthInMrr?: SortOrder
    potentialMrr?: SortOrder
    annualRevenue?: SortOrder
    employees?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type EnumBusinessUnitWithAggregatesFilter = {
    equals?: BusinessUnit
    in?: Enumerable<BusinessUnit>
    notIn?: Enumerable<BusinessUnit>
    not?: NestedEnumBusinessUnitWithAggregatesFilter | BusinessUnit
    _count?: NestedIntFilter
    _min?: NestedEnumBusinessUnitFilter
    _max?: NestedEnumBusinessUnitFilter
  }

  export type EnumEngagementTypeWithAggregatesFilter = {
    equals?: EngagementType
    in?: Enumerable<EngagementType>
    notIn?: Enumerable<EngagementType>
    not?: NestedEnumEngagementTypeWithAggregatesFilter | EngagementType
    _count?: NestedIntFilter
    _min?: NestedEnumEngagementTypeFilter
    _max?: NestedEnumEngagementTypeFilter
  }

  export type EnumPriorityWithAggregatesFilter = {
    equals?: Priority
    in?: Enumerable<Priority>
    notIn?: Enumerable<Priority>
    not?: NestedEnumPriorityWithAggregatesFilter | Priority
    _count?: NestedIntFilter
    _min?: NestedEnumPriorityFilter
    _max?: NestedEnumPriorityFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type AccountRelationFilter = {
    is?: AccountWhereInput | null
    isNot?: AccountWhereInput | null
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    assignee?: SortOrder
    createdAt?: SortOrder
    dueDate?: SortOrder
    completedAt?: SortOrder
    accountId?: SortOrder
    lastSyncedAt?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    assignee?: SortOrder
    createdAt?: SortOrder
    dueDate?: SortOrder
    completedAt?: SortOrder
    accountId?: SortOrder
    lastSyncedAt?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    assignee?: SortOrder
    createdAt?: SortOrder
    dueDate?: SortOrder
    completedAt?: SortOrder
    accountId?: SortOrder
    lastSyncedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type GoalCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    progress?: SortOrder
    accountId?: SortOrder
  }

  export type GoalAvgOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type GoalMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    progress?: SortOrder
    accountId?: SortOrder
  }

  export type GoalMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    progress?: SortOrder
    accountId?: SortOrder
  }

  export type GoalSumOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type NoteCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    accountId?: SortOrder
  }

  export type NoteMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    accountId?: SortOrder
  }

  export type NoteMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    accountId?: SortOrder
  }

  export type ClientContactCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    title?: SortOrder
    email?: SortOrder
    accountId?: SortOrder
  }

  export type ClientContactMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    title?: SortOrder
    email?: SortOrder
    accountId?: SortOrder
  }

  export type ClientContactMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    title?: SortOrder
    email?: SortOrder
    accountId?: SortOrder
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    googleId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    googleId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    googleId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type PointsCountOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    lastSyncedAt?: SortOrder
  }

  export type PointsAvgOrderByAggregateInput = {
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
  }

  export type PointsMaxOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    lastSyncedAt?: SortOrder
  }

  export type PointsMinOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
    lastSyncedAt?: SortOrder
  }

  export type PointsSumOrderByAggregateInput = {
    pointsPurchased?: SortOrder
    pointsDelivered?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type GrowthTaskCountOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    taskId?: SortOrder
    description?: SortOrder
    status?: SortOrder
    assignee?: SortOrder
    isGrowthTask?: SortOrder
    createdDate?: SortOrder
    dueDate?: SortOrder
    dateDone?: SortOrder
    createdBy?: SortOrder
    lastSyncedAt?: SortOrder
  }

  export type GrowthTaskMaxOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    taskId?: SortOrder
    description?: SortOrder
    status?: SortOrder
    assignee?: SortOrder
    isGrowthTask?: SortOrder
    createdDate?: SortOrder
    dueDate?: SortOrder
    dateDone?: SortOrder
    createdBy?: SortOrder
    lastSyncedAt?: SortOrder
  }

  export type GrowthTaskMinOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    taskId?: SortOrder
    description?: SortOrder
    status?: SortOrder
    assignee?: SortOrder
    isGrowthTask?: SortOrder
    createdDate?: SortOrder
    dueDate?: SortOrder
    dateDone?: SortOrder
    createdBy?: SortOrder
    lastSyncedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type ClientListDataCountOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    assignee?: SortOrder
    teamLead?: SortOrder
    status?: SortOrder
    mrr?: SortOrder
    contractStartDate?: SortOrder
    contractRenewalEnd?: SortOrder
    nextStrategyApproval?: SortOrder
    recurringPointsAllotment?: SortOrder
    businessUnit?: SortOrder
    lastSyncedAt?: SortOrder
  }

  export type ClientListDataAvgOrderByAggregateInput = {
    mrr?: SortOrder
    recurringPointsAllotment?: SortOrder
  }

  export type ClientListDataMaxOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    assignee?: SortOrder
    teamLead?: SortOrder
    status?: SortOrder
    mrr?: SortOrder
    contractStartDate?: SortOrder
    contractRenewalEnd?: SortOrder
    nextStrategyApproval?: SortOrder
    recurringPointsAllotment?: SortOrder
    businessUnit?: SortOrder
    lastSyncedAt?: SortOrder
  }

  export type ClientListDataMinOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    assignee?: SortOrder
    teamLead?: SortOrder
    status?: SortOrder
    mrr?: SortOrder
    contractStartDate?: SortOrder
    contractRenewalEnd?: SortOrder
    nextStrategyApproval?: SortOrder
    recurringPointsAllotment?: SortOrder
    businessUnit?: SortOrder
    lastSyncedAt?: SortOrder
  }

  export type ClientListDataSumOrderByAggregateInput = {
    mrr?: SortOrder
    recurringPointsAllotment?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type AccountCreateservicesInput = {
    set: Enumerable<Service>
  }

  export type TaskCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<TaskCreateWithoutAccountInput>, Enumerable<TaskUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutAccountInput>
    createMany?: TaskCreateManyAccountInputEnvelope
    connect?: Enumerable<TaskWhereUniqueInput>
  }

  export type GoalCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<GoalCreateWithoutAccountInput>, Enumerable<GoalUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<GoalCreateOrConnectWithoutAccountInput>
    createMany?: GoalCreateManyAccountInputEnvelope
    connect?: Enumerable<GoalWhereUniqueInput>
  }

  export type NoteCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<NoteCreateWithoutAccountInput>, Enumerable<NoteUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<NoteCreateOrConnectWithoutAccountInput>
    createMany?: NoteCreateManyAccountInputEnvelope
    connect?: Enumerable<NoteWhereUniqueInput>
  }

  export type ClientContactCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<ClientContactCreateWithoutAccountInput>, Enumerable<ClientContactUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<ClientContactCreateOrConnectWithoutAccountInput>
    createMany?: ClientContactCreateManyAccountInputEnvelope
    connect?: Enumerable<ClientContactWhereUniqueInput>
  }

  export type PointsCreateNestedOneWithoutAccountInput = {
    create?: XOR<PointsCreateWithoutAccountInput, PointsUncheckedCreateWithoutAccountInput>
    connectOrCreate?: PointsCreateOrConnectWithoutAccountInput
    connect?: PointsWhereUniqueInput
  }

  export type GrowthTaskCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<GrowthTaskCreateWithoutAccountInput>, Enumerable<GrowthTaskUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<GrowthTaskCreateOrConnectWithoutAccountInput>
    createMany?: GrowthTaskCreateManyAccountInputEnvelope
    connect?: Enumerable<GrowthTaskWhereUniqueInput>
  }

  export type ClientListDataCreateNestedOneWithoutAccountInput = {
    create?: XOR<ClientListDataCreateWithoutAccountInput, ClientListDataUncheckedCreateWithoutAccountInput>
    connectOrCreate?: ClientListDataCreateOrConnectWithoutAccountInput
    connect?: ClientListDataWhereUniqueInput
  }

  export type TaskUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<TaskCreateWithoutAccountInput>, Enumerable<TaskUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutAccountInput>
    createMany?: TaskCreateManyAccountInputEnvelope
    connect?: Enumerable<TaskWhereUniqueInput>
  }

  export type GoalUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<GoalCreateWithoutAccountInput>, Enumerable<GoalUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<GoalCreateOrConnectWithoutAccountInput>
    createMany?: GoalCreateManyAccountInputEnvelope
    connect?: Enumerable<GoalWhereUniqueInput>
  }

  export type NoteUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<NoteCreateWithoutAccountInput>, Enumerable<NoteUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<NoteCreateOrConnectWithoutAccountInput>
    createMany?: NoteCreateManyAccountInputEnvelope
    connect?: Enumerable<NoteWhereUniqueInput>
  }

  export type ClientContactUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<ClientContactCreateWithoutAccountInput>, Enumerable<ClientContactUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<ClientContactCreateOrConnectWithoutAccountInput>
    createMany?: ClientContactCreateManyAccountInputEnvelope
    connect?: Enumerable<ClientContactWhereUniqueInput>
  }

  export type PointsUncheckedCreateNestedOneWithoutAccountInput = {
    create?: XOR<PointsCreateWithoutAccountInput, PointsUncheckedCreateWithoutAccountInput>
    connectOrCreate?: PointsCreateOrConnectWithoutAccountInput
    connect?: PointsWhereUniqueInput
  }

  export type GrowthTaskUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<GrowthTaskCreateWithoutAccountInput>, Enumerable<GrowthTaskUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<GrowthTaskCreateOrConnectWithoutAccountInput>
    createMany?: GrowthTaskCreateManyAccountInputEnvelope
    connect?: Enumerable<GrowthTaskWhereUniqueInput>
  }

  export type ClientListDataUncheckedCreateNestedOneWithoutAccountInput = {
    create?: XOR<ClientListDataCreateWithoutAccountInput, ClientListDataUncheckedCreateWithoutAccountInput>
    connectOrCreate?: ClientListDataCreateOrConnectWithoutAccountInput
    connect?: ClientListDataWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumBusinessUnitFieldUpdateOperationsInput = {
    set?: BusinessUnit
  }

  export type EnumEngagementTypeFieldUpdateOperationsInput = {
    set?: EngagementType
  }

  export type EnumPriorityFieldUpdateOperationsInput = {
    set?: Priority
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AccountUpdateservicesInput = {
    set?: Enumerable<Service>
    push?: Enumerable<Service>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TaskUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<TaskCreateWithoutAccountInput>, Enumerable<TaskUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<TaskUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: TaskCreateManyAccountInputEnvelope
    set?: Enumerable<TaskWhereUniqueInput>
    disconnect?: Enumerable<TaskWhereUniqueInput>
    delete?: Enumerable<TaskWhereUniqueInput>
    connect?: Enumerable<TaskWhereUniqueInput>
    update?: Enumerable<TaskUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<TaskUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<TaskScalarWhereInput>
  }

  export type GoalUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<GoalCreateWithoutAccountInput>, Enumerable<GoalUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<GoalCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<GoalUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: GoalCreateManyAccountInputEnvelope
    set?: Enumerable<GoalWhereUniqueInput>
    disconnect?: Enumerable<GoalWhereUniqueInput>
    delete?: Enumerable<GoalWhereUniqueInput>
    connect?: Enumerable<GoalWhereUniqueInput>
    update?: Enumerable<GoalUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<GoalUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<GoalScalarWhereInput>
  }

  export type NoteUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<NoteCreateWithoutAccountInput>, Enumerable<NoteUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<NoteCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<NoteUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: NoteCreateManyAccountInputEnvelope
    set?: Enumerable<NoteWhereUniqueInput>
    disconnect?: Enumerable<NoteWhereUniqueInput>
    delete?: Enumerable<NoteWhereUniqueInput>
    connect?: Enumerable<NoteWhereUniqueInput>
    update?: Enumerable<NoteUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<NoteUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<NoteScalarWhereInput>
  }

  export type ClientContactUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<ClientContactCreateWithoutAccountInput>, Enumerable<ClientContactUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<ClientContactCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<ClientContactUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: ClientContactCreateManyAccountInputEnvelope
    set?: Enumerable<ClientContactWhereUniqueInput>
    disconnect?: Enumerable<ClientContactWhereUniqueInput>
    delete?: Enumerable<ClientContactWhereUniqueInput>
    connect?: Enumerable<ClientContactWhereUniqueInput>
    update?: Enumerable<ClientContactUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<ClientContactUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<ClientContactScalarWhereInput>
  }

  export type PointsUpdateOneWithoutAccountNestedInput = {
    create?: XOR<PointsCreateWithoutAccountInput, PointsUncheckedCreateWithoutAccountInput>
    connectOrCreate?: PointsCreateOrConnectWithoutAccountInput
    upsert?: PointsUpsertWithoutAccountInput
    disconnect?: boolean
    delete?: boolean
    connect?: PointsWhereUniqueInput
    update?: XOR<PointsUpdateWithoutAccountInput, PointsUncheckedUpdateWithoutAccountInput>
  }

  export type GrowthTaskUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<GrowthTaskCreateWithoutAccountInput>, Enumerable<GrowthTaskUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<GrowthTaskCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<GrowthTaskUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: GrowthTaskCreateManyAccountInputEnvelope
    set?: Enumerable<GrowthTaskWhereUniqueInput>
    disconnect?: Enumerable<GrowthTaskWhereUniqueInput>
    delete?: Enumerable<GrowthTaskWhereUniqueInput>
    connect?: Enumerable<GrowthTaskWhereUniqueInput>
    update?: Enumerable<GrowthTaskUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<GrowthTaskUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<GrowthTaskScalarWhereInput>
  }

  export type ClientListDataUpdateOneWithoutAccountNestedInput = {
    create?: XOR<ClientListDataCreateWithoutAccountInput, ClientListDataUncheckedCreateWithoutAccountInput>
    connectOrCreate?: ClientListDataCreateOrConnectWithoutAccountInput
    upsert?: ClientListDataUpsertWithoutAccountInput
    disconnect?: boolean
    delete?: boolean
    connect?: ClientListDataWhereUniqueInput
    update?: XOR<ClientListDataUpdateWithoutAccountInput, ClientListDataUncheckedUpdateWithoutAccountInput>
  }

  export type TaskUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<TaskCreateWithoutAccountInput>, Enumerable<TaskUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<TaskCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<TaskUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: TaskCreateManyAccountInputEnvelope
    set?: Enumerable<TaskWhereUniqueInput>
    disconnect?: Enumerable<TaskWhereUniqueInput>
    delete?: Enumerable<TaskWhereUniqueInput>
    connect?: Enumerable<TaskWhereUniqueInput>
    update?: Enumerable<TaskUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<TaskUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<TaskScalarWhereInput>
  }

  export type GoalUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<GoalCreateWithoutAccountInput>, Enumerable<GoalUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<GoalCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<GoalUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: GoalCreateManyAccountInputEnvelope
    set?: Enumerable<GoalWhereUniqueInput>
    disconnect?: Enumerable<GoalWhereUniqueInput>
    delete?: Enumerable<GoalWhereUniqueInput>
    connect?: Enumerable<GoalWhereUniqueInput>
    update?: Enumerable<GoalUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<GoalUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<GoalScalarWhereInput>
  }

  export type NoteUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<NoteCreateWithoutAccountInput>, Enumerable<NoteUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<NoteCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<NoteUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: NoteCreateManyAccountInputEnvelope
    set?: Enumerable<NoteWhereUniqueInput>
    disconnect?: Enumerable<NoteWhereUniqueInput>
    delete?: Enumerable<NoteWhereUniqueInput>
    connect?: Enumerable<NoteWhereUniqueInput>
    update?: Enumerable<NoteUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<NoteUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<NoteScalarWhereInput>
  }

  export type ClientContactUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<ClientContactCreateWithoutAccountInput>, Enumerable<ClientContactUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<ClientContactCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<ClientContactUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: ClientContactCreateManyAccountInputEnvelope
    set?: Enumerable<ClientContactWhereUniqueInput>
    disconnect?: Enumerable<ClientContactWhereUniqueInput>
    delete?: Enumerable<ClientContactWhereUniqueInput>
    connect?: Enumerable<ClientContactWhereUniqueInput>
    update?: Enumerable<ClientContactUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<ClientContactUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<ClientContactScalarWhereInput>
  }

  export type PointsUncheckedUpdateOneWithoutAccountNestedInput = {
    create?: XOR<PointsCreateWithoutAccountInput, PointsUncheckedCreateWithoutAccountInput>
    connectOrCreate?: PointsCreateOrConnectWithoutAccountInput
    upsert?: PointsUpsertWithoutAccountInput
    disconnect?: boolean
    delete?: boolean
    connect?: PointsWhereUniqueInput
    update?: XOR<PointsUpdateWithoutAccountInput, PointsUncheckedUpdateWithoutAccountInput>
  }

  export type GrowthTaskUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<GrowthTaskCreateWithoutAccountInput>, Enumerable<GrowthTaskUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<GrowthTaskCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<GrowthTaskUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: GrowthTaskCreateManyAccountInputEnvelope
    set?: Enumerable<GrowthTaskWhereUniqueInput>
    disconnect?: Enumerable<GrowthTaskWhereUniqueInput>
    delete?: Enumerable<GrowthTaskWhereUniqueInput>
    connect?: Enumerable<GrowthTaskWhereUniqueInput>
    update?: Enumerable<GrowthTaskUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<GrowthTaskUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<GrowthTaskScalarWhereInput>
  }

  export type ClientListDataUncheckedUpdateOneWithoutAccountNestedInput = {
    create?: XOR<ClientListDataCreateWithoutAccountInput, ClientListDataUncheckedCreateWithoutAccountInput>
    connectOrCreate?: ClientListDataCreateOrConnectWithoutAccountInput
    upsert?: ClientListDataUpsertWithoutAccountInput
    disconnect?: boolean
    delete?: boolean
    connect?: ClientListDataWhereUniqueInput
    update?: XOR<ClientListDataUpdateWithoutAccountInput, ClientListDataUncheckedUpdateWithoutAccountInput>
  }

  export type AccountCreateNestedOneWithoutTasksInput = {
    create?: XOR<AccountCreateWithoutTasksInput, AccountUncheckedCreateWithoutTasksInput>
    connectOrCreate?: AccountCreateOrConnectWithoutTasksInput
    connect?: AccountWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AccountUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<AccountCreateWithoutTasksInput, AccountUncheckedCreateWithoutTasksInput>
    connectOrCreate?: AccountCreateOrConnectWithoutTasksInput
    upsert?: AccountUpsertWithoutTasksInput
    connect?: AccountWhereUniqueInput
    update?: XOR<AccountUpdateWithoutTasksInput, AccountUncheckedUpdateWithoutTasksInput>
  }

  export type AccountCreateNestedOneWithoutGoalsInput = {
    create?: XOR<AccountCreateWithoutGoalsInput, AccountUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutGoalsInput
    connect?: AccountWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutGoalsNestedInput = {
    create?: XOR<AccountCreateWithoutGoalsInput, AccountUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutGoalsInput
    upsert?: AccountUpsertWithoutGoalsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<AccountUpdateWithoutGoalsInput, AccountUncheckedUpdateWithoutGoalsInput>
  }

  export type AccountCreateNestedOneWithoutNotesInput = {
    create?: XOR<AccountCreateWithoutNotesInput, AccountUncheckedCreateWithoutNotesInput>
    connectOrCreate?: AccountCreateOrConnectWithoutNotesInput
    connect?: AccountWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<AccountCreateWithoutNotesInput, AccountUncheckedCreateWithoutNotesInput>
    connectOrCreate?: AccountCreateOrConnectWithoutNotesInput
    upsert?: AccountUpsertWithoutNotesInput
    connect?: AccountWhereUniqueInput
    update?: XOR<AccountUpdateWithoutNotesInput, AccountUncheckedUpdateWithoutNotesInput>
  }

  export type AccountCreateNestedOneWithoutClientContactsInput = {
    create?: XOR<AccountCreateWithoutClientContactsInput, AccountUncheckedCreateWithoutClientContactsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutClientContactsInput
    connect?: AccountWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutClientContactsNestedInput = {
    create?: XOR<AccountCreateWithoutClientContactsInput, AccountUncheckedCreateWithoutClientContactsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutClientContactsInput
    upsert?: AccountUpsertWithoutClientContactsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<AccountUpdateWithoutClientContactsInput, AccountUncheckedUpdateWithoutClientContactsInput>
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type AccountCreateNestedOneWithoutPointsInput = {
    create?: XOR<AccountCreateWithoutPointsInput, AccountUncheckedCreateWithoutPointsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutPointsInput
    connect?: AccountWhereUniqueInput
  }

  export type AccountUpdateOneRequiredWithoutPointsNestedInput = {
    create?: XOR<AccountCreateWithoutPointsInput, AccountUncheckedCreateWithoutPointsInput>
    connectOrCreate?: AccountCreateOrConnectWithoutPointsInput
    upsert?: AccountUpsertWithoutPointsInput
    connect?: AccountWhereUniqueInput
    update?: XOR<AccountUpdateWithoutPointsInput, AccountUncheckedUpdateWithoutPointsInput>
  }

  export type AccountCreateNestedOneWithoutGrowthTasksInput = {
    create?: XOR<AccountCreateWithoutGrowthTasksInput, AccountUncheckedCreateWithoutGrowthTasksInput>
    connectOrCreate?: AccountCreateOrConnectWithoutGrowthTasksInput
    connect?: AccountWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AccountUpdateOneRequiredWithoutGrowthTasksNestedInput = {
    create?: XOR<AccountCreateWithoutGrowthTasksInput, AccountUncheckedCreateWithoutGrowthTasksInput>
    connectOrCreate?: AccountCreateOrConnectWithoutGrowthTasksInput
    upsert?: AccountUpsertWithoutGrowthTasksInput
    connect?: AccountWhereUniqueInput
    update?: XOR<AccountUpdateWithoutGrowthTasksInput, AccountUncheckedUpdateWithoutGrowthTasksInput>
  }

  export type AccountCreateNestedOneWithoutClientListDataInput = {
    create?: XOR<AccountCreateWithoutClientListDataInput, AccountUncheckedCreateWithoutClientListDataInput>
    connectOrCreate?: AccountCreateOrConnectWithoutClientListDataInput
    connect?: AccountWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AccountUpdateOneRequiredWithoutClientListDataNestedInput = {
    create?: XOR<AccountCreateWithoutClientListDataInput, AccountUncheckedCreateWithoutClientListDataInput>
    connectOrCreate?: AccountCreateOrConnectWithoutClientListDataInput
    upsert?: AccountUpsertWithoutClientListDataInput
    connect?: AccountWhereUniqueInput
    update?: XOR<AccountUpdateWithoutClientListDataInput, AccountUncheckedUpdateWithoutClientListDataInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumBusinessUnitFilter = {
    equals?: BusinessUnit
    in?: Enumerable<BusinessUnit>
    notIn?: Enumerable<BusinessUnit>
    not?: NestedEnumBusinessUnitFilter | BusinessUnit
  }

  export type NestedEnumEngagementTypeFilter = {
    equals?: EngagementType
    in?: Enumerable<EngagementType>
    notIn?: Enumerable<EngagementType>
    not?: NestedEnumEngagementTypeFilter | EngagementType
  }

  export type NestedEnumPriorityFilter = {
    equals?: Priority
    in?: Enumerable<Priority>
    notIn?: Enumerable<Priority>
    not?: NestedEnumPriorityFilter | Priority
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedEnumBusinessUnitWithAggregatesFilter = {
    equals?: BusinessUnit
    in?: Enumerable<BusinessUnit>
    notIn?: Enumerable<BusinessUnit>
    not?: NestedEnumBusinessUnitWithAggregatesFilter | BusinessUnit
    _count?: NestedIntFilter
    _min?: NestedEnumBusinessUnitFilter
    _max?: NestedEnumBusinessUnitFilter
  }

  export type NestedEnumEngagementTypeWithAggregatesFilter = {
    equals?: EngagementType
    in?: Enumerable<EngagementType>
    notIn?: Enumerable<EngagementType>
    not?: NestedEnumEngagementTypeWithAggregatesFilter | EngagementType
    _count?: NestedIntFilter
    _min?: NestedEnumEngagementTypeFilter
    _max?: NestedEnumEngagementTypeFilter
  }

  export type NestedEnumPriorityWithAggregatesFilter = {
    equals?: Priority
    in?: Enumerable<Priority>
    notIn?: Enumerable<Priority>
    not?: NestedEnumPriorityWithAggregatesFilter | Priority
    _count?: NestedIntFilter
    _min?: NestedEnumPriorityFilter
    _max?: NestedEnumPriorityFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type TaskCreateWithoutAccountInput = {
    id?: string
    name: string
    description?: string | null
    status: string
    assignee?: string | null
    createdAt?: Date | string
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    lastSyncedAt?: Date | string
  }

  export type TaskUncheckedCreateWithoutAccountInput = {
    id?: string
    name: string
    description?: string | null
    status: string
    assignee?: string | null
    createdAt?: Date | string
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    lastSyncedAt?: Date | string
  }

  export type TaskCreateOrConnectWithoutAccountInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutAccountInput, TaskUncheckedCreateWithoutAccountInput>
  }

  export type TaskCreateManyAccountInputEnvelope = {
    data: Enumerable<TaskCreateManyAccountInput>
    skipDuplicates?: boolean
  }

  export type GoalCreateWithoutAccountInput = {
    id?: string
    description: string
    status: string
    dueDate: Date | string
    progress: number
  }

  export type GoalUncheckedCreateWithoutAccountInput = {
    id?: string
    description: string
    status: string
    dueDate: Date | string
    progress: number
  }

  export type GoalCreateOrConnectWithoutAccountInput = {
    where: GoalWhereUniqueInput
    create: XOR<GoalCreateWithoutAccountInput, GoalUncheckedCreateWithoutAccountInput>
  }

  export type GoalCreateManyAccountInputEnvelope = {
    data: Enumerable<GoalCreateManyAccountInput>
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutAccountInput = {
    id?: string
    description: string
    createdBy: string
    createdAt?: Date | string
  }

  export type NoteUncheckedCreateWithoutAccountInput = {
    id?: string
    description: string
    createdBy: string
    createdAt?: Date | string
  }

  export type NoteCreateOrConnectWithoutAccountInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutAccountInput, NoteUncheckedCreateWithoutAccountInput>
  }

  export type NoteCreateManyAccountInputEnvelope = {
    data: Enumerable<NoteCreateManyAccountInput>
    skipDuplicates?: boolean
  }

  export type ClientContactCreateWithoutAccountInput = {
    id?: string
    firstName: string
    lastName: string
    title: string
    email: string
  }

  export type ClientContactUncheckedCreateWithoutAccountInput = {
    id?: string
    firstName: string
    lastName: string
    title: string
    email: string
  }

  export type ClientContactCreateOrConnectWithoutAccountInput = {
    where: ClientContactWhereUniqueInput
    create: XOR<ClientContactCreateWithoutAccountInput, ClientContactUncheckedCreateWithoutAccountInput>
  }

  export type ClientContactCreateManyAccountInputEnvelope = {
    data: Enumerable<ClientContactCreateManyAccountInput>
    skipDuplicates?: boolean
  }

  export type PointsCreateWithoutAccountInput = {
    id?: string
    pointsPurchased: number
    pointsDelivered: number
    lastSyncedAt?: Date | string
  }

  export type PointsUncheckedCreateWithoutAccountInput = {
    id?: string
    pointsPurchased: number
    pointsDelivered: number
    lastSyncedAt?: Date | string
  }

  export type PointsCreateOrConnectWithoutAccountInput = {
    where: PointsWhereUniqueInput
    create: XOR<PointsCreateWithoutAccountInput, PointsUncheckedCreateWithoutAccountInput>
  }

  export type GrowthTaskCreateWithoutAccountInput = {
    id?: string
    taskId: string
    description: string
    status: string
    assignee?: string | null
    isGrowthTask?: boolean
    createdDate: Date | string
    dueDate?: Date | string | null
    dateDone?: Date | string | null
    createdBy: string
    lastSyncedAt?: Date | string
  }

  export type GrowthTaskUncheckedCreateWithoutAccountInput = {
    id?: string
    taskId: string
    description: string
    status: string
    assignee?: string | null
    isGrowthTask?: boolean
    createdDate: Date | string
    dueDate?: Date | string | null
    dateDone?: Date | string | null
    createdBy: string
    lastSyncedAt?: Date | string
  }

  export type GrowthTaskCreateOrConnectWithoutAccountInput = {
    where: GrowthTaskWhereUniqueInput
    create: XOR<GrowthTaskCreateWithoutAccountInput, GrowthTaskUncheckedCreateWithoutAccountInput>
  }

  export type GrowthTaskCreateManyAccountInputEnvelope = {
    data: Enumerable<GrowthTaskCreateManyAccountInput>
    skipDuplicates?: boolean
  }

  export type ClientListDataCreateWithoutAccountInput = {
    id?: string
    assignee?: string | null
    teamLead?: string | null
    status?: string | null
    mrr?: number | null
    contractStartDate?: Date | string | null
    contractRenewalEnd?: Date | string | null
    nextStrategyApproval?: Date | string | null
    recurringPointsAllotment?: number | null
    businessUnit?: string | null
    lastSyncedAt?: Date | string
  }

  export type ClientListDataUncheckedCreateWithoutAccountInput = {
    id?: string
    assignee?: string | null
    teamLead?: string | null
    status?: string | null
    mrr?: number | null
    contractStartDate?: Date | string | null
    contractRenewalEnd?: Date | string | null
    nextStrategyApproval?: Date | string | null
    recurringPointsAllotment?: number | null
    businessUnit?: string | null
    lastSyncedAt?: Date | string
  }

  export type ClientListDataCreateOrConnectWithoutAccountInput = {
    where: ClientListDataWhereUniqueInput
    create: XOR<ClientListDataCreateWithoutAccountInput, ClientListDataUncheckedCreateWithoutAccountInput>
  }

  export type TaskUpsertWithWhereUniqueWithoutAccountInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutAccountInput, TaskUncheckedUpdateWithoutAccountInput>
    create: XOR<TaskCreateWithoutAccountInput, TaskUncheckedCreateWithoutAccountInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutAccountInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutAccountInput, TaskUncheckedUpdateWithoutAccountInput>
  }

  export type TaskUpdateManyWithWhereWithoutAccountInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutTasksInput>
  }

  export type TaskScalarWhereInput = {
    AND?: Enumerable<TaskScalarWhereInput>
    OR?: Enumerable<TaskScalarWhereInput>
    NOT?: Enumerable<TaskScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    status?: StringFilter | string
    assignee?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    dueDate?: DateTimeNullableFilter | Date | string | null
    completedAt?: DateTimeNullableFilter | Date | string | null
    accountId?: StringFilter | string
    lastSyncedAt?: DateTimeFilter | Date | string
  }

  export type GoalUpsertWithWhereUniqueWithoutAccountInput = {
    where: GoalWhereUniqueInput
    update: XOR<GoalUpdateWithoutAccountInput, GoalUncheckedUpdateWithoutAccountInput>
    create: XOR<GoalCreateWithoutAccountInput, GoalUncheckedCreateWithoutAccountInput>
  }

  export type GoalUpdateWithWhereUniqueWithoutAccountInput = {
    where: GoalWhereUniqueInput
    data: XOR<GoalUpdateWithoutAccountInput, GoalUncheckedUpdateWithoutAccountInput>
  }

  export type GoalUpdateManyWithWhereWithoutAccountInput = {
    where: GoalScalarWhereInput
    data: XOR<GoalUpdateManyMutationInput, GoalUncheckedUpdateManyWithoutGoalsInput>
  }

  export type GoalScalarWhereInput = {
    AND?: Enumerable<GoalScalarWhereInput>
    OR?: Enumerable<GoalScalarWhereInput>
    NOT?: Enumerable<GoalScalarWhereInput>
    id?: StringFilter | string
    description?: StringFilter | string
    status?: StringFilter | string
    dueDate?: DateTimeFilter | Date | string
    progress?: IntFilter | number
    accountId?: StringFilter | string
  }

  export type NoteUpsertWithWhereUniqueWithoutAccountInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutAccountInput, NoteUncheckedUpdateWithoutAccountInput>
    create: XOR<NoteCreateWithoutAccountInput, NoteUncheckedCreateWithoutAccountInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutAccountInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutAccountInput, NoteUncheckedUpdateWithoutAccountInput>
  }

  export type NoteUpdateManyWithWhereWithoutAccountInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutNotesInput>
  }

  export type NoteScalarWhereInput = {
    AND?: Enumerable<NoteScalarWhereInput>
    OR?: Enumerable<NoteScalarWhereInput>
    NOT?: Enumerable<NoteScalarWhereInput>
    id?: StringFilter | string
    description?: StringFilter | string
    createdBy?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    accountId?: StringFilter | string
  }

  export type ClientContactUpsertWithWhereUniqueWithoutAccountInput = {
    where: ClientContactWhereUniqueInput
    update: XOR<ClientContactUpdateWithoutAccountInput, ClientContactUncheckedUpdateWithoutAccountInput>
    create: XOR<ClientContactCreateWithoutAccountInput, ClientContactUncheckedCreateWithoutAccountInput>
  }

  export type ClientContactUpdateWithWhereUniqueWithoutAccountInput = {
    where: ClientContactWhereUniqueInput
    data: XOR<ClientContactUpdateWithoutAccountInput, ClientContactUncheckedUpdateWithoutAccountInput>
  }

  export type ClientContactUpdateManyWithWhereWithoutAccountInput = {
    where: ClientContactScalarWhereInput
    data: XOR<ClientContactUpdateManyMutationInput, ClientContactUncheckedUpdateManyWithoutClientContactsInput>
  }

  export type ClientContactScalarWhereInput = {
    AND?: Enumerable<ClientContactScalarWhereInput>
    OR?: Enumerable<ClientContactScalarWhereInput>
    NOT?: Enumerable<ClientContactScalarWhereInput>
    id?: StringFilter | string
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    title?: StringFilter | string
    email?: StringFilter | string
    accountId?: StringFilter | string
  }

  export type PointsUpsertWithoutAccountInput = {
    update: XOR<PointsUpdateWithoutAccountInput, PointsUncheckedUpdateWithoutAccountInput>
    create: XOR<PointsCreateWithoutAccountInput, PointsUncheckedCreateWithoutAccountInput>
  }

  export type PointsUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PointsUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrowthTaskUpsertWithWhereUniqueWithoutAccountInput = {
    where: GrowthTaskWhereUniqueInput
    update: XOR<GrowthTaskUpdateWithoutAccountInput, GrowthTaskUncheckedUpdateWithoutAccountInput>
    create: XOR<GrowthTaskCreateWithoutAccountInput, GrowthTaskUncheckedCreateWithoutAccountInput>
  }

  export type GrowthTaskUpdateWithWhereUniqueWithoutAccountInput = {
    where: GrowthTaskWhereUniqueInput
    data: XOR<GrowthTaskUpdateWithoutAccountInput, GrowthTaskUncheckedUpdateWithoutAccountInput>
  }

  export type GrowthTaskUpdateManyWithWhereWithoutAccountInput = {
    where: GrowthTaskScalarWhereInput
    data: XOR<GrowthTaskUpdateManyMutationInput, GrowthTaskUncheckedUpdateManyWithoutGrowthTasksInput>
  }

  export type GrowthTaskScalarWhereInput = {
    AND?: Enumerable<GrowthTaskScalarWhereInput>
    OR?: Enumerable<GrowthTaskScalarWhereInput>
    NOT?: Enumerable<GrowthTaskScalarWhereInput>
    id?: StringFilter | string
    accountId?: StringFilter | string
    taskId?: StringFilter | string
    description?: StringFilter | string
    status?: StringFilter | string
    assignee?: StringNullableFilter | string | null
    isGrowthTask?: BoolFilter | boolean
    createdDate?: DateTimeFilter | Date | string
    dueDate?: DateTimeNullableFilter | Date | string | null
    dateDone?: DateTimeNullableFilter | Date | string | null
    createdBy?: StringFilter | string
    lastSyncedAt?: DateTimeFilter | Date | string
  }

  export type ClientListDataUpsertWithoutAccountInput = {
    update: XOR<ClientListDataUpdateWithoutAccountInput, ClientListDataUncheckedUpdateWithoutAccountInput>
    create: XOR<ClientListDataCreateWithoutAccountInput, ClientListDataUncheckedCreateWithoutAccountInput>
  }

  export type ClientListDataUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    teamLead?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mrr?: NullableFloatFieldUpdateOperationsInput | number | null
    contractStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractRenewalEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextStrategyApproval?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recurringPointsAllotment?: NullableFloatFieldUpdateOperationsInput | number | null
    businessUnit?: NullableStringFieldUpdateOperationsInput | string | null
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientListDataUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    teamLead?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mrr?: NullableFloatFieldUpdateOperationsInput | number | null
    contractStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractRenewalEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextStrategyApproval?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recurringPointsAllotment?: NullableFloatFieldUpdateOperationsInput | number | null
    businessUnit?: NullableStringFieldUpdateOperationsInput | string | null
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateWithoutTasksInput = {
    id?: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | Enumerable<Service>
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId?: string | null
    clientListTaskId?: string | null
    goals?: GoalCreateNestedManyWithoutAccountInput
    notes?: NoteCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactCreateNestedManyWithoutAccountInput
    points?: PointsCreateNestedOneWithoutAccountInput
    growthTasks?: GrowthTaskCreateNestedManyWithoutAccountInput
    clientListData?: ClientListDataCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutTasksInput = {
    id?: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | Enumerable<Service>
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId?: string | null
    clientListTaskId?: string | null
    goals?: GoalUncheckedCreateNestedManyWithoutAccountInput
    notes?: NoteUncheckedCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactUncheckedCreateNestedManyWithoutAccountInput
    points?: PointsUncheckedCreateNestedOneWithoutAccountInput
    growthTasks?: GrowthTaskUncheckedCreateNestedManyWithoutAccountInput
    clientListData?: ClientListDataUncheckedCreateNestedOneWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutTasksInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutTasksInput, AccountUncheckedCreateWithoutTasksInput>
  }

  export type AccountUpsertWithoutTasksInput = {
    update: XOR<AccountUpdateWithoutTasksInput, AccountUncheckedUpdateWithoutTasksInput>
    create: XOR<AccountCreateWithoutTasksInput, AccountUncheckedCreateWithoutTasksInput>
  }

  export type AccountUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | Enumerable<Service>
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    pointsStrikingDistance?: FloatFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: FloatFieldUpdateOperationsInput | number
    mrr?: FloatFieldUpdateOperationsInput | number
    growthInMrr?: FloatFieldUpdateOperationsInput | number
    potentialMrr?: FloatFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: FloatFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    clientFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    clientListTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: GoalUpdateManyWithoutAccountNestedInput
    notes?: NoteUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUpdateManyWithoutAccountNestedInput
    points?: PointsUpdateOneWithoutAccountNestedInput
    growthTasks?: GrowthTaskUpdateManyWithoutAccountNestedInput
    clientListData?: ClientListDataUpdateOneWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | Enumerable<Service>
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    pointsStrikingDistance?: FloatFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: FloatFieldUpdateOperationsInput | number
    mrr?: FloatFieldUpdateOperationsInput | number
    growthInMrr?: FloatFieldUpdateOperationsInput | number
    potentialMrr?: FloatFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: FloatFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    clientFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    clientListTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    goals?: GoalUncheckedUpdateManyWithoutAccountNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUncheckedUpdateManyWithoutAccountNestedInput
    points?: PointsUncheckedUpdateOneWithoutAccountNestedInput
    growthTasks?: GrowthTaskUncheckedUpdateManyWithoutAccountNestedInput
    clientListData?: ClientListDataUncheckedUpdateOneWithoutAccountNestedInput
  }

  export type AccountCreateWithoutGoalsInput = {
    id?: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | Enumerable<Service>
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId?: string | null
    clientListTaskId?: string | null
    tasks?: TaskCreateNestedManyWithoutAccountInput
    notes?: NoteCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactCreateNestedManyWithoutAccountInput
    points?: PointsCreateNestedOneWithoutAccountInput
    growthTasks?: GrowthTaskCreateNestedManyWithoutAccountInput
    clientListData?: ClientListDataCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutGoalsInput = {
    id?: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | Enumerable<Service>
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId?: string | null
    clientListTaskId?: string | null
    tasks?: TaskUncheckedCreateNestedManyWithoutAccountInput
    notes?: NoteUncheckedCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactUncheckedCreateNestedManyWithoutAccountInput
    points?: PointsUncheckedCreateNestedOneWithoutAccountInput
    growthTasks?: GrowthTaskUncheckedCreateNestedManyWithoutAccountInput
    clientListData?: ClientListDataUncheckedCreateNestedOneWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutGoalsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutGoalsInput, AccountUncheckedCreateWithoutGoalsInput>
  }

  export type AccountUpsertWithoutGoalsInput = {
    update: XOR<AccountUpdateWithoutGoalsInput, AccountUncheckedUpdateWithoutGoalsInput>
    create: XOR<AccountCreateWithoutGoalsInput, AccountUncheckedCreateWithoutGoalsInput>
  }

  export type AccountUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | Enumerable<Service>
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    pointsStrikingDistance?: FloatFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: FloatFieldUpdateOperationsInput | number
    mrr?: FloatFieldUpdateOperationsInput | number
    growthInMrr?: FloatFieldUpdateOperationsInput | number
    potentialMrr?: FloatFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: FloatFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    clientFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    clientListTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    tasks?: TaskUpdateManyWithoutAccountNestedInput
    notes?: NoteUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUpdateManyWithoutAccountNestedInput
    points?: PointsUpdateOneWithoutAccountNestedInput
    growthTasks?: GrowthTaskUpdateManyWithoutAccountNestedInput
    clientListData?: ClientListDataUpdateOneWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | Enumerable<Service>
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    pointsStrikingDistance?: FloatFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: FloatFieldUpdateOperationsInput | number
    mrr?: FloatFieldUpdateOperationsInput | number
    growthInMrr?: FloatFieldUpdateOperationsInput | number
    potentialMrr?: FloatFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: FloatFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    clientFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    clientListTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    tasks?: TaskUncheckedUpdateManyWithoutAccountNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUncheckedUpdateManyWithoutAccountNestedInput
    points?: PointsUncheckedUpdateOneWithoutAccountNestedInput
    growthTasks?: GrowthTaskUncheckedUpdateManyWithoutAccountNestedInput
    clientListData?: ClientListDataUncheckedUpdateOneWithoutAccountNestedInput
  }

  export type AccountCreateWithoutNotesInput = {
    id?: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | Enumerable<Service>
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId?: string | null
    clientListTaskId?: string | null
    tasks?: TaskCreateNestedManyWithoutAccountInput
    goals?: GoalCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactCreateNestedManyWithoutAccountInput
    points?: PointsCreateNestedOneWithoutAccountInput
    growthTasks?: GrowthTaskCreateNestedManyWithoutAccountInput
    clientListData?: ClientListDataCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutNotesInput = {
    id?: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | Enumerable<Service>
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId?: string | null
    clientListTaskId?: string | null
    tasks?: TaskUncheckedCreateNestedManyWithoutAccountInput
    goals?: GoalUncheckedCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactUncheckedCreateNestedManyWithoutAccountInput
    points?: PointsUncheckedCreateNestedOneWithoutAccountInput
    growthTasks?: GrowthTaskUncheckedCreateNestedManyWithoutAccountInput
    clientListData?: ClientListDataUncheckedCreateNestedOneWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutNotesInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutNotesInput, AccountUncheckedCreateWithoutNotesInput>
  }

  export type AccountUpsertWithoutNotesInput = {
    update: XOR<AccountUpdateWithoutNotesInput, AccountUncheckedUpdateWithoutNotesInput>
    create: XOR<AccountCreateWithoutNotesInput, AccountUncheckedCreateWithoutNotesInput>
  }

  export type AccountUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | Enumerable<Service>
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    pointsStrikingDistance?: FloatFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: FloatFieldUpdateOperationsInput | number
    mrr?: FloatFieldUpdateOperationsInput | number
    growthInMrr?: FloatFieldUpdateOperationsInput | number
    potentialMrr?: FloatFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: FloatFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    clientFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    clientListTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    tasks?: TaskUpdateManyWithoutAccountNestedInput
    goals?: GoalUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUpdateManyWithoutAccountNestedInput
    points?: PointsUpdateOneWithoutAccountNestedInput
    growthTasks?: GrowthTaskUpdateManyWithoutAccountNestedInput
    clientListData?: ClientListDataUpdateOneWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | Enumerable<Service>
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    pointsStrikingDistance?: FloatFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: FloatFieldUpdateOperationsInput | number
    mrr?: FloatFieldUpdateOperationsInput | number
    growthInMrr?: FloatFieldUpdateOperationsInput | number
    potentialMrr?: FloatFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: FloatFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    clientFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    clientListTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    tasks?: TaskUncheckedUpdateManyWithoutAccountNestedInput
    goals?: GoalUncheckedUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUncheckedUpdateManyWithoutAccountNestedInput
    points?: PointsUncheckedUpdateOneWithoutAccountNestedInput
    growthTasks?: GrowthTaskUncheckedUpdateManyWithoutAccountNestedInput
    clientListData?: ClientListDataUncheckedUpdateOneWithoutAccountNestedInput
  }

  export type AccountCreateWithoutClientContactsInput = {
    id?: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | Enumerable<Service>
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId?: string | null
    clientListTaskId?: string | null
    tasks?: TaskCreateNestedManyWithoutAccountInput
    goals?: GoalCreateNestedManyWithoutAccountInput
    notes?: NoteCreateNestedManyWithoutAccountInput
    points?: PointsCreateNestedOneWithoutAccountInput
    growthTasks?: GrowthTaskCreateNestedManyWithoutAccountInput
    clientListData?: ClientListDataCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutClientContactsInput = {
    id?: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | Enumerable<Service>
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId?: string | null
    clientListTaskId?: string | null
    tasks?: TaskUncheckedCreateNestedManyWithoutAccountInput
    goals?: GoalUncheckedCreateNestedManyWithoutAccountInput
    notes?: NoteUncheckedCreateNestedManyWithoutAccountInput
    points?: PointsUncheckedCreateNestedOneWithoutAccountInput
    growthTasks?: GrowthTaskUncheckedCreateNestedManyWithoutAccountInput
    clientListData?: ClientListDataUncheckedCreateNestedOneWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutClientContactsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutClientContactsInput, AccountUncheckedCreateWithoutClientContactsInput>
  }

  export type AccountUpsertWithoutClientContactsInput = {
    update: XOR<AccountUpdateWithoutClientContactsInput, AccountUncheckedUpdateWithoutClientContactsInput>
    create: XOR<AccountCreateWithoutClientContactsInput, AccountUncheckedCreateWithoutClientContactsInput>
  }

  export type AccountUpdateWithoutClientContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | Enumerable<Service>
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    pointsStrikingDistance?: FloatFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: FloatFieldUpdateOperationsInput | number
    mrr?: FloatFieldUpdateOperationsInput | number
    growthInMrr?: FloatFieldUpdateOperationsInput | number
    potentialMrr?: FloatFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: FloatFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    clientFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    clientListTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    tasks?: TaskUpdateManyWithoutAccountNestedInput
    goals?: GoalUpdateManyWithoutAccountNestedInput
    notes?: NoteUpdateManyWithoutAccountNestedInput
    points?: PointsUpdateOneWithoutAccountNestedInput
    growthTasks?: GrowthTaskUpdateManyWithoutAccountNestedInput
    clientListData?: ClientListDataUpdateOneWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutClientContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | Enumerable<Service>
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    pointsStrikingDistance?: FloatFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: FloatFieldUpdateOperationsInput | number
    mrr?: FloatFieldUpdateOperationsInput | number
    growthInMrr?: FloatFieldUpdateOperationsInput | number
    potentialMrr?: FloatFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: FloatFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    clientFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    clientListTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    tasks?: TaskUncheckedUpdateManyWithoutAccountNestedInput
    goals?: GoalUncheckedUpdateManyWithoutAccountNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAccountNestedInput
    points?: PointsUncheckedUpdateOneWithoutAccountNestedInput
    growthTasks?: GrowthTaskUncheckedUpdateManyWithoutAccountNestedInput
    clientListData?: ClientListDataUncheckedUpdateOneWithoutAccountNestedInput
  }

  export type AccountCreateWithoutPointsInput = {
    id?: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | Enumerable<Service>
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId?: string | null
    clientListTaskId?: string | null
    tasks?: TaskCreateNestedManyWithoutAccountInput
    goals?: GoalCreateNestedManyWithoutAccountInput
    notes?: NoteCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactCreateNestedManyWithoutAccountInput
    growthTasks?: GrowthTaskCreateNestedManyWithoutAccountInput
    clientListData?: ClientListDataCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutPointsInput = {
    id?: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | Enumerable<Service>
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId?: string | null
    clientListTaskId?: string | null
    tasks?: TaskUncheckedCreateNestedManyWithoutAccountInput
    goals?: GoalUncheckedCreateNestedManyWithoutAccountInput
    notes?: NoteUncheckedCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactUncheckedCreateNestedManyWithoutAccountInput
    growthTasks?: GrowthTaskUncheckedCreateNestedManyWithoutAccountInput
    clientListData?: ClientListDataUncheckedCreateNestedOneWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutPointsInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutPointsInput, AccountUncheckedCreateWithoutPointsInput>
  }

  export type AccountUpsertWithoutPointsInput = {
    update: XOR<AccountUpdateWithoutPointsInput, AccountUncheckedUpdateWithoutPointsInput>
    create: XOR<AccountCreateWithoutPointsInput, AccountUncheckedCreateWithoutPointsInput>
  }

  export type AccountUpdateWithoutPointsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | Enumerable<Service>
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    pointsStrikingDistance?: FloatFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: FloatFieldUpdateOperationsInput | number
    mrr?: FloatFieldUpdateOperationsInput | number
    growthInMrr?: FloatFieldUpdateOperationsInput | number
    potentialMrr?: FloatFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: FloatFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    clientFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    clientListTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    tasks?: TaskUpdateManyWithoutAccountNestedInput
    goals?: GoalUpdateManyWithoutAccountNestedInput
    notes?: NoteUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUpdateManyWithoutAccountNestedInput
    growthTasks?: GrowthTaskUpdateManyWithoutAccountNestedInput
    clientListData?: ClientListDataUpdateOneWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutPointsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | Enumerable<Service>
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    pointsStrikingDistance?: FloatFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: FloatFieldUpdateOperationsInput | number
    mrr?: FloatFieldUpdateOperationsInput | number
    growthInMrr?: FloatFieldUpdateOperationsInput | number
    potentialMrr?: FloatFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: FloatFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    clientFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    clientListTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    tasks?: TaskUncheckedUpdateManyWithoutAccountNestedInput
    goals?: GoalUncheckedUpdateManyWithoutAccountNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUncheckedUpdateManyWithoutAccountNestedInput
    growthTasks?: GrowthTaskUncheckedUpdateManyWithoutAccountNestedInput
    clientListData?: ClientListDataUncheckedUpdateOneWithoutAccountNestedInput
  }

  export type AccountCreateWithoutGrowthTasksInput = {
    id?: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | Enumerable<Service>
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId?: string | null
    clientListTaskId?: string | null
    tasks?: TaskCreateNestedManyWithoutAccountInput
    goals?: GoalCreateNestedManyWithoutAccountInput
    notes?: NoteCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactCreateNestedManyWithoutAccountInput
    points?: PointsCreateNestedOneWithoutAccountInput
    clientListData?: ClientListDataCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutGrowthTasksInput = {
    id?: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | Enumerable<Service>
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId?: string | null
    clientListTaskId?: string | null
    tasks?: TaskUncheckedCreateNestedManyWithoutAccountInput
    goals?: GoalUncheckedCreateNestedManyWithoutAccountInput
    notes?: NoteUncheckedCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactUncheckedCreateNestedManyWithoutAccountInput
    points?: PointsUncheckedCreateNestedOneWithoutAccountInput
    clientListData?: ClientListDataUncheckedCreateNestedOneWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutGrowthTasksInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutGrowthTasksInput, AccountUncheckedCreateWithoutGrowthTasksInput>
  }

  export type AccountUpsertWithoutGrowthTasksInput = {
    update: XOR<AccountUpdateWithoutGrowthTasksInput, AccountUncheckedUpdateWithoutGrowthTasksInput>
    create: XOR<AccountCreateWithoutGrowthTasksInput, AccountUncheckedCreateWithoutGrowthTasksInput>
  }

  export type AccountUpdateWithoutGrowthTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | Enumerable<Service>
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    pointsStrikingDistance?: FloatFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: FloatFieldUpdateOperationsInput | number
    mrr?: FloatFieldUpdateOperationsInput | number
    growthInMrr?: FloatFieldUpdateOperationsInput | number
    potentialMrr?: FloatFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: FloatFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    clientFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    clientListTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    tasks?: TaskUpdateManyWithoutAccountNestedInput
    goals?: GoalUpdateManyWithoutAccountNestedInput
    notes?: NoteUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUpdateManyWithoutAccountNestedInput
    points?: PointsUpdateOneWithoutAccountNestedInput
    clientListData?: ClientListDataUpdateOneWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutGrowthTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | Enumerable<Service>
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    pointsStrikingDistance?: FloatFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: FloatFieldUpdateOperationsInput | number
    mrr?: FloatFieldUpdateOperationsInput | number
    growthInMrr?: FloatFieldUpdateOperationsInput | number
    potentialMrr?: FloatFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: FloatFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    clientFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    clientListTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    tasks?: TaskUncheckedUpdateManyWithoutAccountNestedInput
    goals?: GoalUncheckedUpdateManyWithoutAccountNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUncheckedUpdateManyWithoutAccountNestedInput
    points?: PointsUncheckedUpdateOneWithoutAccountNestedInput
    clientListData?: ClientListDataUncheckedUpdateOneWithoutAccountNestedInput
  }

  export type AccountCreateWithoutClientListDataInput = {
    id?: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | Enumerable<Service>
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId?: string | null
    clientListTaskId?: string | null
    tasks?: TaskCreateNestedManyWithoutAccountInput
    goals?: GoalCreateNestedManyWithoutAccountInput
    notes?: NoteCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactCreateNestedManyWithoutAccountInput
    points?: PointsCreateNestedOneWithoutAccountInput
    growthTasks?: GrowthTaskCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutClientListDataInput = {
    id?: string
    accountName: string
    businessUnit: BusinessUnit
    engagementType: EngagementType
    priority: Priority
    accountManager: string
    teamManager: string
    relationshipStartDate: Date | string
    contractStartDate: Date | string
    contractRenewalEnd: Date | string
    services?: AccountCreateservicesInput | Enumerable<Service>
    pointsPurchased: number
    pointsDelivered: number
    pointsStrikingDistance: number
    delivery: string
    recurringPointsAllotment: number
    mrr: number
    growthInMrr: number
    potentialMrr: number
    website?: string | null
    linkedinProfile?: string | null
    industry: string
    annualRevenue: number
    employees: number
    clientFolderId?: string | null
    clientListTaskId?: string | null
    tasks?: TaskUncheckedCreateNestedManyWithoutAccountInput
    goals?: GoalUncheckedCreateNestedManyWithoutAccountInput
    notes?: NoteUncheckedCreateNestedManyWithoutAccountInput
    clientContacts?: ClientContactUncheckedCreateNestedManyWithoutAccountInput
    points?: PointsUncheckedCreateNestedOneWithoutAccountInput
    growthTasks?: GrowthTaskUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutClientListDataInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutClientListDataInput, AccountUncheckedCreateWithoutClientListDataInput>
  }

  export type AccountUpsertWithoutClientListDataInput = {
    update: XOR<AccountUpdateWithoutClientListDataInput, AccountUncheckedUpdateWithoutClientListDataInput>
    create: XOR<AccountCreateWithoutClientListDataInput, AccountUncheckedCreateWithoutClientListDataInput>
  }

  export type AccountUpdateWithoutClientListDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | Enumerable<Service>
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    pointsStrikingDistance?: FloatFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: FloatFieldUpdateOperationsInput | number
    mrr?: FloatFieldUpdateOperationsInput | number
    growthInMrr?: FloatFieldUpdateOperationsInput | number
    potentialMrr?: FloatFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: FloatFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    clientFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    clientListTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    tasks?: TaskUpdateManyWithoutAccountNestedInput
    goals?: GoalUpdateManyWithoutAccountNestedInput
    notes?: NoteUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUpdateManyWithoutAccountNestedInput
    points?: PointsUpdateOneWithoutAccountNestedInput
    growthTasks?: GrowthTaskUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutClientListDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountName?: StringFieldUpdateOperationsInput | string
    businessUnit?: EnumBusinessUnitFieldUpdateOperationsInput | BusinessUnit
    engagementType?: EnumEngagementTypeFieldUpdateOperationsInput | EngagementType
    priority?: EnumPriorityFieldUpdateOperationsInput | Priority
    accountManager?: StringFieldUpdateOperationsInput | string
    teamManager?: StringFieldUpdateOperationsInput | string
    relationshipStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractStartDate?: DateTimeFieldUpdateOperationsInput | Date | string
    contractRenewalEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: AccountUpdateservicesInput | Enumerable<Service>
    pointsPurchased?: FloatFieldUpdateOperationsInput | number
    pointsDelivered?: FloatFieldUpdateOperationsInput | number
    pointsStrikingDistance?: FloatFieldUpdateOperationsInput | number
    delivery?: StringFieldUpdateOperationsInput | string
    recurringPointsAllotment?: FloatFieldUpdateOperationsInput | number
    mrr?: FloatFieldUpdateOperationsInput | number
    growthInMrr?: FloatFieldUpdateOperationsInput | number
    potentialMrr?: FloatFieldUpdateOperationsInput | number
    website?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinProfile?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: StringFieldUpdateOperationsInput | string
    annualRevenue?: FloatFieldUpdateOperationsInput | number
    employees?: IntFieldUpdateOperationsInput | number
    clientFolderId?: NullableStringFieldUpdateOperationsInput | string | null
    clientListTaskId?: NullableStringFieldUpdateOperationsInput | string | null
    tasks?: TaskUncheckedUpdateManyWithoutAccountNestedInput
    goals?: GoalUncheckedUpdateManyWithoutAccountNestedInput
    notes?: NoteUncheckedUpdateManyWithoutAccountNestedInput
    clientContacts?: ClientContactUncheckedUpdateManyWithoutAccountNestedInput
    points?: PointsUncheckedUpdateOneWithoutAccountNestedInput
    growthTasks?: GrowthTaskUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type TaskCreateManyAccountInput = {
    id?: string
    name: string
    description?: string | null
    status: string
    assignee?: string | null
    createdAt?: Date | string
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    lastSyncedAt?: Date | string
  }

  export type GoalCreateManyAccountInput = {
    id?: string
    description: string
    status: string
    dueDate: Date | string
    progress: number
  }

  export type NoteCreateManyAccountInput = {
    id?: string
    description: string
    createdBy: string
    createdAt?: Date | string
  }

  export type ClientContactCreateManyAccountInput = {
    id?: string
    firstName: string
    lastName: string
    title: string
    email: string
  }

  export type GrowthTaskCreateManyAccountInput = {
    id?: string
    taskId: string
    description: string
    status: string
    assignee?: string | null
    isGrowthTask?: boolean
    createdDate: Date | string
    dueDate?: Date | string | null
    dateDone?: Date | string | null
    createdBy: string
    lastSyncedAt?: Date | string
  }

  export type TaskUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GoalUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
  }

  export type GoalUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
  }

  export type GoalUncheckedUpdateManyWithoutGoalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: IntFieldUpdateOperationsInput | number
  }

  export type NoteUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteUncheckedUpdateManyWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientContactUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ClientContactUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ClientContactUncheckedUpdateManyWithoutClientContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type GrowthTaskUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    isGrowthTask?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrowthTaskUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    isGrowthTask?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GrowthTaskUncheckedUpdateManyWithoutGrowthTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    assignee?: NullableStringFieldUpdateOperationsInput | string | null
    isGrowthTask?: BoolFieldUpdateOperationsInput | boolean
    createdDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateDone?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    lastSyncedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}