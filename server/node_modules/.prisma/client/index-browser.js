
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountName: 'accountName',
  businessUnit: 'businessUnit',
  engagementType: 'engagementType',
  priority: 'priority',
  accountManager: 'accountManager',
  teamManager: 'teamManager',
  relationshipStartDate: 'relationshipStartDate',
  contractStartDate: 'contractStartDate',
  contractRenewalEnd: 'contractRenewalEnd',
  services: 'services',
  pointsPurchased: 'pointsPurchased',
  pointsDelivered: 'pointsDelivered',
  pointsStrikingDistance: 'pointsStrikingDistance',
  delivery: 'delivery',
  recurringPointsAllotment: 'recurringPointsAllotment',
  mrr: 'mrr',
  growthInMrr: 'growthInMrr',
  potentialMrr: 'potentialMrr',
  website: 'website',
  linkedinProfile: 'linkedinProfile',
  industry: 'industry',
  annualRevenue: 'annualRevenue',
  employees: 'employees',
  clientFolderId: 'clientFolderId',
  clientListTaskId: 'clientListTaskId'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  assignee: 'assignee',
  createdAt: 'createdAt',
  dueDate: 'dueDate',
  completedAt: 'completedAt',
  accountId: 'accountId',
  lastSyncedAt: 'lastSyncedAt'
};

exports.Prisma.GoalScalarFieldEnum = {
  id: 'id',
  description: 'description',
  status: 'status',
  dueDate: 'dueDate',
  progress: 'progress',
  accountId: 'accountId'
};

exports.Prisma.NoteScalarFieldEnum = {
  id: 'id',
  description: 'description',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  accountId: 'accountId'
};

exports.Prisma.ClientContactScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  title: 'title',
  email: 'email',
  accountId: 'accountId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  googleId: 'googleId',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PointsScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  pointsPurchased: 'pointsPurchased',
  pointsDelivered: 'pointsDelivered',
  lastSyncedAt: 'lastSyncedAt'
};

exports.Prisma.GrowthTaskScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  taskId: 'taskId',
  description: 'description',
  status: 'status',
  assignee: 'assignee',
  isGrowthTask: 'isGrowthTask',
  createdDate: 'createdDate',
  dueDate: 'dueDate',
  dateDone: 'dateDone',
  createdBy: 'createdBy',
  lastSyncedAt: 'lastSyncedAt'
};

exports.Prisma.ClientListDataScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  assignee: 'assignee',
  teamLead: 'teamLead',
  status: 'status',
  mrr: 'mrr',
  contractStartDate: 'contractStartDate',
  contractRenewalEnd: 'contractRenewalEnd',
  nextStrategyApproval: 'nextStrategyApproval',
  recurringPointsAllotment: 'recurringPointsAllotment',
  businessUnit: 'businessUnit',
  lastSyncedAt: 'lastSyncedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.BusinessUnit = {
  NEW_NORTH: 'NEW_NORTH',
  IDEOMETRY: 'IDEOMETRY',
  MOTION: 'MOTION',
  SPOKE: 'SPOKE'
};

exports.EngagementType = {
  STRATEGIC: 'STRATEGIC',
  TACTICAL: 'TACTICAL'
};

exports.Priority = {
  TIER_1: 'TIER_1',
  TIER_2: 'TIER_2',
  TIER_3: 'TIER_3',
  TIER_4: 'TIER_4'
};

exports.Service = {
  SOCIAL: 'SOCIAL',
  WEBSITE: 'WEBSITE',
  SEO: 'SEO',
  PPC: 'PPC',
  EMAIL: 'EMAIL',
  CONTENT: 'CONTENT'
};

exports.Role = {
  GROWTH_MANAGER: 'GROWTH_MANAGER',
  ADMINISTRATOR: 'ADMINISTRATOR',
  GROWTH_ADVISOR: 'GROWTH_ADVISOR'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  Task: 'Task',
  Goal: 'Goal',
  Note: 'Note',
  ClientContact: 'ClientContact',
  User: 'User',
  Points: 'Points',
  GrowthTask: 'GrowthTask',
  ClientListData: 'ClientListData'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
