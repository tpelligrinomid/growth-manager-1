// This is your Prisma schema file
generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Keep these enum definitions at the top
enum EngagementType {
  STRATEGIC
  TACTICAL
}

enum Priority {
  TIER_1
  TIER_2
  TIER_3
  TIER_4
}

enum Service {
  ABM
  PAID_MEDIA
  SEO
  CONTENT
  REPORTING
  SOCIAL
  WEBSITE
}

model Account {
  id                     String   @id @default(uuid())
  
  // Manual Entry Fields
  engagementType         EngagementType
  priority               Priority
  industry               String
  annualRevenue          Float
  employees              Int
  website                String?
  linkedinProfile        String?
  clientFolderId         String   @default("")
  clientListTaskId       String   @default("")
  growthInMrr           Float    @default(0)
  services              Service[]

  // BigQuery Sourced Fields
  accountName            String   @default("")
  businessUnit           String   @default("")
  accountManager         String   @default("")
  teamManager            String   @default("")
  status                 String   @default("")
  relationshipStartDate  DateTime @default(now())
  contractStartDate      DateTime @default(now())
  contractRenewalEnd     DateTime @default(now())
  pointsPurchased        Float    @default(0)
  pointsDelivered        Float    @default(0)
  recurringPointsAllotment Float  @default(0)
  mrr                    Float    @default(0)

  // Calculated Fields
  clientTenure          Int      @default(0)
  pointsStrikingDistance Float   @default(0)
  potentialMrr          Float    @default(0)

  // Relations
  tasks                  Task[]
  goals                  Goal[]
  clientContacts         ClientContact[]
}

model Task {
  id          String    @id @default(uuid())
  name        String
  description String?
  status      String
  assignee    String?
  createdAt   DateTime  @default(now())
  dueDate     DateTime?
  completedAt DateTime?
  account     Account   @relation(fields: [accountId], references: [id])
  accountId   String
  lastSyncedAt DateTime @default(now())
}

model Goal {
  id          String   @id @default(uuid())
  description String
  status      String
  dueDate     DateTime
  progress    Int
  account     Account  @relation(fields: [accountId], references: [id])
  accountId   String
}

model ClientContact {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  title     String
  email     String
  account   Account @relation(fields: [accountId], references: [id])
  accountId String
}

enum Role {
  GROWTH_MANAGER
  ADMINISTRATOR
  GROWTH_ADVISOR
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  googleId      String    @unique
  role          Role      @default(GROWTH_ADVISOR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}