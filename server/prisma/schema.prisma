// This is your Prisma schema file
generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Keep these enum definitions at the top
enum BusinessUnit {
  NEW_NORTH
  IDEOMETRY
  MOTION
  SPOKE
}

enum EngagementType {
  STRATEGIC
  TACTICAL
}

enum Priority {
  TIER_1
  TIER_2
  TIER_3
  TIER_4
}

enum Service {
  SOCIAL
  WEBSITE
  SEO
  PPC
  EMAIL
  CONTENT
}

model Account {
  id                     String   @id @default(uuid())
  accountName            String
  businessUnit           BusinessUnit
  engagementType         EngagementType
  priority               Priority
  accountManager         String
  teamManager            String
  relationshipStartDate  DateTime
  contractStartDate      DateTime
  contractRenewalEnd     DateTime
  services               Service[]
  pointsPurchased        Float
  pointsDelivered        Float
  pointsStrikingDistance Float
  delivery               String
  recurringPointsAllotment Float
  mrr                    Float
  growthInMrr            Float
  potentialMrr           Float
  website                String?
  linkedinProfile        String?
  industry               String
  annualRevenue          Float
  employees              Int
  tasks                  Task[]
  goals                  Goal[]
  notes                  Note[]
  clientContacts         ClientContact[]
  clientFolderId         String?    @unique  // ClickUp Folder ID
  clientListTaskId       String?    @unique  // ClickUp Client List Task ID
}

model Task {
  id          String    @id @default(uuid())
  name        String
  description String?
  status      String
  assignee    String?
  createdAt   DateTime  @default(now())
  dueDate     DateTime?
  completedAt DateTime?
  account     Account   @relation(fields: [accountId], references: [id])
  accountId   String
  lastSyncedAt DateTime @default(now())
}

model Goal {
  id          String   @id @default(uuid())
  description String
  status      String
  dueDate     DateTime
  progress    Int
  account     Account  @relation(fields: [accountId], references: [id])
  accountId   String
}

model Note {
  id          String   @id @default(uuid())
  description String
  createdBy   String
  createdAt   DateTime @default(now())
  account     Account  @relation(fields: [accountId], references: [id])
  accountId   String
}

model ClientContact {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  title     String
  email     String
  account   Account @relation(fields: [accountId], references: [id])
  accountId String
}

enum Role {
  GROWTH_MANAGER
  ADMINISTRATOR
  GROWTH_ADVISOR
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  googleId      String    @unique
  role          Role      @default(GROWTH_ADVISOR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}